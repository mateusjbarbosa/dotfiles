import{readdirSync}from"node:fs";import{join}from"node:path";import{existsSync}from"node:fs";import{pathToFileURL}from"url";const pnpLoaderFilename=join(process.cwd(),".pnp.loader.mjs"),pnpLoaderExists=existsSync(pnpLoaderFilename);let pnpLoader;async function getPnpLoader(){return pnpLoader||(pnpLoader=await import(pnpLoaderFilename),pnpLoader)}function convertToPosix(o){return"win32"===process.platform?o.replace(/\\/g,"/"):o}export function findMatchingFiles(o,t,e,a){const n=[];for(const e of readdirSync(o))e.match(t)&&n.push(convertToPosix(join(o,e)));if(e&&0===n.length)throw new Error(`File '${t}' is not found in '${o}'`);if(a&&n.length>1)throw new Error(`More than one file '${t}' were found in '${o}'`);return n}export function patchFile(o,t){const e=pathToFileURL(o);global.$_$_esm_patches=global.$_$_esm_patches||{},global.$_$_esm_patches[e]?global.$_$_esm_patches[e].push(t):global.$_$_esm_patches[e]=[t]}export async function resolve(o,t,e){if(!pnpLoaderExists)return await e(o,t,e);try{return await e(o,t,e)}catch(a){const n=(await getPnpLoader()).resolve;return await n(o,t,e)}}async function loadAndPatch(o,t,e,a){const n=await a(o,t,e);return global.$_$_esm_patches&&global.$_$_esm_patches[o]&&n.source&&(n.source=global.$_$_esm_patches[o].reduce(((o,t)=>t(o)),n.source.toString())),n}export async function load(o,t,e){if(!pnpLoaderExists)return await loadAndPatch(o,t,e,e);try{const a=await loadAndPatch(o,t,e,e);if("builtin"!==a.format&&!a.source){const a=(await getPnpLoader()).load;return await loadAndPatch(o,t,e,a)}return a}catch(a){try{const a=(await getPnpLoader()).load;return await loadAndPatch(o,t,e,a)}catch(o){throw a}}}