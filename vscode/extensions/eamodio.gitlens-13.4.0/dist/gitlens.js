(()=>{var e,t,i,s={8054:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const r=i(2361),n=s(i(1957)),o=s(i(6304)),a=n.default("agent-base");function l(){const{stack:e}=new Error;return"string"==typeof e&&e.split("\n").some((e=>-1!==e.indexOf("(https.js:")||-1!==e.indexOf("node:https:")))}function c(e,t){return new c.Agent(e,t)}!function(e){class Agent extends r.EventEmitter{constructor(e,t){super();let i=t;"function"==typeof e?this.callback=e:e&&(i=e),this.timeout=null,i&&"number"==typeof i.timeout&&(this.timeout=i.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={}}get defaultPort(){return"number"==typeof this.explicitDefaultPort?this.explicitDefaultPort:l()?443:80}set defaultPort(e){this.explicitDefaultPort=e}get protocol(){return"string"==typeof this.explicitProtocol?this.explicitProtocol:l()?"https:":"http:"}set protocol(e){this.explicitProtocol=e}callback(e,t,i){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(e,t){const i=Object.assign({},t);"boolean"!=typeof i.secureEndpoint&&(i.secureEndpoint=l()),null==i.host&&(i.host="localhost"),null==i.port&&(i.port=i.secureEndpoint?443:80),null==i.protocol&&(i.protocol=i.secureEndpoint?"https:":"http:"),i.host&&i.path&&delete i.path,delete i.agent,delete i.hostname,delete i._defaultAgent,delete i.defaultPort,delete i.createConnection,e._last=!0,e.shouldKeepAlive=!1;let s=!1,r=null;const n=i.timeout||this.timeout,c=t=>{e._hadError||(e.emit("error",t),e._hadError=!0)},h=()=>{r=null,s=!0;const e=new Error(`A "socket" was not created for HTTP request before ${n}ms`);e.code="ETIMEOUT",c(e)},u=e=>{s||(null!==r&&(clearTimeout(r),r=null),c(e))},d=t=>{if(s)return;if(null!=r&&(clearTimeout(r),r=null),n=t,Boolean(n)&&"function"==typeof n.addRequest)return a("Callback returned another Agent instance %o",t.constructor.name),void t.addRequest(e,i);var n;if(t)return t.once("free",(()=>{this.freeSocket(t,i)})),void e.onSocket(t);const o=new Error(`no Duplex stream was returned to agent-base for \`${e.method} ${e.path}\``);c(o)};if("function"==typeof this.callback){this.promisifiedCallback||(this.callback.length>=3?(a("Converting legacy callback function to promise"),this.promisifiedCallback=o.default(this.callback)):this.promisifiedCallback=this.callback),"number"==typeof n&&n>0&&(r=setTimeout(h,n)),"port"in i&&"number"!=typeof i.port&&(i.port=Number(i.port));try{a("Resolving socket for %o request: %o",i.protocol,`${e.method} ${e.path}`),Promise.resolve(this.promisifiedCallback(e,i)).then(d,u)}catch(e){Promise.reject(e).catch(u)}}else c(new Error("`callback` is not defined"))}freeSocket(e,t){a("Freeing socket %o %o",e.constructor.name,t),e.destroy()}destroy(){a("Destroying agent %o",this.constructor.name)}}e.Agent=Agent,e.prototype=e.Agent.prototype}(c||(c={})),e.exports=c},6304:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,i){return new Promise(((s,r)=>{e.call(this,t,i,((e,t)=>{e?r(e):s(t)}))}))}}},5640:(e,t,i)=>{i.d(t,{QO:()=>s,qb:()=>r});var s=(e=>(e[e.Force=0]="Force",e[e.ForceWithLease=1]="ForceWithLease",e))(s||{}),r=(e=>(e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.INTENT_TO_ADD=9]="INTENT_TO_ADD",e[e.ADDED_BY_US=10]="ADDED_BY_US",e[e.ADDED_BY_THEM=11]="ADDED_BY_THEM",e[e.DELETED_BY_US=12]="DELETED_BY_US",e[e.DELETED_BY_THEM=13]="DELETED_BY_THEM",e[e.BOTH_ADDED=14]="BOTH_ADDED",e[e.BOTH_DELETED=15]="BOTH_DELETED",e[e.BOTH_MODIFIED=16]="BOTH_MODIFIED",e))(r||{})},8294:(e,t,i)=>{i.d(t,{AR:()=>ActionRunners,vj:()=>d});var s=i(9496),r=i(5255),n=i(6631),o=i(9529),a=i(5148),l=i(4627),c=i(2509);const h=2**30,u=["createPullRequest","openPullRequest","hover.commands"];const d="Built In";class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}get label(){return this._label}get detail(){return this.runner.name}}class NoActionRunnersQuickPickItem{get label(){return"No actions were found"}get detail(){}}let p=0;class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=(p===h?p=1:p++,p)}dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}}class ActionRunners{constructor(e){this.container=e,this._onDidChange=new s.EventEmitter,this._actionRunners=new Map;const t=[a.D.onDidChange((e=>{a.D.changed(e,"partners")&&this._updateAllContextKeys()}))];for(const e of u)t.push((0,o.xR)(`${r.Gh.ActionPrefix}${e}`,((e,t)=>this.run(e,t))));this._disposable=s.Disposable.from(...t)}get onDidChange(){return this._onDidChange.event}dispose(){this._disposable.dispose();for(const e of this._actionRunners.values())for(const t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){return t=a.D.get("partners"),null==(i=this._actionRunners.get(e))||0===i.length?void 0:null==t?i:i.filter((e=>null==e.partnerId||null!=e.partnerId&&!1!==t[e.partnerId]?.enabled));var t,i}has(e){return this.count(e)>0}register(e,t,i=2){let s=this._actionRunners.get(e);null==s&&(s=[],this._actionRunners.set(e,s));const r=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},n=this._actionRunners,o=new RegisteredActionRunner(i,t,(function(){if(1===s.length)n.delete(e),r(e);else{const e=s.indexOf(this);-1!==e&&s.splice(e,1)}}));return s.push(o),r(e),{dispose:()=>o.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:d},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,r=this.get(e.type);if(null!=r&&0!==r.length&&(null!=t&&(r=r.filter((e=>e.id===t))),0!==r.length)){if(r.length>1||r.every((e=>0!==e.type))){const t=r.sort(((e,t)=>e.order-t.order||(0,l.dm)(e.name,t.name))).map((t=>new ActionRunnerQuickPickItem(t,e)));0===t.length&&t.push(new NoActionRunnersQuickPickItem);const n=s.window.createQuickPick();n.ignoreFocusOut=(0,c.hE)();const o=[];try{const s=await new Promise((i=>{let s,r;switch(o.push(n.onDidHide((()=>i(void 0))),n.onDidAccept((()=>{0!==n.activeItems.length&&i(n.activeItems[0])}))),e.type){case"createPullRequest":s="Create Pull Request",r="Choose how to create a pull request";break;case"openPullRequest":s="Open Pull Request",r="Choose how to open the pull request";break;case"hover.commands":s="Need Help or Want to Collaborate?",r="Choose what you would like to do"}n.title=s,n.placeholder=r,n.matchOnDetail=!0,n.items=t,n.show()}));if(null==s)return;i=s.runner}finally{n.dispose(),o.forEach((e=>{e.dispose()}))}}else[i]=r;await(i?.run(e))}}async _updateContextKeys(e){await(0,n.v)(`${r.zf.ActionPrefix}${e}`,this.count(e))}async _updateAllContextKeys(){for(const e of u)await this._updateContextKeys(e)}}},8388:(e,t,i)=>{i.d(t,{E3:()=>O,GV:()=>T,TU:()=>_,Wr:()=>E,cL:()=>v,oP:()=>D,x4:()=>S});var s=i(9496),r=i(3951),n=i(2540),o=i(5255),a=i(9996),l=i(6631),c=i(2075),h=i(5148),u=i(4486),d=i(3105),p=i(4627);const m=2**30;let g;const f=new Map,w=new s.EventEmitter;w.event((0,u.Ds)((()=>{const e=null!=g?[...(0,d.DZ)(g,(([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0))]:void 0;a.W.instance.storage.store("avatars",e)}),1e3));const v=w.event,y="00000000000000000000000000000000",b=new Map,C=6e4,A=864e5,P=[6048e5,C,3e5,6e5,36e5,A,6048e5];function D(e,t,i){return k(e,t,i)}function S(e,t){return k(e,void 0,{...t,cached:!0})}function k(e,t,i){F(g);const n=2*(i?.size??16);if(!e){const e=R(`${y}:${n}`,void 0,n,y,i?.defaultStyle);return e.uri??e.fallback}const c=(0,r.FB)(e.trim().toLowerCase()),h=`${c}:${n}`,u=R(h,e,n,c,i?.defaultStyle);if(null!=u.uri)return u.uri;if(!i?.cached&&null!=t&&(0,l.fw)(o.zf.HasConnectedRemotes)){let i=f.get(h);return null==i&&function(e){return Date.now()>=e.timestamp+P[Math.min(e.retries,P.length-1)]}(u)&&(i=async function(e,t,i,n,{size:o=16}={}){F(g);try{let t;if("string"!=typeof n){const e=await a.W.instance.git.getBestRemoteWithRichProvider(n.repoPath);t=await(e?.provider.getAccountForCommit(n.ref,{avatarSize:o}))}return null==t?.avatarUrl?(e.uri=void 0,e.timestamp=m,void(e.retries=0)):(e.uri=s.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,p.qq)(i,t.email)&&g.set(`${(0,r.FB)(t.email.trim().toLowerCase())}:${o}`,{...e}),w.fire({email:i}),e.uri)}catch{return e.uri=void 0,e.timestamp=Date.now(),void e.retries++}}(u,0,e,t,{size:n}).then((e=>e??u.uri??u.fallback)),f.set(h,i.finally((()=>f.delete(h))))),i??u.fallback}return i?.cached?u.uri:u.uri??u.fallback}function R(e,t,i,s,r){let n=g.get(e);return null==n?(n={uri:null!=t&&0!==t.length?x(t,i):void 0,fallback:$(s,i,r),timestamp:0,retries:0},g.set(e,n)):null==n.fallback&&(n.fallback=$(s,i,r)),n}function F(e){if(null==e){const e=a.W.instance.storage.get("avatars")?.map((([e,t])=>[e,{uri:s.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}]));g=new Map(e)}}function $(e,t,i){return s.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??function(){null==B&&(B=h.D.get("defaultGravatarsStyle",void 0,n.il.Robot));return B}()}`)}function T(e,t,i){return $((0,r.FB)(e.trim().toLowerCase()),t,i)}function x(e,t=16){const i=(0,c.at)(e);if(null!=i&&(0,p.qq)(i.authority,"github.com"))return s.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}const I=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function _(e){let t=b.get(e);if(null==t){const i=(0,p.US)(`<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">\n\t<circle cx="2" cy="14" r="2" fill="${I.get(e)}"/>\n</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),b.set(e,t)}return t}function O(e){switch(e){case"all":a.W.instance.storage.delete("avatars"),g?.clear(),f.clear();break;case"failed":for(const e of g?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(const e of g?.values()??[])e.fallback=void 0}}let B;function E(e){B=e,O("fallback")}},2540:(e,t,i)=>{i.d(t,{CZ:()=>A,DH:()=>D,Dn:()=>m,M7:()=>y,N4:()=>c,RV:()=>C,S4:()=>R,TA:()=>k,TF:()=>r,Uy:()=>h,VP:()=>g,Vc:()=>P,Vn:()=>p,Vz:()=>a,ef:()=>b,fH:()=>n,hp:()=>l,iP:()=>u,il:()=>w,kl:()=>S,o9:()=>v,oE:()=>F,y0:()=>o,zL:()=>f,zW:()=>d});var s=i(8227),r=(e=>(e.File="file",e.Window="window",e))(r||{}),n=(e=>(e.Issue="Issue",e.PullRequest="PullRequest",e))(n||{}),o=(e=>(e.Gutter="gutter",e.Line="line",e.Scrollbar="overview",e))(o||{}),a=(e=>(e.DateDesc="date:desc",e.DateAsc="date:asc",e.NameAsc="name:asc",e.NameDesc="name:desc",e))(a||{}),l=(e=>(e.Gutter="gutter",e.Line="line",e.Scrollbar="overview",e))(l||{}),c=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(c||{}),h=(e=>(e.Document="document",e.Containers="containers",e.Blocks="blocks",e))(h||{}),u=(e=>(e.CountDesc="count:desc",e.CountAsc="count:asc",e.DateDesc="date:desc",e.DateAsc="date:asc",e.NameAsc="name:asc",e.NameDesc="name:desc",e))(u||{}),d=(e=>(e.AzureDevOps="AzureDevOps",e.Bitbucket="Bitbucket",e.BitbucketServer="BitbucketServer",e.Custom="Custom",e.Gerrit="Gerrit",e.GoogleSource="GoogleSource",e.Gitea="Gitea",e.GitHub="GitHub",e.GitLab="GitLab",e))(d||{}),p=(e=>(e.Authored="authored",e.Committed="committed",e))(p||{}),m=(e=>(e.Absolute="absolute",e.Relative="relative",e))(m||{}),g=(e=>(e.Blame="blame",e.Changes="changes",e.Heatmap="heatmap",e))(g||{}),f=(e=>(e.Name="name",e.Usage="usage",e))(f||{}),w=(e=>(e.Faces="wavatar",e.Geometric="identicon",e.Monster="monsterid",e.MysteryPerson="mp",e.Retro="retro",e.Robot="robohash",e))(w||{}),v=(e=>(e.Gutter="gutter",e.Line="line",e.Scrollbar="overview",e))(v||{}),y=(e=>(e.Silent="silent",e.Errors="errors",e.Verbose="verbose",e.Debug="debug",e))(y||{}),b=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(b||{}),C=(e=>(e.DateDesc="date:desc",e.DateAsc="date:asc",e.NameAsc="name:asc",e.NameDesc="name:desc",e))(C||{}),A=(e=>(e.List="list",e.Tree="tree",e))(A||{}),P=(e=>(e.Auto="auto",e.List="list",e.Tree="tree",e))(P||{}),D=(e=>(e.Branch="branch",e.Working="working",e))(D||{}),S=(e=>(e.CommitHasNoPreviousCommitWarning="suppressCommitHasNoPreviousCommitWarning",e.CommitNotFoundWarning="suppressCommitNotFoundWarning",e.CreatePullRequestPrompt="suppressCreatePullRequestPrompt",e.SuppressDebugLoggingWarning="suppressDebugLoggingWarning",e.FileNotUnderSourceControlWarning="suppressFileNotUnderSourceControlWarning",e.GitDisabledWarning="suppressGitDisabledWarning",e.GitMissingWarning="suppressGitMissingWarning",e.GitVersionWarning="suppressGitVersionWarning",e.LineUncommittedWarning="suppressLineUncommittedWarning",e.NoRepositoryWarning="suppressNoRepositoryWarning",e.RebaseSwitchToTextWarning="suppressRebaseSwitchToTextWarning",e.IntegrationDisconnectedTooManyFailedRequestsWarning="suppressIntegrationDisconnectedTooManyFailedRequestsWarning",e.IntegrationRequestFailed500Warning="suppressIntegrationRequestFailed500Warning",e.IntegrationRequestTimedOutWarning="suppressIntegrationRequestTimedOutWarning",e))(S||{});const k=["defaultItemLimit","formats","pageItemLimit","showRelativeDateMarkers"],R=["commits","repositories","fileHistory","lineHistory","branches","remotes","stashes","tags","contributors","searchAndCompare","worktrees"];function F(e){switch(e){case"silent":return s.i.Off;case"errors":return s.i.Error;case"verbose":return s.i.Info;case"debug":return s.i.Debug;default:return e}}},5255:(e,t,i)=>{i.d(t,{AD:()=>r,Gh:()=>c,NE:()=>m,S8:()=>d,ZY:()=>o,d$:()=>n,eq:()=>p,mN:()=>a,nA:()=>u,sN:()=>g,wL:()=>l,zf:()=>h,zh:()=>s});const s="gitlens",r="gitlens",n=80,o={".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"};var a=(e=>(e[e.Hash=35]="Hash",e[e.Slash=47]="Slash",e[e.Digit0=48]="Digit0",e[e.Digit1=49]="Digit1",e[e.Digit2=50]="Digit2",e[e.Digit3=51]="Digit3",e[e.Digit4=52]="Digit4",e[e.Digit5=53]="Digit5",e[e.Digit6=54]="Digit6",e[e.Digit7=55]="Digit7",e[e.Digit8=56]="Digit8",e[e.Digit9=57]="Digit9",e[e.Backslash=92]="Backslash",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.Z=90]="Z",e[e.a=97]="a",e[e.b=98]="b",e[e.c=99]="c",e[e.d=100]="d",e[e.e=101]="e",e[e.f=102]="f",e[e.z=122]="z",e))(a||{}),l=(e=>(e.GutterBackgroundColor="gitlens.gutterBackgroundColor",e.GutterForegroundColor="gitlens.gutterForegroundColor",e.GutterUncommittedForegroundColor="gitlens.gutterUncommittedForegroundColor",e.TrailingLineBackgroundColor="gitlens.trailingLineBackgroundColor",e.TrailingLineForegroundColor="gitlens.trailingLineForegroundColor",e.LineHighlightBackgroundColor="gitlens.lineHighlightBackgroundColor",e.LineHighlightOverviewRulerColor="gitlens.lineHighlightOverviewRulerColor",e.ClosedAutolinkedIssueIconColor="gitlens.closedAutolinkedIssueIconColor",e.ClosedPullRequestIconColor="gitlens.closedPullRequestIconColor",e.OpenAutolinkedIssueIconColor="gitlens.openAutolinkedIssueIconColor",e.OpenPullRequestIconColor="gitlens.openPullRequestIconColor",e.MergedPullRequestIconColor="gitlens.mergedPullRequestIconColor",e.UnpublishedChangesIconColor="gitlens.unpublishedChangesIconColor",e.UnpublishedCommitIconColor="gitlens.unpublishedCommitIconColor",e.UnpulledChangesIconColor="gitlens.unpulledChangesIconColor",e))(l||{}),c=(e=>(e.ActionPrefix="gitlens.action.",e.AddAuthors="gitlens.addAuthors",e.BrowseRepoAtRevision="gitlens.browseRepoAtRevision",e.BrowseRepoAtRevisionInNewWindow="gitlens.browseRepoAtRevisionInNewWindow",e.BrowseRepoBeforeRevision="gitlens.browseRepoBeforeRevision",e.BrowseRepoBeforeRevisionInNewWindow="gitlens.browseRepoBeforeRevisionInNewWindow",e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CloseWelcomeView="gitlens.closeWelcomeView",e.CompareWith="gitlens.compareWith",e.CompareHeadWith="gitlens.compareHeadWith",e.CompareWorkingWith="gitlens.compareWorkingWith",e.ComputingFileAnnotations="gitlens.computingFileAnnotations",e.ConnectRemoteProvider="gitlens.connectRemoteProvider",e.CopyAutolinkUrl="gitlens.copyAutolinkUrl",e.CopyCurrentBranch="gitlens.copyCurrentBranch",e.CopyDeepLinkToBranch="gitlens.copyDeepLinkToBranch",e.CopyDeepLinkToCommit="gitlens.copyDeepLinkToCommit",e.CopyDeepLinkToRepo="gitlens.copyDeepLinkToRepo",e.CopyDeepLinkToTag="gitlens.copyDeepLinkToTag",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyRemoteBranchesUrl="gitlens.copyRemoteBranchesUrl",e.CopyRemoteBranchUrl="gitlens.copyRemoteBranchUrl",e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteComparisonUrl="gitlens.copyRemoteComparisonUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrlToClipboard",e.CopyRemoteFileUrlWithoutRange="gitlens.copyRemoteFileUrlWithoutRange",e.CopyRemoteFileUrlFrom="gitlens.copyRemoteFileUrlFrom",e.CopyRemoteIssueUrl="gitlens.copyRemoteIssueUrl",e.CopyRemotePullRequestUrl="gitlens.copyRemotePullRequestUrl",e.CopyRemoteRepositoryUrl="gitlens.copyRemoteRepositoryUrl",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.CopyRelativePathToClipboard="gitlens.copyRelativePathToClipboard",e.CreatePullRequestOnRemote="gitlens.createPullRequestOnRemote",e.DiffDirectory="gitlens.diffDirectory",e.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",e.DiffWith="gitlens.diffWith",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithNextInDiffLeft="gitlens.diffWithNextInDiffLeft",e.DiffWithNextInDiffRight="gitlens.diffWithNextInDiffRight",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithPreviousInDiffLeft="gitlens.diffWithPreviousInDiffLeft",e.DiffWithPreviousInDiffRight="gitlens.diffWithPreviousInDiffRight",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithRevisionFrom="gitlens.diffWithRevisionFrom",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffWithWorkingInDiffLeft="gitlens.diffWithWorkingInDiffLeft",e.DiffWithWorkingInDiffRight="gitlens.diffWithWorkingInDiffRight",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.DisconnectRemoteProvider="gitlens.disconnectRemoteProvider",e.DisableDebugLogging="gitlens.disableDebugLogging",e.EnableDebugLogging="gitlens.enableDebugLogging",e.DisableRebaseEditor="gitlens.disableRebaseEditor",e.EnableRebaseEditor="gitlens.enableRebaseEditor",e.ExternalDiff="gitlens.externalDiff",e.ExternalDiffAll="gitlens.externalDiffAll",e.FetchRepositories="gitlens.fetchRepositories",e.GenerateCommitMessage="gitlens.generateCommitMessage",e.GetStarted="gitlens.getStarted",e.InviteToLiveShare="gitlens.inviteToLiveShare",e.OpenAutolinkUrl="gitlens.openAutolinkUrl",e.OpenBlamePriorToChange="gitlens.openBlamePriorToChange",e.OpenBranchesOnRemote="gitlens.openBranchesOnRemote",e.OpenBranchOnRemote="gitlens.openBranchOnRemote",e.OpenCurrentBranchOnRemote="gitlens.openCurrentBranchOnRemote",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenComparisonOnRemote="gitlens.openComparisonOnRemote",e.OpenFileHistory="gitlens.openFileHistory",e.OpenFileFromRemote="gitlens.openFileFromRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.OpenFileOnRemoteFrom="gitlens.openFileOnRemoteFrom",e.OpenFileAtRevision="gitlens.openFileRevision",e.OpenFileAtRevisionFrom="gitlens.openFileRevisionFrom",e.OpenFolderHistory="gitlens.openFolderHistory",e.OpenOnRemote="gitlens.openOnRemote",e.OpenIssueOnRemote="gitlens.openIssueOnRemote",e.OpenPullRequestOnRemote="gitlens.openPullRequestOnRemote",e.OpenAssociatedPullRequestOnRemote="gitlens.openAssociatedPullRequestOnRemote",e.OpenRepoOnRemote="gitlens.openRepoOnRemote",e.OpenRevisionFile="gitlens.openRevisionFile",e.OpenRevisionFileInDiffLeft="gitlens.openRevisionFileInDiffLeft",e.OpenRevisionFileInDiffRight="gitlens.openRevisionFileInDiffRight",e.OpenWalkthrough="gitlens.openWalkthrough",e.OpenWorkingFile="gitlens.openWorkingFile",e.OpenWorkingFileInDiffLeft="gitlens.openWorkingFileInDiffLeft",e.OpenWorkingFileInDiffRight="gitlens.openWorkingFileInDiffRight",e.PullRepositories="gitlens.pullRepositories",e.PushRepositories="gitlens.pushRepositories",e.GitCommands="gitlens.gitCommands",e.GitCommandsBranch="gitlens.gitCommands.branch",e.GitCommandsCherryPick="gitlens.gitCommands.cherryPick",e.GitCommandsMerge="gitlens.gitCommands.merge",e.GitCommandsRebase="gitlens.gitCommands.rebase",e.GitCommandsReset="gitlens.gitCommands.reset",e.GitCommandsRevert="gitlens.gitCommands.revert",e.GitCommandsSwitch="gitlens.gitCommands.switch",e.GitCommandsTag="gitlens.gitCommands.tag",e.GitCommandsWorktree="gitlens.gitCommands.worktree",e.GitCommandsWorktreeOpen="gitlens.gitCommands.worktree.open",e.OpenOrCreateWorktreeForGHPR="gitlens.ghpr.views.openOrCreateWorktree",e.PlusHide="gitlens.plus.hide",e.PlusLearn="gitlens.plus.learn",e.PlusLoginOrSignUp="gitlens.plus.loginOrSignUp",e.PlusLogout="gitlens.plus.logout",e.PlusManage="gitlens.plus.manage",e.PlusPurchase="gitlens.plus.purchase",e.PlusResendVerification="gitlens.plus.resendVerification",e.PlusRestore="gitlens.plus.restore",e.PlusShowPlans="gitlens.plus.showPlans",e.PlusStartPreviewTrial="gitlens.plus.startPreviewTrial",e.PlusValidate="gitlens.plus.validate",e.QuickOpenFileHistory="gitlens.quickOpenFileHistory",e.RefreshGraph="gitlens.graph.refresh",e.RefreshFocus="gitlens.focus.refresh",e.RefreshHover="gitlens.refreshHover",e.RefreshTimelinePage="gitlens.refreshTimelinePage",e.ResetAvatarCache="gitlens.resetAvatarCache",e.ResetOpenAIKey="gitlens.resetOpenAIKey",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ResetTrackedUsage="gitlens.resetTrackedUsage",e.RevealCommitInView="gitlens.revealCommitInView",e.SearchCommits="gitlens.showCommitSearch",e.SearchCommitsInView="gitlens.views.searchAndCompare.searchCommits",e.SetViewsLayout="gitlens.setViewsLayout",e.ShowBranchesView="gitlens.showBranchesView",e.ShowCommitInView="gitlens.showCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowCommitsView="gitlens.showCommitsView",e.ShowContributorsView="gitlens.showContributorsView",e.ShowHomeView="gitlens.showHomeView",e.ShowFileHistoryView="gitlens.showFileHistoryView",e.ShowInCommitGraph="gitlens.showInCommitGraph",e.ShowInDetailsView="gitlens.showInDetailsView",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineHistoryView="gitlens.showLineHistoryView",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCommit="gitlens.showQuickCommitDetails",e.ShowQuickCommitFile="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickCommitRevision="gitlens.showQuickRevisionDetails",e.ShowQuickCommitRevisionInDiffLeft="gitlens.showQuickRevisionDetailsInDiffLeft",e.ShowQuickCommitRevisionInDiffRight="gitlens.showQuickRevisionDetailsInDiffRight",e.ShowQuickStashList="gitlens.showQuickStashList",e.ShowRemotesView="gitlens.showRemotesView",e.ShowRepositoriesView="gitlens.showRepositoriesView",e.ShowSearchAndCompareView="gitlens.showSearchAndCompareView",e.ShowSettingsPage="gitlens.showSettingsPage",e.ShowSettingsPageAndJumpToBranchesView="gitlens.showSettingsPage#branches-view",e.ShowSettingsPageAndJumpToCommitsView="gitlens.showSettingsPage#commits-view",e.ShowSettingsPageAndJumpToContributorsView="gitlens.showSettingsPage#contributors-view",e.ShowSettingsPageAndJumpToFileHistoryView="gitlens.showSettingsPage#file-history-view",e.ShowSettingsPageAndJumpToLineHistoryView="gitlens.showSettingsPage#line-history-view",e.ShowSettingsPageAndJumpToRemotesView="gitlens.showSettingsPage#remotes-view",e.ShowSettingsPageAndJumpToRepositoriesView="gitlens.showSettingsPage#repositories-view",e.ShowSettingsPageAndJumpToSearchAndCompareView="gitlens.showSettingsPage#search-compare-view",e.ShowSettingsPageAndJumpToStashesView="gitlens.showSettingsPage#stashes-view",e.ShowSettingsPageAndJumpToTagsView="gitlens.showSettingsPage#tags-view",e.ShowSettingsPageAndJumpToWorkTreesView="gitlens.showSettingsPage#worktrees-view",e.ShowSettingsPageAndJumpToViews="gitlens.showSettingsPage#views",e.ShowSettingsPageAndJumpToCommitGraph="gitlens.showSettingsPage#commit-graph",e.ShowSettingsPageAndJumpToAutolinks="gitlens.showSettingsPage#autolinks",e.ShowStashesView="gitlens.showStashesView",e.ShowTagsView="gitlens.showTagsView",e.ShowWorktreesView="gitlens.showWorktreesView",e.ShowCommitDetailsView="gitlens.showCommitDetailsView",e.ShowTimelinePage="gitlens.showTimelinePage",e.ShowTimelineView="gitlens.showTimelineView",e.ShowGraphPage="gitlens.showGraphPage",e.ShowWelcomePage="gitlens.showWelcomePage",e.ShowFocusPage="gitlens.showFocusPage",e.StashApply="gitlens.stashApply",e.StashSave="gitlens.stashSave",e.StashSaveFiles="gitlens.stashSaveFiles",e.SwitchMode="gitlens.switchMode",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileBlameInDiffLeft="gitlens.toggleFileBlameInDiffLeft",e.ToggleFileBlameInDiffRight="gitlens.toggleFileBlameInDiffRight",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileHeatmapInDiffLeft="gitlens.toggleFileHeatmapInDiffLeft",e.ToggleFileHeatmapInDiffRight="gitlens.toggleFileHeatmapInDiffRight",e.ToggleLineBlame="gitlens.toggleLineBlame",e.ToggleReviewMode="gitlens.toggleReviewMode",e.ToggleZenMode="gitlens.toggleZenMode",e.ViewsCopy="gitlens.views.copy",e.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",e.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking",e.Deprecated_DiffHeadWith="gitlens.diffHeadWith",e.Deprecated_DiffWorkingWith="gitlens.diffWorkingWith",e.Deprecated_OpenBranchesInRemote="gitlens.openBranchesInRemote",e.Deprecated_OpenBranchInRemote="gitlens.openBranchInRemote",e.Deprecated_OpenCommitInRemote="gitlens.openCommitInRemote",e.Deprecated_OpenFileInRemote="gitlens.openFileInRemote",e.Deprecated_OpenInRemote="gitlens.openInRemote",e.Deprecated_OpenRepoInRemote="gitlens.openRepoInRemote",e.Deprecated_ShowFileHistoryInView="gitlens.showFileHistoryInView",e))(c||{}),h=(e=>(e.ActionPrefix="gitlens:action:",e.KeyPrefix="gitlens:key:",e.WebviewPrefix="gitlens:webview:",e.WebviewViewPrefix="gitlens:webviewView:",e.ActiveFileStatus="gitlens:activeFileStatus",e.AnnotationStatus="gitlens:annotationStatus",e.Debugging="gitlens:debugging",e.DisabledToggleCodeLens="gitlens:disabledToggleCodeLens",e.Disabled="gitlens:disabled",e.Enabled="gitlens:enabled",e.FocusFocused="gitlens:focus:focused",e.HasConnectedRemotes="gitlens:hasConnectedRemotes",e.HasRemotes="gitlens:hasRemotes",e.HasRichRemotes="gitlens:hasRichRemotes",e.HasVirtualFolders="gitlens:hasVirtualFolders",e.PreRelease="gitlens:prerelease",e.Readonly="gitlens:readonly",e.Untrusted="gitlens:untrusted",e.ViewsCanCompare="gitlens:views:canCompare",e.ViewsCanCompareFile="gitlens:views:canCompare:file",e.ViewsCommitsMyCommitsOnly="gitlens:views:commits:myCommitsOnly",e.ViewsFileHistoryCanPin="gitlens:views:fileHistory:canPin",e.ViewsFileHistoryCursorFollowing="gitlens:views:fileHistory:cursorFollowing",e.ViewsFileHistoryEditorFollowing="gitlens:views:fileHistory:editorFollowing",e.ViewsLineHistoryEditorFollowing="gitlens:views:lineHistory:editorFollowing",e.ViewsRepositoriesAutoRefresh="gitlens:views:repositories:autoRefresh",e.ViewsSearchAndCompareKeepResults="gitlens:views:searchAndCompare:keepResults",e.Vsls="gitlens:vsls",e.Plus="gitlens:plus",e.PlusDisallowedRepos="gitlens:plus:disallowedRepos",e.PlusEnabled="gitlens:plus:enabled",e.PlusRequired="gitlens:plus:required",e.PlusState="gitlens:plus:state",e))(h||{}),u=(e=>(e.CloseActiveEditor="workbench.action.closeActiveEditor",e.CloseAllEditors="workbench.action.closeAllEditors",e.CursorMove="cursorMove",e.CustomEditorShowFindWidget="editor.action.webvieweditor.showFind",e.Diff="vscode.diff",e.EditorScroll="editorScroll",e.EditorShowHover="editor.action.showHover",e.ExecuteDocumentSymbolProvider="vscode.executeDocumentSymbolProvider",e.ExecuteCodeLensProvider="vscode.executeCodeLensProvider",e.FocusFilesExplorer="workbench.files.action.focusFilesExplorer",e.InstallExtension="workbench.extensions.installExtension",e.MoveViews="vscode.moveViews",e.Open="vscode.open",e.OpenFolder="vscode.openFolder",e.OpenInTerminal="openInTerminal",e.OpenWalkthrough="workbench.action.openWalkthrough",e.OpenWith="vscode.openWith",e.NextEditor="workbench.action.nextEditor",e.PreviewHtml="vscode.previewHtml",e.RevealLine="revealLine",e.RevealInExplorer="revealInExplorer",e.RevealInFileExplorer="revealFileInOS",e.SetContext="setContext",e.ShowExplorer="workbench.view.explorer",e.ShowReferences="editor.action.showReferences",e.ShowSCM="workbench.view.scm",e.UninstallExtension="workbench.extensions.uninstallExtension",e))(u||{}),d=(e=>(e.Publish="git.publish",e.Pull="git.pull",e.PullRebase="git.pullRebase",e.Push="git.push",e.PushForce="git.pushForce",e.UndoCommit="git.undoCommit",e.Fetch="git.fetch",e))(d||{}),p=(e=>(e.AutoRepositoryDetection="git.autoRepositoryDetection",e.RepositoryScanMaxDepth="git.repositoryScanMaxDepth",e.FetchOnPull="git.fetchOnPull",e.UseForcePushWithLease="git.useForcePushWithLease",e))(p||{}),m=(e=>(e.AngleBracketLeftHeavy="❰",e.AngleBracketRightHeavy="❱",e.ArrowBack="↩",e.ArrowDown="↓",e.ArrowDownUp="⇵",e.ArrowDropRight="⤷",e.ArrowHeadRight="➤",e.ArrowLeft="←",e.ArrowLeftDouble="⇐",e.ArrowLeftRight="↔",e.ArrowLeftRightDouble="⇔",e.ArrowLeftRightDoubleStrike="⇎",e.ArrowLeftRightLong="⟷",e.ArrowRight="→",e.ArrowRightDouble="⇒",e.ArrowRightHollow="⇨",e.ArrowUp="↑",e.ArrowUpDown="⇅",e.ArrowUpRight="↗",e.ArrowsHalfLeftRight="⇋",e.ArrowsHalfRightLeft="⇌",e.ArrowsLeftRight="⇆",e.ArrowsRightLeft="⇄",e.Asterisk="∗",e.Check="✔",e.Dash="—",e.Dot="•",e.Ellipsis="…",e.EnDash="–",e.Envelope="✉",e.EqualsTriple="≡",e.Flag="⚑",e.FlagHollow="⚐",e.MiddleEllipsis="⋯",e.MuchLessThan="≪",e.MuchGreaterThan="≫",e.Pencil="✎",e.Space=" ",e.SpaceThin=" ",e.SpaceThinnest=" ",e.SquareWithBottomShadow="❏",e.SquareWithTopShadow="❐",e.Warning="⚠",e.ZeroWidthSpace="​",e))(m||{}),g=(e=>(e.DebugConsole="debug",e.File="file",e.Git="git",e.GitHub="github",e.GitLens="gitlens",e.Output="output",e.PRs="pr",e.Vsls="vsls",e.VslsScc="vsls-scc",e.Virtual="vscode-vfs",e))(g||{})},9996:(e,t,i)=>{i.d(t,{W:()=>gv,N:()=>fv});var s=i(9496),r=i(5148);const n=require("child_process"),o=require("fs");var a=i(7282),l=i(4372),c=i(5255),h=(e=>(e[e.Throw=0]="Throw",e[e.Ignore=1]="Ignore",e))(h||{}),u=i(4321),d=i(4241),p=i(5367),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor;const f=/^<h>(.+)<n>(.+)<u>(.*)<t>(?:\[(?:ahead ([0-9]+))?[,\s]*(?:behind ([0-9]+))?]|\[(gone)])?<r>(.*)<d>(.*)$/gm,w="%3c",v="%3e";class GitBranchParser{static parse(e,t){const i=[];if(!e)return i;let s,r,n,o,a,l,c,h,u,d;for(;;){if(d=f.exec(e),null==d)break;if([,s,r,n,o,a,l,c,h]=d,r.startsWith("refs/remotes/")){if(r=r.substr(13),r.endsWith("/HEAD"))continue;u=!0}else r=r.substr(11),u=!1;i.push(new p.XI(t,r,u,42===s.charCodeAt(0),h?new Date(h):void 0,null==c||0===c.length?void 0:` ${c}`.substr(1),null==n||0===n.length?void 0:{name:` ${n}`.substr(1),missing:Boolean(l)},Number(o)||0,Number(a)||0))}return i}}GitBranchParser.defaultFormat=[`${w}h${v}%(HEAD)`,`${w}n${v}%(refname)`,`${w}u${v}%(upstream:short)`,`${w}t${v}%(upstream:track)`,`${w}r${v}%(objectname)`,`${w}d${v}%(committerdate:iso8601)`].join(""),((e,t,i,s)=>{for(var r,n=s>1?void 0:s?g(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&m(t,i,n)})([(0,d.fF)({args:!1,singleLine:!0})],GitBranchParser,"parse",1);var y=i(2800),b=i(3700),C=i(4627),A=i(6450),P=i(439),D=i(7881),S=i(3961),k=Object.defineProperty,R=Object.getOwnPropertyDescriptor,F=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?R(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&k(t,i,n),n};const $=/diff --git a\/(.*) b\/(.*)/,T=/^@@ -(\d+?),(\d+?) \+(\d+?),(\d+?) @@/,x=/(\S)\S*\t([^\t\n]+)(?:\t(.+))?/,I=/^(\d+?|-)\s+?(\d+?|-)\s+?(.*)(?:\n\s(delete|rename|copy|create))?/,_=/(.+)\s=>\s(.+)/,O=/(.*?){(.+?)\s=>\s(.*?)}(.*)/,B=/^<r> (.*)\s*(?:(?:diff --git a\/(.*) b\/(.*))|(?:(\S)\S*\t([^\t\n]+)(?:\t(.+))?))/gm,E=/^<r> (\S+)\s*(.*)$/s,M=/^(\S)\S*\t([^\t\n]+)(?:\t(.+)?)?$/gm,W=/(?<files>\d+) files? changed(?:, (?<additions>\d+) insertions?\(\+\))?(?:, (?<deletions>\d+) deletions?\(-\))?/,L="%x3c",U="%x3e",N="%x2f",G="%x20";var H=(e=>(e[e.Log=0]="Log",e[e.LogFile=1]="LogFile",e))(H||{});let V,Q,q,Y,j,z;function K(e,t){let i=t?.prefix??"";const s=[];for(const r in e)s.push(r),i+=`${t?.fieldPrefix??""}${e[r]}${t?.fieldSuffix??(null==t?.fieldPrefix?"%x00":"")}`;const r=["-z",`--format=${i}`];return null!=t?.additionalArgs&&t.additionalArgs.length>0&&r.push(...t.additionalArgs),{arguments:r,parse:function*(e){let i,r={},n=0;const o=(0,C.UM)(e,t?.separator??"\0");if(t?.skip)for(let e=0;e<t.skip;e++)i=o.next();for(;i=o.next(),!i.done;)r[s[n++]]=i.value,n===s.length&&(n=0,i=o.next(),t?.parseEntry?.(o,r),yield r,r={})}}}function J(e){return{arguments:["-z",`--format=${e}`],parse:function*(e){let t;const i=(0,C.UM)(e,"\0");for(;t=i.next(),!t.done;)yield t.value}}}function Z(e){return K(e,{additionalArgs:["--shortstat"],parseEntry:function(e,t){const i=e.next().value,s=W.exec(i);return null!=s?.groups&&(t.stats={files:Number(s.groups.files||0),additions:Number(s.groups.additions||0),deletions:Number(s.groups.deletions||0)}),e.next(),t},prefix:"%x00%x00",separator:"\0",fieldSuffix:"%x00",skip:2})}const X=class{static parse(e,t,i,s,r,n,o,a,l,c,h){if(!t)return;let u,d,p,m={},g=0,f=!0;const w=(0,C.UM)(`${t}</f>`);let v=w.next();if(v.done)return;void 0!==s&&(s=(0,b.AH)(s));const A=new Map;let S,k,R,F=a;e:for(;!(v=w.next(),v.done||(d=v.value,l&&a&&g>=a));)switch(p=d.charCodeAt(1),p){case 114:m={sha:d.substring(4)};break;case 97:P.CL===m.sha?m.author="You":m.author=d.substring(4);break;case 101:m.authorEmail=d.substring(4);break;case 100:m.authorDate=d.substring(4);break;case 110:m.committer=d.substring(4);break;case 109:case 99:m.committedDate=d.substring(4);break;case 112:d=d.substring(4),m.parentShas=0!==d.length?d.split(" "):void 0;break;case 116:d=d.substring(4),m.tips=0!==d.length?d.split(", "):void 0;break;case 115:for(;v=w.next(),!v.done&&(d=v.value,"</s>"!==d);)void 0===m.summary?m.summary=d:m.summary+=`\n${d}`;null!=m.summary&&10===m.summary.charCodeAt(m.summary.length-1)&&(m.summary=m.summary.slice(0,-1));break;case 102:{v=w.next();let t=!0;if(v.done||"</f>"===v.value){if((m.parentShas?.length??0)>1){F&&F--;break}t=!1}for(;t&&(v=w.next(),!v.done)&&(d=v.value,"</f>"!==d);)if(!d.startsWith("warning:"))if(0===i)S=x.exec(d),null!=S&&(void 0===m.files&&(m.files=[]),k=S[3],void 0!==k?m.files.push({status:S[1],path:k,originalPath:S[2]}):m.files.push({status:S[1],path:S[2]}));else{if(S=$.exec(d),null!=S){for([,m.originalPath,m.path]=S,m.path===m.originalPath?(m.originalPath=void 0,m.status=D.NV.Modified):m.status=D.NV.Renamed,w.next(),w.next(),v=w.next(),S=T.exec(v.value),null!==S&&(m.line={sha:m.sha,originalLine:parseInt(S[1],10),line:parseInt(S[3],10)});v=w.next(),!v.done&&"</f>"!==v.value;);break}if(v=w.next(),S=I.exec(`${d}\n${v.value}`),null!=S)switch(m.fileStats={additions:Number(S[1])||0,deletions:Number(S[2])||0,changes:0},S[4]){case void 0:m.status="M",m.path=S[3];break;case"copy":case"rename":m.status="copy"===S[4]?"C":"R",k=S[3],R=O.exec(k),null!=R?(m.path=""===R[3]?`${R[1]}${R[4]}`.replace("//","/"):`${R[1]}${R[3]}${R[4]}`,m.originalPath=`${R[1]}${R[2]}${R[4]}`):(R=_.exec(k),null!=R?(m.path=R[2],m.originalPath=R[1]):m.path=k);break;case"create":m.status="A",m.path=S[3];break;case"delete":m.status="D",m.path=S[3];break;default:m.status="M",m.path=S[3]}if(v.done||"</f>"===v.value)break}void 0!==m.files&&(m.path=(0,y.DZ)(m.files,(e=>e.path?e.path:void 0)).join(", ")),f&&void 0===s&&1===i&&void 0!==r?(s=(0,b.AH)(r.replace(r.startsWith("/")?`/${m.path}`:m.path,"")),u=(0,b.AH)((0,b.Gf)(s,r))):u=m.path??(null!=s&&null!=r?(0,b.AH)((0,b.Gf)(s,r)):void 0),f=!1;const n=A.get(m.sha);if(void 0===n){if(g++,a&&g>a)break e}else F&&F--;X.parseEntry(e,m,n,i,s,u,A,o);break}}return{repoPath:s,commits:A,sha:n,count:g,limit:a,range:c,hasMore:h??Boolean(F&&g>F&&1!==F)}}static parseEntry(e,t,i,s,r,n,o,a){if(null==i){null!=t.author&&(0,S.o)(a,t.author,t.authorEmail)&&(t.author="You"),null!=t.committer&&(0,S.o)(a,t.committer,t.committerEmail)&&(t.committer="You");const l=t.originalPath??(n!==t.path?t.path:void 0),c={files:t.files?.map((e=>new D.K8(r,e.path,e.status,e.originalPath)))};1===s&&null!=n&&(c.file=new D.K8(r,n,t.status,l,void 0,t.fileStats)),i=new A.aM(e,r,t.sha,new A._j(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new A._j(t.committer,t.committerEmail,new Date(1e3*t.committedDate)),t.summary?.split("\n",1)[0]??"",t.parentShas??[],t.summary??"",c,void 0,null!=t.line?[t.line]:[],t.tips),o.set(t.sha,i)}}static parseSimple(e,t,i){let s,r,n,o,a,l,c;do{if(c=B.exec(e),null==c)break;c[1]!==i&&(t-- >0||([,s,r,n,o,a,l]=c,a=` ${n||r||l||a}`.substr(1),o=null==o||0===o.length?void 0:` ${o}`.substr(1)))}while(t>=0);return B.lastIndex=0,[null==s||0===s.length?void 0:` ${s}`.substr(1),a,o]}static parseSimpleRenamed(e,t){let i=E.exec(e);if(null==i)return[void 0,void 0,void 0];const[,s,r]=i;let n,o,a;for(;;){if(i=M.exec(r),null==i)break;if([,n,o,a]=i,t===o){o=` ${a||o}`.substr(1),n=null==n||0===n.length?void 0:` ${n}`.substr(1);break}n=void 0,o=void 0,a=void 0}return M.lastIndex=0,[null==s||0===s.length||null==o?void 0:` ${s}`.substr(1),o,n]}};let ee=X;ee.allFormat=[`${L}${N}f${U}`,`${L}r${U}${G}%H`,`${L}a${U}${G}%aN`,`${L}e${U}${G}%aE`,`${L}d${U}${G}%at`,`${L}n${U}${G}%cN`,`${L}m${U}${G}%cE`,`${L}c${U}${G}%ct`,`${L}p${U}${G}%P`,`${L}t${U}${G}%D`,`${L}s${U}`,"%B",`${L}${N}s${U}`,`${L}f${U}`].join("%n"),ee.defaultFormat=[`${L}${N}f${U}`,`${L}r${U}${G}%H`,`${L}a${U}${G}%aN`,`${L}e${U}${G}%aE`,`${L}d${U}${G}%at`,`${L}n${U}${G}%cN`,`${L}m${U}${G}%cE`,`${L}c${U}${G}%ct`,`${L}p${U}${G}%P`,`${L}s${U}`,"%B",`${L}${N}s${U}`,`${L}f${U}`].join("%n"),ee.simpleRefs=`${L}r${U}${G}%H`,ee.simpleFormat=`${L}r${U}${G}%H`,ee.shortlog="%H%x00%aN%x00%aE%x00%at",F([(0,d.fF)({args:!1})],ee,"parse",1),F([(0,d.fF)({args:!1})],ee,"parseSimple",1),F([(0,d.fF)({args:!1})],ee,"parseSimpleRenamed",1);var te=i(2540),ie=i(7512),se=i(4488),re=Object.defineProperty,ne=Object.getOwnPropertyDescriptor,oe=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?ne(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&re(t,i,n),n};class GitReflogRecord{constructor(e,t,i,s,r,n,o){this.repoPath=e,this.sha=t,this._selector=i,this.date=s,this.command=r,this.commandArgs=n,this.details=o}formatDate(e){return(0,ie.p6)(this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,ie.Zh)(this.date)}get formattedDate(){return gv.instance.CommitDateFormatting.dateStyle===te.Dn.Absolute?this.formatDate(gv.instance.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get HEAD(){return null==this._selector||0===this._selector.length?"":this._selector.startsWith("refs/heads")?this._selector.substr(11):this._selector.startsWith("refs/remotes")?this._selector.substr(13):this._selector}get previousSha(){return this._previousSha}get previousShortSha(){return(0,u.zL)(this._previousSha)}get selector(){return this._selector}get shortSha(){return(0,u.zL)(this.sha)}update(e,t){void 0!==e&&(this._previousSha=e),void 0!==t&&(this._selector=t)}}oe([(0,se.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitReflogRecord.prototype,"formatDate",1),oe([(0,se.H)()],GitReflogRecord.prototype,"HEAD",1),oe([(0,se.H)()],GitReflogRecord.prototype,"previousShortSha",1),oe([(0,se.H)()],GitReflogRecord.prototype,"shortSha",1);var ae=Object.defineProperty,le=Object.getOwnPropertyDescriptor;const ce=/^<r>(.+)<d>(.+?)@{(.+)}<s>(\w*)(.*?)(?::(.*))?$/gm,he=/.*?\/?HEAD$/,ue="%x3c",de="%x3e";class GitReflogParser{static parse(e,t,i,s,r){if(!e)return;const n=[];let o,a,l,c,h,u,d,p,m,g,f,w,v=0,y=0;for(;;){if(w=ce.exec(e),null==w)break;if([,o,a,l,c,h,u]=w,y++,void 0!==f){if(o===f.sha&&(l!==g||!he.test(f.selector)||he.test(a)))continue;if(o!==f.sha&&(null!=d&&p===g&&m==f.sha&&he.test(f.selector)?f.update(o,d):f.update(o),n.push(f),f=void 0,g=void 0,v++,0!==s&&v>=s))break}"HEAD"!==c?i.includes(c)&&(f=new GitReflogRecord(t,` ${o}`.substr(1),` ${a}`.substr(1),new Date(l),` ${c}`.substr(1),null==h||0===h.length?void 0:h.substr(1),null==u||0===u.length?void 0:u.substr(1)),g=l):(d=a,p=l,m=o)}return ce.lastIndex=0,{repoPath:t,records:n,count:v,total:y,limit:s,hasMore:0!==s&&v>=s||0!==r&&y>=r}}}GitReflogParser.defaultFormat=[`${ue}r${de}%H`,`${ue}d${de}%gD`,`${ue}s${de}%gs`].join(""),((e,t,i,s)=>{for(var r,n=s>1?void 0:s?le(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&ae(t,i,n)})([(0,d.fF)({args:!1})],GitReflogParser,"parse",1);var pe=i(9502),me=Object.defineProperty,ge=Object.getOwnPropertyDescriptor;const fe=/^<n>(.+)<\*r>(.*)<r>(.*)<d>(.*)<ad>(.*)<s>(.*)$/gm,we="%3c",ve="%3e";class GitTagParser{static parse(e,t){if(!e)return;const i=[];let s,r,n,o,a,l,c;for(;;){if(c=fe.exec(e),null==c)break;[,s,r,n,o,a,l]=c,s=s.substr(10),i.push(new pe.gE(t,s,` ${r||n}`.substr(1),` ${l}`.substr(1),o?new Date(o):void 0,null==a||0===a.length?void 0:new Date(a)))}return i}}GitTagParser.defaultFormat=[`${we}n${ve}%(refname)`,`${we}*r${ve}%(*objectname)`,`${we}r${ve}%(objectname)`,`${we}d${ve}%(creatordate:iso8601)`,`${we}ad${ve}%(authordate:iso8601)`,`${we}s${ve}%(subject)`].join(""),((e,t,i,s)=>{for(var r,n=s>1?void 0:s?ge(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&me(t,i,n)})([(0,d.fF)({args:!1,singleLine:!0})],GitTagParser,"parse",1);var ye=i(3105),be=i(4336),Ce=i(8227),Ae=i(4550),Pe=i(1017);const De="win32"===a.platform,Se=/[\\/]/,ke=/\.ps1$/i,Re=/\.(bat|cmd)$/i,Fe=/\.(js)$/i;function $e(e){if(Se.test(e))return e;const t=(0,Pe.join)(".",e);try{const e=(0,o.statSync)(t);if(e?.isFile()&&Te(e))return t}catch{}const i=a.env.PATH;if(null!=i&&0!==i.length){const t=i.split(De?";":":");let s;for(const i of t){const t=(0,Pe.join)(i,e);try{if(s=(0,o.statSync)(t),s?.isFile()&&Te(s))return t}catch{}}}return e}function Te(e){if(De)return!0;const t=!e.gid||null!=a.getgid&&e.gid===a.getgid(),i=!e.uid||null!=a.getuid&&e.uid===a.getuid();return Boolean(1&e.mode||8&e.mode&&t||64&e.mode&&i)}function xe(e,t){if(!De)return{cmd:$e(e),args:t};if(!(0,o.existsSync)(e)){const i=[".exe",".bat",".cmd",".ps1"];for(const s of i){const i=$e(`${e}${s}`);if((0,o.existsSync)(i))return xe(i,t)}}if(ke.test(e)){return{cmd:(0,Pe.join)(a.env.SYSTEMROOT??"C:\\WINDOWS","System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",e].concat(t)}}if(Re.test(e)){return{cmd:(0,Pe.join)(a.env.SYSTEMROOT??"C:\\WINDOWS","System32","cmd.exe"),args:["/C",e,...t]}}if(Fe.test(e)){return{cmd:a.execPath,args:[e].concat(t)}}return{cmd:e,args:t}}const Ie=/stdout maxBuffer( length)? exceeded/;class RunError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.stdout=t,this.stderr=i,t=t.trim(),i=i.trim(),Error.captureStackTrace?.(this,RunError)}get cmd(){return this.original.cmd}get killed(){return this.original.killed}get code(){return this.original.code}get signal(){return this.original.signal}}class CancelledRunError extends RunError{constructor(e,t,i,s="SIGTERM"){super({name:"CancelledRunError",message:"Cancelled",cmd:e,killed:t,code:i,signal:s},"",""),Error.captureStackTrace?.(this,CancelledRunError)}}function _e(e,t,s,r){const{stdin:o,stdinEncoding:a,...l}={maxBuffer:104857600,...r};let c=!1;return new Promise(((h,u)=>{const d=(0,n.execFile)(e,t,l,(async(n,o,a)=>{if(!c)if(r?.exitCodeOnly)h(n?.code??d.exitCode);else if(null==n)if(a&&be.Yd.warn(`Warning(${e} ${t.join(" ")}): ${a}`),"utf8"===s||"binary"===s||"buffer"===s)h(o);else{const e=(await i.e(429).then(i.t.bind(i,4914,23))).decode;h(e(Buffer.from(o,"binary"),s))}else{let e,t;if(Ie.test(n.message)&&(n.message=`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${l.maxBuffer} bytes`),"utf8"===s||"binary"===s||"buffer"===s)e=o,t=a;else{const r=(await i.e(429).then(i.t.bind(i,4914,23))).decode;e=r(Buffer.from(o,"binary"),s),t=r(Buffer.from(a,"binary"),s)}u(new RunError(n,e,t))}}));r?.cancellation?.onCancellationRequested((()=>{const t=d.kill();c=!0,r?.exitCodeOnly?h(0):u(new CancelledRunError(e,t))})),null!=o&&d.stdin?.end(o,a??"utf8")}))}function Oe(e){return new Promise((t=>(0,o.exists)(e,(e=>t(e)))))}const Be=Object.freeze([]),Ee=Object.freeze({}),Me=Object.freeze(["-c","color.branch=false"]),We=Object.freeze(["-c","color.diff=false"]),Le=Object.freeze(["-c","log.showSignature=false"]),Ue=Object.freeze(["-c","log.showSignature=false","-c","diff.renameLimit=0"]),Ne=Object.freeze(["-c","color.status=false"]),Ge=new TextDecoder("utf8"),He="4b825dc642cb6eb9a060e54bf8d69288fbee4904",Ve={badRevision:/bad revision '(.*?)'/i,noFastForward:/\(non-fast-forward\)/i,noMergeBase:/no merge base/i,notAValidObjectName:/Not a valid object name/i,invalidLineCount:/file .+? has only \d+ lines/i,uncommittedChanges:/contains modified or untracked files/i,alreadyExists:/already exists/i,alreadyCheckedOut:/already checked out/i,mainWorkingTree:/is a main working tree/i},Qe={notARepository:/Not a git repository/i,outsideRepository:/is outside repository/i,noPath:/no such path/i,noCommits:/does not have any commits/i,notFound:/Path '.*?' does not exist in/i,foundButNotInRevision:/Path '.*?' exists on disk, but not in/i,headNotABranch:/HEAD does not point to a branch/i,noUpstream:/no upstream configured for branch '(.*?)'/i,unknownRevision:/ambiguous argument '.*?': unknown revision or path not in the working tree|not stored as a remote-tracking branch/i,mustRunInWorkTree:/this operation must be run in a work tree/i,patchWithConflicts:/Applied patch to '.*?' with conflicts/i,noRemoteRepositorySpecified:/No remote repository specified\./i,remoteConnectionError:/Could not read from remote repository/i,notAGitCommand:/'.+' is not a git command/i};function qe(e,t,i){const s=e.message||e.toString();if(null!=s&&0!==s.length){for(const e of Object.values(Qe))if(e.test(s)){const e=void 0!==i?`${(0,C.qk)(i)} ms`:"";return be.Yd.warn(`[${t}] Git ${s.trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${c.NE.Dot} `)} ${c.NE.Dot} ${e}`),""}const e=Ve.badRevision.exec(s);if(null!=e){const[,t]=e;if(t?.endsWith("^3"))return""}}throw e}class Git{pendingCommands=new Map;async git(e,...t){const i=(0,l.a)(),{configs:s,correlationKey:r,errors:n,encoding:o,...u}=e,d={...u,encoding:"utf8"===(o??"utf8")?"utf8":"buffer",env:{...a.env,...e.env??Ee,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},p=`[${d.cwd}] git ${t.join(" ")}`,m=`${void 0!==r?`${r}:`:""}${p}`;let g,f,w=this.pendingCommands.get(m);void 0===w?(g=!1,t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false",...null!=s?s:Be),"win32"===a.platform&&t.splice(0,0,"-c","core.longpaths=true"),w=_e(await this.path(),t,o??"utf8",d),this.pendingCommands.set(m,w)):(g=!0,be.Yd.debug(`[GIT  ] ${p} ${c.NE.Dot} waiting...`));try{return await w}catch(t){switch(f=t,n){case h.Ignore:return f=void 0,"";case h.Throw:throw t;default:return f=void 0,qe(t,e.cwd,i)}}finally{this.pendingCommands.delete(m);const e=(0,C.qk)(i),t=e>Ce.O,s=t||g?` (${t?"slow"+(g?", waiting":""):""}${g?"waiting":""})`:"";null!=f?be.Yd.error("",`[GIT  ] ${p} ${c.NE.Dot} ${(f.message||String(f)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${c.NE.Dot} `)} ${c.NE.Dot} ${e} ms${s}`):t?be.Yd.warn(`[GIT  ] ${p} ${c.NE.Dot} ${e} ms${s}`):be.Yd.log(`[GIT  ] ${p} ${c.NE.Dot} ${e} ms${s}`),this.logGitCommand(`${p}${null!=f?` ${c.NE.Dot} FAILED`:""}${g?" (waited)":""}`,e,f)}}async gitSpawn(e,...t){const i=(0,l.a)(),{cancellation:s,configs:r,stdin:o,stdinEncoding:h,...u}=e,d={stdio:[o?"pipe":"ignore",null,null],...u,env:{...a.env,...e.env??Ee,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},p=`[${d.cwd}] git ${t.join(" ")}`;if(t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false",...void 0!==r?r:Be),"win32"===a.platform&&t.splice(0,0,"-c","core.longpaths=true"),s){const e=new AbortController;d.signal=e.signal,s.onCancellationRequested((()=>e.abort()))}const m=(0,n.spawn)(await this.path(),t,d);let g;return o&&m.stdin?.end(o,h??"utf8"),m.once("error",(e=>g=e)),m.once("exit",(()=>{const e=(0,C.qk)(i),t=e>Ce.O,s=t?" (slow)":"";null!=g?be.Yd.error("",`[SGIT ] ${p} ${c.NE.Dot} ${(g.message||String(g)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${c.NE.Dot} `)} ${c.NE.Dot} ${e} ms${s}`):t?be.Yd.warn(`[SGIT ] ${p} ${c.NE.Dot} ${e} ms${s}`):be.Yd.log(`[SGIT ] ${p} ${c.NE.Dot} ${e} ms${s}`),this.logGitCommand(`${p}${null!=g?` ${c.NE.Dot} FAILED`:""}`,e,g)})),m}_gitLocation;_gitLocationPromise;async getLocation(){return null==this._gitLocation&&(null==this._gitLocationPromise&&(this._gitLocationPromise=this._gitLocator()),this._gitLocation=await this._gitLocationPromise),this._gitLocation}_gitLocator;setLocator(e){this._gitLocator=e,this._gitLocationPromise=void 0,this._gitLocation=void 0}async path(){return(await this.getLocation()).path}async version(){return(await this.getLocation()).version}async isAtLeastVersion(e){return-1!==(0,Ae.qu)((0,Ae.mL)(await this.version()),(0,Ae.mL)(e))}maybeIsAtLeastVersion(e){return null!=this._gitLocation?-1!==(0,Ae.qu)((0,Ae.mL)(this._gitLocation.version),(0,Ae.mL)(e)):void 0}add(e,t){return this.git({cwd:e},"add","-A","--",t)}apply(e,t,i={}){const s=["apply","--whitespace=warn"];return i.allowConflicts&&s.push("-3"),this.git({cwd:e,stdin:t},...s)}ignoreRevsFileMap=new Map;async blame(e,t,i,s={}){const[r,n]=(0,b.uo)(t,e,!0),o=["blame","--root","--incremental"];s.ignoreWhitespace&&o.push("-w"),null!=s.startLine&&null!=s.endLine&&o.push(`-L ${s.startLine},${s.endLine}`),null!=s.args&&o.push(...s.args);let a=this.maybeIsAtLeastVersion("2.23");void 0===a&&(a=await this.isAtLeastVersion("2.23"));const l=o.indexOf("--ignore-revs-file");if(a){let e;-1!==l?(e=o[l+1],(0,b.YP)(e)||(e=(0,b.RQ)(n,e))):e=(0,b.RQ)(n,".git-blame-ignore-revs");const t=this.ignoreRevsFileMap.get(e);if(void 0!==t)a=t;else{try{a=await Oe(e)}catch{a=!1}this.ignoreRevsFileMap.set(e,a)}}let c;return a||-1===l?a&&-1===l&&o.push("--ignore-revs-file",".git-blame-ignore-revs"):o.splice(l,2),i&&((0,u.rD)(i)?(o.push("--contents","-"),c=await this.show(e,t,":")):o.push(i)),this.git({cwd:n,stdin:c},...o,"--",r)}blame__contents(e,t,i,s={}){const[r,n]=(0,b.uo)(t,e,!0),o=["blame","--root","--incremental"];return s.ignoreWhitespace&&o.push("-w"),null!=s.startLine&&null!=s.endLine&&o.push(`-L ${s.startLine},${s.endLine}`),null!=s.args&&o.push(...s.args),o.push("--contents","-"),this.git({cwd:n,stdin:i,correlationKey:s.correlationKey},...o,"--",r)}branch__containsOrPointsAt(e,t,{mode:i="contains",name:s,remotes:r=!1}={}){const n=["branch"];return r&&n.push("-r"),n.push("pointsAt"===i?`--points-at=${t}`:`--contains=${t}`,"--format=%(refname:short)"),null!=s&&n.push(s),this.git({cwd:e,configs:Me,errors:h.Ignore},...n)}check_ignore(e,...t){return this.git({cwd:e,errors:h.Ignore,stdin:t.join("\0")},"check-ignore","-z","--stdin")}check_mailmap(e,t){return this.git({cwd:e,errors:h.Ignore},"check-mailmap",t)}async check_ref_format(e,t,i={branch:!0}){const s=["check-ref-format"];i.branch?s.push("--branch"):s.push("--normalize");try{const i=await this.git({cwd:t??"",errors:h.Throw},...s,e);return Boolean(i.trim())}catch{return!1}}checkout(e,t,{createBranch:i,path:s}={}){const r=["checkout"];return i?r.push("-b",i,t,"--"):(r.push(t,"--"),s&&([s,e]=(0,b.uo)(s,e,!0),r.push(s))),this.git({cwd:e},...r)}async config__get(e,t,i){const s=await this.git({cwd:t??"",errors:h.Ignore,local:i?.local},"config","--get",e);return 0===s.length?void 0:s.trim()}async config__get_regex(e,t,i){const s=await this.git({cwd:t??"",errors:h.Ignore,local:i?.local},"config","--get-regex",e);return 0===s.length?void 0:s.trim()}async config__set(e,t,i){const s=["config","--local"];null==t?s.push("--unset",e):s.push(e,t),await this.git({cwd:i??"",local:!0},...s)}async diff(e,t,i,s,r={}){const n=["diff","--no-ext-diff","--minimal"];null!=r.linesOfContext&&n.push(`-U${r.linesOfContext}`),r.renames&&n.push("-M"+(null==r.similarityThreshold?"":`${r.similarityThreshold}%`)),null!=r.filters&&0!==r.filters.length&&n.push(`--diff-filter=${r.filters.join("")}`),i&&(i.endsWith("^3^")&&(i=He),n.push((0,u.rD)(i)?"--staged":i)),s&&n.push((0,u.rD)(s)?"--staged":s);try{return await this.git({cwd:e,configs:We,encoding:r.encoding},...n,"--",t)}catch(n){const o=Ve.badRevision.exec(n.message);if(null!==o){const[,n]=o;if(n===i&&null!=n&&n.endsWith("^"))return this.diff(e,t,He,s,r)}throw n}}async diff2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??Le,errors:t?.errors,stdin:t?.stdin},"diff",...t?.stdin?["--stdin"]:Be,...i,...i.includes("--")?Be:["--"])}async diff__contents(e,t,i,s,r={}){const n=["diff","-M"+(null==r.similarityThreshold?"":`${r.similarityThreshold}%`),"--no-ext-diff","-U0","--minimal"];null!=r.filters&&0!==r.filters.length&&n.push(`--diff-filter=${r.filters.join("")}`),n.push("--no-index");try{return await this.git({cwd:e,configs:We,encoding:r.encoding,stdin:s},...n,"--",t,"-")}catch(n){if(n instanceof RunError&&n.stdout)return n.stdout;const o=Ve.badRevision.exec(n.message);if(null!==o){const[,n]=o;if(n===i&&null!=n&&n.endsWith("^"))return this.diff__contents(e,t,He,s,r)}throw n}}diff__name_status(e,t,i,{filters:s,similarityThreshold:r}={}){const n=["diff","--name-status","-M"+(null==r?"":`${r}%`),"--no-ext-diff","-z"];return null!=s&&0!==s.length&&n.push(`--diff-filter=${s.join("")}`),t&&n.push(t),i&&n.push(i),this.git({cwd:e,configs:We},...n,"--")}async diff__shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];t&&i.push(t);try{return await this.git({cwd:e,configs:We},...i,"--")}catch(e){const t=e?.toString()??"";if(Ve.noMergeBase.test(t))return;throw e}}difftool(e,t,i,s={}){const r=["difftool","--no-prompt",`--tool=${i}`];return s.staged&&r.push("--staged"),s.ref1&&r.push(s.ref1),s.ref2&&r.push(s.ref2),this.git({cwd:e},...r,"--",t)}difftool__dir_diff(e,t,i,s){const r=["difftool","--dir-diff",`--tool=${t}`,i];return s&&r.push(s),this.git({cwd:e},...r)}async fetch(e,t={}){const i=["fetch"];if(t.prune&&i.push("--prune"),t.branch&&t.remote)if(t.upstream&&t.pull){i.push("-u",t.remote,`${t.upstream}:${t.branch}`);try{return void await this.git({cwd:e},...i)}catch(e){const i=e?.toString()??"";if(Ve.noFastForward.test(i))return void s.window.showErrorMessage(`Unable to pull the '${t.branch}' branch, as it can't be fast-forwarded.`);throw e}}else i.push(t.remote,t.upstream?`${t.upstream}:refs/remotes/${t.remote}/${t.branch}`:t.branch);else t.remote?i.push(t.remote):t.all&&i.push("--all");await this.git({cwd:e},...i)}for_each_ref__branch(e,t={all:!1}){const i=["for-each-ref",`--format=${GitBranchParser.defaultFormat}`,"refs/heads"];return t.all&&i.push("refs/remotes"),this.git({cwd:e},...i)}log(e,t,{all:i,argsOrFormat:s,authors:r,limit:n,merges:o,ordering:a,similarityThreshold:l,since:c,until:h}){null==s&&(s=["--name-status",`--format=${i?ee.allFormat:ee.defaultFormat}`]),"string"==typeof s&&(s=[`--format=${s}`]);const d=["log",...s,"--full-history","-M"+(null==l?"":`${l}%`),"-m"];return a&&d.push(`--${a}-order`),n&&d.push(`-n${n+1}`),c&&d.push(`--since="${c}"`),h&&d.push(`--until="${h}"`),o||d.push("--first-parent"),null!=r&&0!==r.length&&(d.includes("--use-mailmap")||d.push("--use-mailmap"),d.push(...r.map((e=>`--author=^${e.name} <${e.email}>$`)))),i&&d.push("--all","--single-worktree"),t&&!(0,u.rD)(t)&&d.push(t),this.git({cwd:e,configs:Ue},...d,"--")}log2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??Le,errors:t?.errors,stdin:t?.stdin},"log",...t?.stdin?["--stdin"]:Be,...i,...t?.ref&&!(0,u.rD)(t.ref)?[t.ref]:Be,...i.includes("--")?Be:["--"])}async logStreamTo(e,t,i,s,...r){const n=["log",...r];s?.stdin&&n.push("--stdin");const o=await this.gitSpawn({cwd:e,configs:s?.configs??Le,stdin:s?.stdin},...n,"--"),a=Ye(t);let l=!1,c=0;return new Promise(((e,t)=>{const s=[],r=[];function n(e){s.push(e)}function h(e){t(e)}function u(i){0!==i&&t(new Error(s.join(""))),e([r,c])}o.on("error",h),o.on("exit",u),o.stdout.setEncoding("utf8"),o.stdout.on("data",(function t(s){r.push(s),c+=s.match(/(?:^\x00*|\x00\x00)[0-9a-f]{40}\x00/g)?.length??0,!l&&a.test(s)&&(l=!0,c>i&&(i=c+50)),!l||c<=i||(o.removeListener("exit",u),o.removeListener("error",h),o.stdout.removeListener("data",t),o.stderr.removeListener("data",n),o.kill(),e([r,c]))})),o.stderr.setEncoding("utf8"),o.stderr.on("data",n)}))}log__file(e,t,i,{all:s,argsOrFormat:r,fileMode:n="full",filters:o,firstParent:a=!1,limit:l,ordering:c,renames:h=!0,reverse:d=!1,since:p,skip:m,startLine:g,endLine:f}={}){const[w,v]=(0,b.uo)(t,e,!0);null==r&&(r=[`--format=${s?ee.allFormat:ee.defaultFormat}`]),"string"==typeof r&&(r=[`--format=${r}`]);const y=["log",...r];return c&&y.push(`--${c}-order`),l&&!d&&y.push(`-n${l+1}`),m&&y.push(`--skip=${m}`),p&&y.push(`--since="${p}"`),s&&y.push("--all","--single-worktree"),h&&(s||null!=g)&&(h=!1),y.push(h?"--follow":"-m"),a&&(y.push("--first-parent"),h&&y.push("-m")),null!=o&&0!==o.length&&y.push(`--diff-filter=${o.join("")}`),"none"!==n&&(null==g?"simple"===n||(0,b.Mh)(w)?y.push("--name-status"):y.push("--numstat","--summary"):y.push(`-L ${g},${f??g}:${w}`)),i&&!(0,u.rD)(i)&&(d?y.push("--reverse","--ancestry-path",`${i}..HEAD`):y.push(i)),null==g&&y.push("--",w),this.git({cwd:v,configs:Le},...y)}async log__file_recent(e,t,i){const s=["log","-M"+(null==i?.similarityThreshold?"":`${i?.similarityThreshold}%`),"-n1","--format=%H"];i?.ordering&&s.push(`--${i?.ordering}-order`),i?.ref&&s.push(i?.ref);const r=await this.git({cancellation:i?.cancellation,cwd:e,configs:Le,errors:h.Ignore},...s,"--",t);return 0===r.length?void 0:r.trim()}async log__find_object(e,t,i,s,r,n){const o=["log","-n1","--no-renames","--format=%H",`--find-object=${t}`,i];s&&o.push(`--${s}-order`),r&&o.push("--",r);const a=await this.git({cancellation:n,cwd:e,configs:Le,errors:h.Ignore},...o);return 0===a.length?void 0:a.trim()}async log__recent(e,t){const i=["log","-n1","--format=%H"];t&&i.push(`--${t}-order`);const s=await this.git({cwd:e,configs:Le,errors:h.Ignore},...i,"--");return 0===s.length?void 0:s.trim()}async log__recent_committerdate(e,t){const i=["log","-n1","--format=%ct"];t&&i.push(`--${t}-order`);const s=await this.git({cwd:e,configs:Le,errors:h.Ignore},...i,"--");return 0===s.length?void 0:s.trim()}log__search(e,t=Be,i){if(null!=i?.shas){const t=(0,ye.v_)(i.shas,"\n");return this.git({cwd:e,stdin:t},"show","--stdin","--name-status",`--format=${ee.defaultFormat}`,"--use-mailmap")}return this.git({cwd:e,configs:["-C",e,...Le]},"log","--name-status",`--format=${ee.defaultFormat}`,"--use-mailmap","--full-history","-m",...i?.limit?[`-n${i.limit+1}`]:Be,...i?.skip?[`--skip=${i.skip}`]:Be,...i?.ordering?[`--${i.ordering}-order`]:Be,...t)}async ls_files(e,t,{ref:i,untracked:s}={}){const r=["ls-files"];i&&!(0,u.l3)(i)&&r.push(`--with-tree=${i}`),!i&&s&&r.push("-o");const n=await this.git({cwd:e,errors:h.Ignore},...r,"--",t);return 0===n.length?void 0:n.trim()}ls_remote(e,t,i){return this.git({cwd:e},"ls-remote",t,i)}ls_remote__HEAD(e,t){return this.git({cwd:e},"ls-remote","--symref",t,"HEAD")}async ls_tree(e,t,i){const s=["ls-tree"];i?s.push("-l",t,"--",i):s.push("-lrt",t,"--");const r=await this.git({cwd:e,errors:h.Ignore},...s);return 0===r.length?void 0:r.trim()}merge_base(e,t,i,s){const r=["merge-base"];return s?.forkPoint&&r.push("--fork-point"),this.git({cwd:e},...r,t,i)}async merge_base__is_ancestor(e,t,i){return 0===await this.git({cwd:e,exitCodeOnly:!0},"merge-base","--is-ancestor",t,i)}reflog(e,{all:t,branch:i,limit:s,ordering:r,skip:n}={}){const o=["log","--walk-reflogs",`--format=${GitReflogParser.defaultFormat}`,"--date=iso8601"];return r&&o.push(`--${r}-order`),t&&o.push("--all"),s&&o.push(`-n${s}`),n&&o.push(`--skip=${n}`),i&&o.push(i),this.git({cwd:e,configs:Le},...o,"--")}remote(e){return this.git({cwd:e},"remote","-v")}remote__add(e,t,i,s){const r=["remote","add"];return s?.fetch&&r.push("-f"),this.git({cwd:e},...r,t,i)}remote__prune(e,t){return this.git({cwd:e},"remote","prune",t)}remote__remove(e,t){return this.git({cwd:e},"remote","remove",t)}remote__get_url(e,t){return this.git({cwd:e},"remote","get-url",t)}reset(e,t){return this.git({cwd:e},"reset","-q","--",t)}async rev_list(e,t,i){const s=["rev-list"];i?.all&&s.push("--all"),null!=i?.maxParents&&s.push(`--max-parents=${i.maxParents}`);const r=(await this.git({cwd:e,errors:h.Ignore},...s,t,"--")).trim().split("\n");if(0!==r.length)return r}async rev_list__count(e,t,i){const s=["rev-list","--count"];i&&s.push("--all");let r=await this.git({cwd:e,errors:h.Ignore},...s,t,"--");if(r=r.trim(),0===r.length)return;const n=parseInt(r,10);return isNaN(n)?void 0:n}async rev_list__left_right(e,t){const i=await this.git({cwd:e,errors:h.Ignore},"rev-list","--left-right","--count",...t,"--");if(0===i.length)return;const s=i.split("\t");if(2!==s.length)return;const[r,n]=s,o={ahead:parseInt(r,10),behind:parseInt(n,10)};return isNaN(o.ahead)||isNaN(o.behind)?void 0:o}async rev_parse(e,t){const i=await this.git({cwd:e,errors:h.Ignore},"rev-parse",t);return 0===i.length?void 0:i.trim()}async rev_parse__currentBranch(e,t){try{return[await this.git({cwd:e,errors:h.Throw},"rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}","--"),void 0]}catch(i){const s=i?.toString()??"";if(Ve.badRevision.test(s)||Qe.noUpstream.test(s)){if(null!=i.stdout&&0!==i.stdout.length)return[i.stdout,void 0];try{const t=await this.symbolic_ref(e,"HEAD");if(null!=t)return[t.trim(),void 0]}catch{}try{const t=await this.symbolic_ref(e,"refs/remotes/origin/HEAD");if(null!=t)return[t.trim().substr("origin/".length),void 0]}catch(t){if(/is not a symbolic ref/.test(t.stderr))try{const t=await this.ls_remote__HEAD(e,"origin");if(null!=t){const e=/ref:\s(\S+)\s+HEAD/m.exec(t);if(null!=e){const[,t]=e;return[t.substr("refs/heads/".length),void 0]}}}catch{}}const t=await this.config__get("init.defaultBranch",e)??"main",s=await this.config__get_regex(`branch\\.${t}\\.+`,e,{local:!0});let r,n;if(s){let e=/^branch\..+\.remote\s(.+)$/m.exec(s);null!=e&&(r=e[1]),e=/^branch\..+\.merge\srefs\/heads\/(.+)$/m.exec(s),null!=e&&(n=e[1])}return[`${t}${r&&n?`\n${r}/${n}`:""}`,void 0]}if(Qe.headNotABranch.test(s)){const i=await this.log__recent(e,t);if(void 0===i)return;return[`(HEAD detached at ${(0,u.zL)(i)})`,i]}return void qe(i,e)}}async rev_parse__git_dir(e){const t=await this.git({cwd:e,errors:h.Ignore},"rev-parse","--git-dir","--git-common-dir");if(0===t.length)return;let[i,s]=t.split("\n").map((e=>e.trimStart()));return(0,b.YP)(i)||(i=(0,b.RQ)(e,i)),i=(0,b.AH)(i),s?((0,b.YP)(s)||(s=(0,b.RQ)(e,s)),s=(0,b.AH)(s),{path:i,commonPath:s!==i?s:void 0}):{path:i}}async rev_parse__show_toplevel(e){let t;if(!s.workspace.isTrusted)try{if((0,o.accessSync)((0,b.RQ)(e,"HEAD")),t=await this.git({cwd:e,errors:h.Throw,configs:["-C",e]},"rev-parse","--show-cdup"),""===t.trim())return void be.Yd.log(`Skipping (untrusted workspace); bare clone repository detected in '${e}'`)}catch{}try{return t=await this.git({cwd:e,errors:h.Throw},"rev-parse","--show-toplevel"),0===t.length?void 0:(0,b.AH)(t.trimStart().replace(/[\r|\n]+$/,""))}catch(i){const r=/^fatal: detected dubious ownership in repository at '([^']+)'[\s\S]*git config --global --add safe\.directory '?([^'\n]+)'?$/m.exec(i.stderr);if(3===r?.length)return void be.Yd.log(`Skipping; unsafe repository detected in '${r[1]}'; run 'git config --global --add safe.directory ${r[2]}' to allow it`);const n=/this operation must be run in a work tree/.test(i.stderr);if(n&&s.workspace.isTrusted&&(t=await this.git({cwd:e,errors:h.Ignore},"rev-parse","--is-bare-repository"),"true"===t.trim()&&(t=await this.git({cwd:e,errors:h.Ignore},"rev-parse","--git-common-dir"),t=t.trim(),t.length)))return(0,b.AH)(("."===t?e:t).trimStart().replace(/[\r|\n]+$/,""));if(n||"ENOENT"===i.code){let t=!n&&await Oe(e);if(!t){do{const i=(0,b.XX)(e);if(i===e||0===i.length)return;e=i,t=await Oe(e)}while(!t);return this.rev_parse__show_toplevel(e)}}return}}async rev_parse__verify(e,t,i){const s=["rev-parse","--verify"];await this.isAtLeastVersion("2.30")&&s.push("--end-of-options");const r=await this.git({cwd:e,errors:h.Ignore},...s,i?`${t}:./${i}`:`${t}^{commit}`);return 0===r.length?void 0:r.trim()}async show(e,t,i,s={}){const[r,n]=(0,b.uo)(t,e,!0);if((0,u.rD)(i)&&(i=":"),(0,u.l3)(i))throw new Error(`ref=${i} is uncommitted`);const o={configs:Le,cwd:n,encoding:s.encoding??"utf8",errors:h.Throw},a=i.endsWith(":")?`${i}./${r}`:`${i}:./${r}`;try{return await this.git(o,"show","--textconv",a,"--")}catch(r){const n=r?.toString()??"";if(":"===i&&Ve.badRevision.test(n))return this.show(e,t,"HEAD:",s);if(Ve.badRevision.test(n)||Qe.notFound.test(n)||Qe.foundButNotInRevision.test(n))return;return qe(r,o.cwd)}}show2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??Le},"show",...i,...i.includes("--")?Be:["--"])}show__diff(e,t,i,s,{similarityThreshold:r}={}){const n=["show","-M"+(null==r?"":`${r}%`),"--format=","--minimal","-U0",i,"--",t];return null!=s&&0!==s.length&&n.push(s),this.git({cwd:e},...n)}show__name_status(e,t,i){return this.git({cwd:e},"show","--name-status","--format=","-z",i,"--",t)}show_ref__tags(e){return this.git({cwd:e,errors:h.Ignore},"show-ref","--tags")}stash__apply(e,t,i){return t?this.git({cwd:e},"stash",i?"pop":"apply",t):Promise.resolve(void 0)}async stash__delete(e,t,i){if(t){if(i){const s=await this.git({cwd:e,errors:h.Ignore},"show","--format=%H","--no-patch",t);if(s?.trim()!==i)throw new Error("Unable to delete stash; mismatch with stash number")}return this.git({cwd:e},"stash","drop",t)}}stash__list(e,{args:t,similarityThreshold:i}){return null==t&&(t=["--name-status"]),this.git({cwd:e},"stash","list",...t,"-M"+(null==i?"":`${i}%`))}async stash__push(e,t,{includeUntracked:i,keepIndex:s,onlyStaged:r,pathspecs:n,stdin:o}={}){const a=["stash","push"];(i||null!=n&&0!==n.length)&&a.push("-u"),s&&a.push("-k"),r&&a.push("--staged"),t&&a.push("-m",t),o&&null!=n&&0!==n.length?await this.git({cwd:e,stdin:n.join("\0")},...a,"--pathspec-from-file=-","--pathspec-file-nul"):(a.push("--"),null!=n&&0!==n.length&&a.push(...n),await this.git({cwd:e},...a))}async status(e,t=1,{similarityThreshold:i}={}){const s=["status",t>=2?`--porcelain=v${t}`:"--porcelain","--branch","-u"];return await this.isAtLeastVersion("2.18")&&s.push("--find-renames"+(null==i?"":`=${i}%`)),this.git({cwd:e,configs:Ne,env:{GIT_OPTIONAL_LOCKS:"0"}},...s,"--")}async status__file(e,t,i=1,{similarityThreshold:s}={}){const[r,n]=(0,b.uo)(t,e,!0),o=["status",i>=2?`--porcelain=v${i}`:"--porcelain"];return await this.isAtLeastVersion("2.18")&&o.push("--find-renames"+(null==s?"":`=${s}%`)),this.git({cwd:n,configs:Ne,env:{GIT_OPTIONAL_LOCKS:"0"}},...o,"--",r)}symbolic_ref(e,t){return this.git({cwd:e},"symbolic-ref","--short",t)}tag(e){return this.git({cwd:e},"tag","-l",`--format=${GitTagParser.defaultFormat}`)}worktree__add(e,t,{commitish:i,createBranch:s,detach:r,force:n}={}){const o=["worktree","add"];return n&&o.push("--force"),s&&o.push("-b",s),r&&o.push("--detach"),o.push(t),i&&o.push(i),this.git({cwd:e},...o)}worktree__list(e){return this.git({cwd:e},"worktree","list","--porcelain")}worktree__remove(e,t,{force:i}={}){const s=["worktree","remove"];return i&&s.push("--force"),s.push(t),this.git({cwd:e,errors:h.Throw},...s)}async readDotGitFile(e,t,i){try{const r=await s.workspace.fs.readFile(s.Uri.file((0,b.RQ)(e,".git",...t)));let n=Ge.decode(r);if(n=i?.trim??1?n.trim():n,i?.numeric){const e=Number.parseInt(n,10);return isNaN(e)?void 0:e}return n}catch(e){if(i?.throw)throw e;return}}_gitOutput;logGitCommand(e,t,i){if(!be.Yd.enabled(Ce.i.Debug)&&!be.Yd.isDebugging)return;const r=t>Ce.O;be.Yd.isDebugging&&(null!=i?console.error(be.Yd.timestamp,"[GitLens (Git)]",e??"",i):r?console.warn(be.Yd.timestamp,"[GitLens (Git)]",e??""):console.log(be.Yd.timestamp,"[GitLens (Git)]",e??"")),null==this._gitOutput&&(this._gitOutput=s.window.createOutputChannel("GitLens (Git)")),this._gitOutput.appendLine(`${be.Yd.timestamp} [${r?"*":" "}${t.toString().padStart(6)}ms] ${e}${null!=i?`\n\n${i.toString()}`:""}`)}}function Ye(e){return new RegExp(`(?:^\0*|\0\0)${e}\0`)}var je=i(2037),ze=i(3951),Ke=i(1177),Je=i(7338),Ze=i(8388),Xe=i(9938),et=i(8887),tt=i(6592),it=i(2380),st=i(7462),rt=i(1719),nt=i(5069),ot=i(3050),at=i(6503),lt=i(1529),ct=i(827),ht=Object.defineProperty,ut=Object.getOwnPropertyDescriptor;const dt=class{static parse(e,t,i,s){if(!t)return;const r=new Map,n=new Map,o=[];let a,l,c,h;for(c of(0,C.UM)(t))if(h=c.split(" "),!(h.length<2))if([l]=h,null!=a)switch(l){case"author":a.sha===P.CL?a.author="You":a.author=c.slice(l.length+1).trim();break;case"author-mail":{if(a.sha===P.CL){a.authorEmail=s?.email;continue}a.authorEmail=c.slice(l.length+1).trim();const e=a.authorEmail.indexOf("<");if(e>=0){const t=a.authorEmail.indexOf(">",e);a.authorEmail=t>e?a.authorEmail.substring(e+1,t):a.authorEmail.substring(e+1)}break}case"author-time":a.authorDate=h[1];break;case"author-tz":a.authorTimeZone=h[1];break;case"committer":(0,u.l3)(a.sha)?a.committer="You":a.committer=c.slice(l.length+1).trim();break;case"committer-mail":{if((0,u.l3)(a.sha)){a.committerEmail=s?.email;continue}a.committerEmail=c.slice(l.length+1).trim();const e=a.committerEmail.indexOf("<");if(e>=0){const t=a.committerEmail.indexOf(">",e);a.committerEmail=t>e?a.committerEmail.substring(e+1,t):a.committerEmail.substring(e+1)}break}case"committer-time":a.committerDate=h[1];break;case"committer-tz":a.committerTimeZone=h[1];break;case"summary":a.summary=c.slice(l.length+1).trim();break;case"previous":a.previousSha=h[1],a.previousPath=h.slice(2).join(" ");break;case"filename":a.path=c.slice(l.length+1),dt.parseEntry(e,a,i,n,r,o,s),a=void 0}else a={sha:l,originalLine:parseInt(h[1],10),line:parseInt(h[2],10),lineCount:parseInt(h[3],10)};for(const[,e]of n){if(!e.author.name)continue;const t=r.get(e.author.name);if(null==t)return;t.lineCount+=e.lines.length}return{repoPath:i,authors:new Map([...r.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount))),commits:n,lines:o}}static parseEntry(e,t,i,s,r,n,o){let a=s.get(t.sha);if(null==a){if(null!=t.author){null==o||null==o.name&&null==o.email||null!=o.name&&o.name!==t.author||null!=o.email&&o.email!==t.authorEmail||(t.author="You");let e=r.get(t.author);null==e&&(e={name:t.author,lineCount:0},r.set(t.author,e))}a=new A.aM(e,i,t.sha,new A._j(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new A._j(t.committer,t.committerEmail,new Date(1e3*t.committerDate)),t.summary,[],void 0,new D.K8(i,t.path,D.NV.Modified,t.previousPath&&t.previousPath!==t.path?t.previousPath:void 0,t.previousSha),void 0,[]),s.set(t.sha,a)}for(let e=0,i=t.lineCount;e<i;e++){const i={sha:t.sha,previousSha:a.file.previousSha,originalLine:t.originalLine+e,line:t.line+e};a.lines.push(i),n[i.line-1]=i}}};let pt=dt;((e,t,i,s)=>{for(var r,n=s>1?void 0:s?ut(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&ht(t,i,n)})([(0,d.fF)({args:!1,singleLine:!0})],pt,"parse",1);class GitDiffHunk{constructor(e,t,i){this.diff=e,this.current=t,this.previous=i}get lines(){return this.parseHunk().lines}get state(){return this.parseHunk().state}parseHunk(){return null==this.parsedHunk&&(this.parsedHunk=GitDiffParser.parseHunk(this)),this.parsedHunk}}var mt=Object.defineProperty,gt=Object.getOwnPropertyDescriptor,ft=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?gt(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&mt(t,i,n),n};const wt=/(\d+)\s+files? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,vt=/^@@ -([\d]+)(?:,([\d]+))? \+([\d]+)(?:,([\d]+))? @@(?:.*?)\n([\s\S]*?)(?=^@@)/gm;class GitDiffParser{static parse(e,t=!1){if(!e)return;const i=[];let s,r,n,o,a,l;for(;;){if(l=vt.exec(`${e}\n@@`),null==l)break;[,s,r,n,o,a]=l,r=Number(r)||0,s=Number(s)||0,o=Number(o)||0,n=Number(n)||0,i.push(new GitDiffHunk(` ${a}`.substr(1),{count:0===o?1:o,position:{start:n,end:n+(o>0?o-1:0)}},{count:0===r?1:r,position:{start:s,end:s+(r>0?r-1:0)}}))}if(!i.length)return;return{diff:t?e:void 0,hunks:i}}static parseHunk(e){const t=e.current.position.start,i=e.previous.position.start,s=t>i?new Array(t-i).fill(void 0,0,t-i):[],r=i>t?new Array(i-t).fill(void 0,0,i-t):[];let n,o,a=0;for(const t of(0,C.UM)(e.diff))switch(t[0]){case"+":n=!0,s.push({line:` ${t.substring(1)}`,state:"added"}),a>0?a--:r.push(void 0);break;case"-":o=!0,a++,r.push({line:` ${t.substring(1)}`,state:"removed"});break;default:for(;a>0;)a--,s.push(void 0);s.push({line:t,state:"unchanged"}),r.push({line:t,state:"unchanged"})}for(;a>0;)a--,s.push(void 0);const l=[];for(let t=0;t<Math.max(s.length,r.length);t++)l.push({hunk:e,current:s[t],previous:r[t]});return{lines:l,state:n&&o?"changed":n?"added":"removed"}}static parseNameStatus(e,t){if(!e)return;const i=[];let s;const r=e.split("\0");for(let e=0;e<r.length-1;e++)s=r[e][0],"."===s&&(s="?"),i.push({status:s,path:r[++e],originalPath:"R"===s[0]||"C"===s[0]?r[++e]:void 0,repoPath:t});return i}static parseShortStat(e){if(!e)return;const t=wt.exec(e);if(null==t)return;const[,i,s,r]=t;return{changedFiles:null==i?0:parseInt(i,10),additions:null==s?0:parseInt(s,10),deletions:null==r?0:parseInt(r,10)}}}ft([(0,d.fF)({args:!1,singleLine:!0})],GitDiffParser,"parse",1),ft([(0,d.fF)({args:!1,singleLine:!0})],GitDiffParser,"parseHunk",1),ft([(0,d.fF)({args:!1,singleLine:!0})],GitDiffParser,"parseNameStatus",1),ft([(0,d.fF)({args:!1,singleLine:!0})],GitDiffParser,"parseShortStat",1);var yt=i(4794),bt=Object.defineProperty,Ct=Object.getOwnPropertyDescriptor,At=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ct(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&bt(t,i,n),n};const Pt=/(?:ahead ([0-9]+))/,Dt=/(?:behind ([0-9]+))/;class GitStatusParser{static parse(e,t,i){if(!e)return;const s=e.split("\n").filter((e=>Boolean(e)));return 0!==s.length?i<2?this.parseV1(s,t):this.parseV2(s,t):void 0}static parseV1(e,t){let i;const s=[],r={ahead:0,behind:0};let n,o=-1;for(;++o<e.length;){const a=e[o];if(a.startsWith("##")){const e=a.split(" ");if([i,n]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),i=Pt.exec(t);r.ahead=null==i?0:Number(i[1])||0;const s=Dt.exec(t);r.behind=null==s?0:Number(s[1])||0}}else{const e=a.substring(0,2),i=a.substring(3);if(e.startsWith("R")||e.startsWith("C")){const[r,n]=i.replace(/"/g,"").split("->");s.push(this.parseStatusFile(t,e,n.trim(),r.trim()))}else s.push(this.parseStatusFile(t,e,i))}}return new ct.Hk((0,b.AH)(t),i??"","",s,r,n)}static parseV2(e,t){let i;const s=[];let r;const n={ahead:0,behind:0};let o,a=-1;for(;++a<e.length;){const l=e[a];if(l.startsWith("#")){const e=l.split(" ");switch(e[1]){case"branch.oid":r=e[2];break;case"branch.head":i=e[2];break;case"branch.upstream":o=e[2];break;case"branch.ab":n.ahead=Number(e[2].substring(1)),n.behind=Number(e[3].substring(1))}}else{const e=l.split(" ");switch(e[0][0]){case"1":s.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":{const i=e.slice(9).join(" ").split("\t");s.push(this.parseStatusFile(t,e[1],i[0],i[1]));break}case"u":s.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":s.push(this.parseStatusFile(t,"??",e.slice(1).join(" ")))}}}return new ct.Hk((0,b.AH)(t),i??"",r??"",s,n,o)}static parseStatusFile(e,t,i,s){let r,n=t.startsWith(".")?void 0:t[0].trim();return null!=n&&0!==n.length||(n=void 0),t.length>1&&(r="."!==t[1]?t[1].trim():void 0,null!=r&&0!==r.length||(r=void 0)),new ct.JB(e,n,r,i,s)}}At([(0,d.fF)({args:!1,singleLine:!0})],GitStatusParser,"parse",1),At([(0,d.fF)({args:!1,singleLine:!0})],GitStatusParser,"parseV1",1),At([(0,d.fF)({args:!1,singleLine:!0})],GitStatusParser,"parseV2",1);var St=Object.defineProperty,kt=Object.getOwnPropertyDescriptor;const Rt=/(?:.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)/gm;class GitTreeParser{static parse(e){if(!e)return;const t=[];let i,s,r,n,o;for(;;){if(o=Rt.exec(e),null==o)break;[,i,s,r,n]=o,t.push({commitSha:null==s||0===s.length?"":` ${s}`.substr(1),path:null==n||0===n.length?"":` ${n}`.substr(1),size:Number(r)||0,type:null==i||0===i.length?"":` ${i}`.substr(1)})}return t}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?kt(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&St(t,i,n)})([(0,d.fF)({args:!1,singleLine:!0})],GitTreeParser,"parse",1);var Ft=Object.defineProperty,$t=Object.getOwnPropertyDescriptor,Tt=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?$t(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ft(t,i,n),n};const xt=class{constructor(e,t,i,s,r,n,o,a){this.main=e,this.type=t,this.repoPath=i,this.uri=s,this.locked=r,this.prunable=n,this.sha=o,this.branch=a}static is(e){return e instanceof xt}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,u.zL)(this.sha);default:return this.branch||this.friendlyPath}}get friendlyPath(){return xt.getFriendlyPath(this.uri)}get workspaceFolder(){return s.workspace.getWorkspaceFolder(this.uri)}getBranch(){return"branch"!==this.type||null==this.branch?Promise.resolve(void 0):(null==this._branch&&(this._branch=gv.instance.git.getBranches(this.repoPath,{filter:e=>e.name===this.branch}).then((e=>e.values[0]))),this._branch)}getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._status||e?.force)&&(this._status=gv.instance.git.getStatusForRepo(this.uri.fsPath)),this._status)}static getFriendlyPath(e){const t=s.workspace.getWorkspaceFolder(e);if(null==t)return(0,b.AH)(e.fsPath);const i=(0,b.AH)((0,b.Gf)(t.uri.fsPath,e.fsPath));return 0===i.length?t.name:i}};let It=xt;Tt([(0,se.H)()],It.prototype,"friendlyPath",1),Tt([(0,se.H)()],It.prototype,"workspaceFolder",1);var _t=Object.defineProperty,Ot=Object.getOwnPropertyDescriptor;class GitWorktreeParser{static parse(e,t){if(!e)return[];null!=t&&(t=(0,b.AH)(t));const i=[];let r,n,o,a,l,c,h,u=!0;for(n of(0,C.UM)(e))if(o=n.indexOf(" "),-1===o?(a=n,l=""):(a=n.substring(0,o),l=n.substring(o+1)),0!==a.length||null==r)switch(null==r&&(r={}),a){case"worktree":r.path=l;break;case"bare":r.bare=!0;break;case"HEAD":r.sha=l;break;case"branch":r.branch=l.substr(11);break;case"detached":r.detached=!0;break;case"locked":[,c]=l.split(" ",2),r.locked=c?.trim()||!0;break;case"prunable":[,h]=l.split(" ",2),r.prunable=h?.trim()||!0}else i.push(new It(u,r.bare?"bare":r.detached?"detached":"branch",t,s.Uri.file(r.path),r.locked??!1,r.prunable??!1,r.sha,r.branch)),r=void 0,u=!1;return i}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ot(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&_t(t,i,n)})([(0,d.fF)({args:!1,singleLine:!0})],GitWorktreeParser,"parse",1);var Bt=i(7552),Et=i(6934),Mt=i(7925);class TimedCancellationSource{constructor(e){this.cancellation=new s.CancellationTokenSource,this.timer=setTimeout((()=>this.cancellation.cancel()),e)}dispose(){clearTimeout(this.timer),this.cancellation.dispose()}cancel(){clearTimeout(this.timer),this.cancellation.cancel()}get token(){return this.cancellation.token}}var Wt=i(5432),Lt=i(4486),Ut=i(6004),Nt=i(7469),Gt=i(1526),Ht=i(9701),Vt=i(6700),Qt=i(6398);class UnableToFindGitError extends Error{constructor(e){super("Unable to find git"),this.original=e,Error.captureStackTrace?.(this,UnableToFindGitError)}}class InvalidGitConfigError extends Error{constructor(e){super("Invalid Git configuration"),this.original=e,Error.captureStackTrace?.(this,InvalidGitConfigError)}}async function qt(e){const t=new Qt.u(`findSpecificGit(${e})`,{logLevel:Ce.i.Debug});let i;try{i=await _e(e,["--version"],"utf8")}catch(e){if(t.stop({message:` ${c.NE.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}if(!e||"git"===e){const s=xe(e,["--version"]).cmd;try{i=await _e(s,["--version"],"utf8")}catch(e){if(t.stop({message:` ${c.NE.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}e=s}const s=i.trim().replace(/^git version /,"").trim();return t.stop({message:` ${c.NE.Dot} Found ${s} in ${e}; ${i}`}),{path:e,version:s}}function Yt(e){return null==e||0===e.length?Promise.reject(new UnableToFindGitError):qt((0,Pe.join)(e,"Git","cmd","git.exe"))}async function jt(e,t=!0){try{if(null==e||"string"==typeof e)return await qt(e??"git");try{return(0,Nt.Yj)(...e.map((e=>qt(e))))}catch(e){throw new UnableToFindGitError(e)}}catch(e){if(!t)return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e));try{switch(a.platform){case"darwin":return await async function(){try{const e=(await _e("which",["git"],"utf8")).trim();if("/usr/bin/git"!==e)return qt(e);try{return await _e("xcode-select",["-p"],"utf8"),qt(e)}catch(t){return 2===t.code?Promise.reject(new UnableToFindGitError(t)):qt(e)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}();case"win32":return await Yt(a.env.ProgramW6432).then(null,(()=>Yt(a.env["ProgramFiles(x86)"]))).then(null,(()=>Yt(a.env.ProgramFiles))).then(null,(()=>qt("git")));default:return Promise.reject(new UnableToFindGitError)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}}var zt=Object.defineProperty,Kt=Object.getOwnPropertyDescriptor,Jt=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Kt(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&zt(t,i,n),n};const Zt=Object.freeze([]),Xt=Promise.resolve(void 0),ei=Object.freeze({values:[]}),ti={doesNotExist:/no such file or directory/i},ii=/(?<=^\/?)([a-zA-Z])(?=:\/)/,si=/^user\.(name|email) (.*)$/gm,ri=/(.+)\s<(.+)>/,ni=/(?:(?:(?<wip>WIP) on|On) (?<onref>[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ~^:?*[\\]+[^./]):\s*)?(?<summary>.*)$/s,oi=["merge","pull"];class LocalGitProvider{constructor(e,t){this.container=e,this.git=t,this.git.setLocator(this.ensureGit.bind(this)),this._disposables.push(this.container.events.on("git:cache:reset",(e=>e.data.repoPath?this.resetCache(e.data.repoPath,...e.data.caches??Zt):this.resetCaches(...e.data.caches??Zt))))}descriptor={id:it.pq.Git,name:"Git",virtual:!1};supportedSchemes=new Set([c.sN.File,c.sN.Git,c.sN.GitLens,c.sN.PRs]);_onDidChangeRepository=new s.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new s.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new s.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_branchesCache=new Map;_contributorsCache=new Map;_mergeStatusCache=new Map;_rebaseStatusCache=new Map;_repoInfoCache=new Map;_stashesCache=new Map;_tagsCache=new Map;_trackedPaths=new Gt.bM;_disposables=[];dispose(){s.Disposable.from(...this._disposables).dispose()}get useCaching(){return r.D.get("advanced.caching.enabled")}onRepositoryChanged(e,t){t.changed(lt.I6.Config,lt.du.Any)&&this._repoInfoCache.delete(e.path),t.changed(lt.I6.Heads,lt.I6.Remotes,lt.du.Any)&&(this._branchesCache.delete(e.path),this._contributorsCache.delete(e.path),this._contributorsCache.delete(`stats|${e.path}`)),t.changed(lt.I6.Index,lt.I6.Unknown,lt.du.Any)&&this._trackedPaths.clear(),t.changed(lt.I6.Merge,lt.du.Any)&&this._mergeStatusCache.delete(e.path),t.changed(lt.I6.Rebase,lt.du.Any)&&this._rebaseStatusCache.delete(e.path),t.changed(lt.I6.Stash,lt.du.Any)&&this._stashesCache.delete(e.path),t.changed(lt.I6.Tags,lt.du.Any)&&this._tagsCache.delete(e.path),this._onDidChangeRepository.fire(t)}_gitLocator;async ensureGit(){return null==this._gitLocator&&(this._gitLocator=this.findGit()),this._gitLocator}async findGit(){const e=(0,Ut.UH)();if(!r.D.getAny("git.enabled",null,!0))throw be.Yd.log(e,'Built-in Git is disabled ("git.enabled": false)'),(0,Mt.EZ)(),new UnableToFindGitError;const t=this.getScmGitApi();(async function(){const e=await t;if(null!=e){this._disposables.push(e.onDidCloseRepository((0,Lt.Ds)((e=>{this.container.deactivating||this._onDidCloseRepository.fire({uri:e.rootUri})}),1e3)),e.onDidOpenRepository((e=>this._onDidOpenRepository.fire({uri:e.rootUri}))));for(const t of e.repositories)this._onDidOpenRepository.fire({uri:t.rootUri})}}).call(this);const i=r.D.getAny("git.path")??this.container.storage.getWorkspace("gitPath"),s=(0,l.a)(),n=jt(i),o=t.then((e=>{const t=e?.git.path;if(!t)return n;if(null!=i)if("string"==typeof i){if(t===i)return n}else if(i.includes(t))return n;return jt(t,!1)})),a=await(0,Nt.Yj)(n,o);return setTimeout((()=>{this.container.storage.storeWorkspace("gitPath",a.path)}),1e3),null!=e?e.exitDetails=` ${c.NE.Dot} Git (${a.version}) found in ${"git"===a.path?"PATH":a.path}`:be.Yd.log(e,`Git (${a.version}) found in ${"git"===a.path?"PATH":a.path} ${c.NE.Dot} ${(0,C.qk)(s)} ms`),-1===(0,Ae.qu)((0,Ae.mL)(a.version),(0,Ae.mL)("2.7.2"))&&(be.Yd.log(e,`Git version (${a.version}) is outdated`),(0,Mt.PS)(a.version,"2.7.2")),a}async discoverRepositories(e){if(e.scheme!==c.sN.File)return[];try{await this.ensureGit();const t=r.D.getAny(c.eq.AutoRepositoryDetection)??!0,i=s.workspace.getWorkspaceFolder(e);if(null==i)return[];const n=await this.repositorySearch(i,!1===t||"openEditors"===t?0:void 0);if(!0===t||"subFolders"===t)for(const e of n)this.openScmRepository(e.uri);return n.length>0&&this._trackedPaths.clear(),n}catch(e){if(e instanceof InvalidGitConfigError)(0,Mt.p1)();else if(e instanceof UnableToFindGitError)(0,Mt.Lw)();else{const t=e?.message??"";t&&s.window.showErrorMessage(`Unable to initialize Git; ${t}`)}throw e}}openRepository(e,t,i,r,n){n||this.openScmRepository(t);const o=this.toCanonicalMap.get((0,b.M)(t));return null!=o?[new lt._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e,t,i,r??!s.window.state.focused,n),new lt._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e,o,i,r??!s.window.state.focused,!0)]:[new lt._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e,t,i,r??!s.window.state.focused,n)]}openRepositoryInitWatcher(){const e=s.workspace.createFileSystemWatcher("**/.git",!1,!0,!0);return{onDidCreate:e.onDidCreate,dispose:()=>{e.dispose()}}}_supportedFeatures=new Map;async supports(e){let t=this._supportedFeatures.get(e);return null!=t?t:e!==et.A.Worktrees||(t=await this.git.isAtLeastVersion("2.17.0"),this._supportedFeatures.set(e,t),t)}async visibility(e){const t=await this.getRemotes(e,{sort:!0});if(0===t.length)return[it.q4.Local,void 0];let i=!0;for await(const e of(0,Nt.Wx)(t.map((e=>this.getRemoteVisibility(e)))))if("fulfilled"===e.status){if(e.value[0]===it.q4.Public)return[it.q4.Public,(0,ot.Ym)(e.value[1])];e.value[0]!==it.q4.Local&&(i=!1)}return i?[it.q4.Local,void 0]:[it.q4.Private,(0,ot.Ym)(t)]}async getRemoteVisibility(e){const t=(0,Ut.UH)();switch(e.provider?.id){case"github":case"gitlab":case"bitbucket":case"azure-devops":case"gitea":case"gerrit":case"google-source":{const i=e.provider.url({type:at.J.Repo});if(null==i)return[it.q4.Private,e];try{const s=await(0,Ke.he)(i,{method:"HEAD",agent:(0,Ke.Nx)()});if(s.ok)return[it.q4.Public,e];be.Yd.debug(t,`Response=${s.status}`)}catch(e){be.Yd.error(e,t)}return[it.q4.Private,e]}default:return(0,b.tE)(e.url)?[it.q4.Private,e]:[it.q4.Local,e]}}async repositorySearch(e,t){const i=(0,Ut.UH)();t=t??r.D.get("advanced.repositorySearchDepth",e.uri)??r.D.getAny(c.eq.RepositoryScanMaxDepth,e.uri,1),be.Yd.log(i,`searching (depth=${t})...`);const n=[];let o,a;const l=await this.findRepositoryUri(e.uri,!0);if(null!=l){o=(0,b.AH)(l.fsPath);const t=this.toCanonicalMap.get((0,b.M)(l));null!=t&&(a=(0,b.AH)(t.fsPath)),be.Yd.log(i,`found root repository in '${l.fsPath}'`),n.push(...this.openRepository(e,l,!0))}if(t<=0)return n;const h={...r.D.getAny("files.exclude",e.uri,{}),...r.D.getAny("search.exclude",e.uri,{})},u=[...(0,ye.DZ)(Object.entries(h),(([e,t])=>{if(t)return e.startsWith("**/")?e.substring(3):e}))].reduce(((e,t)=>(e.add(t),e)),new Set);let d;try{d=await this.repositorySearchCore(e.uri.fsPath,t,u)}catch(e){const t=e?.toString()??"";return ti.doesNotExist.test(t)?be.Yd.log(i,"FAILED"+(t?` Error: ${t}`:"")):be.Yd.error(e,i,"FAILED"),n}for(let t of d){t=(0,b.XX)(t);const r=(0,b.AH)(t);if(Je.IJ&&(r===o||null!=a&&r===a)||(0,C.qq)(r,o)||null!=a&&(0,C.qq)(r,a))continue;be.Yd.log(i,`searching in '${t}'...`),be.Yd.debug(i,`normalizedRepoPath=${r}, rootPath=${o}, canonicalRootPath=${a}`);const l=await this.findRepositoryUri(s.Uri.file(t),!0);null!=l&&(be.Yd.log(i,`found repository in '${l.fsPath}'`),n.push(...this.openRepository(e,l,!1)))}return n}repositorySearchCore(e,t,i,s=[]){const r=(0,Ut.UH)();return new Promise(((n,a)=>{(0,o.readdir)(e,{withFileTypes:!0},(async(o,l)=>{if(null!=o)return void a(o);if(0===l.length)return void n(s);let c;for(c of(t--,l))if(".git"===c.name)s.push((0,Pe.resolve)(e,c.name));else if(t>=0&&c.isDirectory()&&!i.has(c.name))try{await this.repositorySearchCore((0,Pe.resolve)(e,c.name),t,i,s)}catch(e){be.Yd.error(e,r,"FAILED")}n(s)}))}))}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return(0,b.M)(t)}getAbsoluteUri(e,t){if("string"==typeof t)if((0,b.tE)(t))t=s.Uri.parse(t,!0);else{if(!(0,b.YP)(t))throw s.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),new Error(`Base path '${t}' must be an absolute path`);t=s.Uri.file(t)}if("string"==typeof e){const i=(0,b.AH)(e);if(!(0,b.YP)(i))return s.Uri.joinPath(t,i)}const i=this.getRelativePath(e,t);return s.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){if(i!==P.Ii){if(!i||(0,u.l3)(i)&&!(0,u.rD)(i)){let i=await this.git.ls_files(e,t);return null!=i?this.getAbsoluteUri(t,e):(i=await this.git.ls_files(e,t,{untracked:!0}),null!=i?this.getAbsoluteUri(t,e):void 0)}return(0,u.rD)(i)?this.getScmGitUri(t,e):this.getRevisionUri(e,t,i)}}getRelativePath(e,t){if("string"==typeof t)if((0,b.tE)(t))t=s.Uri.parse(t,!0);else{if(!(0,b.YP)(t))throw s.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),new Error(`Base path '${t}' must be an absolute path`);t=s.Uri.file(t)}if("string"==typeof e)if((0,b.tE)(e))e=s.Uri.parse(e,!0);else{if(!(0,b.YP)(e))return(0,b.AH)(e);e=s.Uri.file(e)}const i=(0,b.Gf)(t.fsPath,e.fsPath);return(0,b.AH)(i)}getRevisionUri(e,t,i){if((0,u.l3)(i))return(0,u.rD)(i)?this.getScmGitUri(t,e):this.getAbsoluteUri(t,e);47!==(t=(0,b.AH)(this.getAbsoluteUri(t,e).fsPath)).charCodeAt(0)&&(t=`/${t}`);const r={ref:i,repoPath:(0,b.AH)(e)};return s.Uri.from({scheme:c.sN.GitLens,authority:(0,st.Tg)(r),path:t,query:i?JSON.stringify({ref:(0,u.zL)(i)}):void 0})}async getWorkingUri(e,t){let i,s,n=this.getRelativePath(t,e);for(;;){if(i=await this.git.ls_files(e,n),null!=i){n=(0,C.pW)(i,"\n")[0];break}const t=r.D.get("advanced");if(s=await this.git.log__file_recent(e,n,{ordering:t.commitOrdering,similarityThreshold:t.similarityThreshold}),null==s)return;if(i=await this.git.log__file(e,".",s,{argsOrFormat:ee.simpleFormat,fileMode:"simple",filters:["R","C","D"],limit:1,ordering:t.commitOrdering}),null==i||0===i.length)break;const[o,a,l]=ee.parseSimpleRenamed(i,n);if("D"===l&&null!=a)return;if(null==o||null==a)break;n=a}return t=this.getAbsoluteUri(n,e),await Oe(t.fsPath)?t:void 0}async addRemote(e,t,i,s){await this.git.remote__add(e,t,i,s),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async pruneRemote(e,t){await this.git.remote__prune(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async removeRemote(e,t){await this.git.remote__remove(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async applyChangesToWorkingFile(e,t,i){const r=(0,Ut.UH)();if(null==(t=t??e.sha)||null==e.repoPath)return;null==i&&(i=t,t=`${t}^`);const[n,o]=(0,b.uo)(e,e.repoPath);let a;try{a=await this.git.diff(o,n,t,i),await this.git.apply(o,a)}catch(e){const t=e?.toString()??"";if(a&&/patch does not apply/i.test(t)){const t=await s.window.showWarningMessage("Unable to apply changes cleanly. Retry and allow conflicts?",{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==t||"Yes"!==t.title)return;if("Yes"===t.title)try{return void await this.git.apply(o,a,{allowConflicts:!0})}catch(t){e=t}}be.Yd.error(e,r),(0,Mt.W8)("Unable to apply changes")}}async checkout(e,t,i){const s=(0,Ut.UH)();try{await this.git.checkout(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches","status"]})}catch(e){const i=e?.toString()??"";if(/overwritten by checkout/i.test(i))return void(0,Mt.W8)(`Unable to checkout '${t}'. Please commit or stash your changes before switching branches`);be.Yd.error(e,s),(0,Mt.W8)(`Unable to checkout '${t}'`)}}resetCache(e,...t){(0===t.length||t.includes("branches"))&&this._branchesCache.delete(e),(0===t.length||t.includes("contributors"))&&this._contributorsCache.delete(e),(0===t.length||t.includes("stashes"))&&this._stashesCache.delete(e),(0===t.length||t.includes("status"))&&(this._mergeStatusCache.delete(e),this._rebaseStatusCache.delete(e)),(0===t.length||t.includes("tags"))&&this._tagsCache.delete(e),0===t.length&&(this._trackedPaths.delete(e),this._repoInfoCache.delete(e))}resetCaches(...e){(0===e.length||e.includes("branches"))&&this._branchesCache.clear(),(0===e.length||e.includes("contributors"))&&this._contributorsCache.clear(),(0===e.length||e.includes("stashes"))&&this._stashesCache.clear(),(0===e.length||e.includes("status"))&&(this._mergeStatusCache.clear(),this._rebaseStatusCache.clear()),(0===e.length||e.includes("tags"))&&this._tagsCache.clear(),0===e.length&&(this._trackedPaths.clear(),this._repoInfoCache.clear())}async excludeIgnoredUris(e,t){const i=new Map(t.map((e=>[(0,b.AH)(e.fsPath),e]))),s=await this.git.check_ignore(e,...i.keys());if(null==s)return t;const r=s.split("\0").filter((e=>Boolean(e)));if(0===r.length)return t;for(const e of r)i.delete(e);return[...i.values()]}async fetch(e,t){const{branch:i,...s}=t??{};if((0,u.UR)(i)){const s=this.container.git.getRepository(e),r=await(s?.getBranch(i?.name));if(!r?.remote&&null==r?.upstream)return;await this.git.fetch(e,{branch:r.getNameWithoutRemote(),remote:r.getRemoteName(),upstream:r.getTrackingWithoutRemote(),pull:t?.pull})}else await this.git.fetch(e,s);this.container.events.fire("git:cache:reset",{repoPath:e})}toCanonicalMap=new Map;fromCanonicalMap=new Map;async findRepositoryUri(e,t){const i=(0,Ut.UH)();let r;try{if(null==t){t=((await s.workspace.fs.stat(e)).type&s.FileType.Directory)===s.FileType.Directory}if(t||(e=s.Uri.joinPath(e,"..")),r=await this.git.rev_parse__show_toplevel(e.fsPath),!r)return;const n=s.Uri.file(r);if(Je.ED&&0!==n.authority.length&&0===e.authority.length){const t=ii.exec(e.path);if(null!=t){const[,e]=t;try{const t=await new Promise((t=>o.realpath.native(`${e}:\\`,{encoding:"utf8"},((e,i)=>t(null!=e?void 0:i)))));if(null!=t)return r=(0,b.AH)(n.fsPath.replace(t,`${e.toLowerCase()}:${t.endsWith("\\")?"\\":""}`)),s.Uri.file(r)}catch{}}return s.Uri.file((0,b.AH)(e.fsPath))}if(null==this.toCanonicalMap.get(r)){let t;[r,t]=await new Promise((t=>{(0,o.realpath)(e.fsPath,{encoding:"utf8"},((s,n)=>{if(null!=s)return be.Yd.debug(i,`fs.realpath failed; repoPath=${r}`),void t([r,void 0]);if((0,C.qq)(e.fsPath,n))return be.Yd.debug(i,`No symlink detected; repoPath=${r}`),void t([r,void 0]);let o=(0,b.AH)(n);const a=(0,b.B9)(`${r}/`,`${o}/`,"/"),l=(0,b.AH)(e.fsPath);o=a<o.length-1?l.substring(0,l.length-(o.length-a)):l,be.Yd.debug(i,`Symlink detected; repoPath=${r}, path=${e.fsPath}, resolvedPath=${n}`),t([r,o])}))})),null!=t&&(this.toCanonicalMap.set(r,s.Uri.file(t)),this.fromCanonicalMap.set(t,s.Uri.file(r)))}return r?s.Uri.file(r):void 0}catch(e){return void be.Yd.error(e,i)}}getAheadBehindCommitCount(e,t){return this.git.rev_list__left_right(e,t)}async getBlame(e,t){const i=(0,Ut.UH)();if(t?.isDirty)return this.getBlameContents(e,t.getText());let s="blame";null!=e.sha&&(s+=`:${e.sha}`);const r=await this.container.tracker.getOrAdd(t??e);if(this.useCaching){if(null!=r.state){const e=r.state.getBlame(s);if(null!=e)return be.Yd.debug(i,`Cache hit: '${s}'`),e.item}be.Yd.debug(i,`Cache miss: '${s}'`),null==r.state&&(r.state=new Vt.p2)}const n=this.getBlameCore(e,r,s,i);if(null!=r.state){be.Yd.debug(i,`Cache add: '${s}'`);const e={item:n};r.state.setBlame(s,e)}return n}async getBlameCore(e,t,i,s){const n=await this.isTrackedPrivate(e);if(null==n)return be.Yd.log(s,`Skipping blame; '${e.fsPath}' is not tracked`),Xt;const[o,a]=n;try{const t=await this.git.blame(a,o,e.sha,{args:r.D.get("advanced.blame.customArguments"),ignoreWhitespace:r.D.get("blame.ignoreWhitespace")});return pt.parse(this.container,t,a,await this.getCurrentUser(a))}catch(e){if(null!=t.state){const r=e?.toString()??"";be.Yd.debug(s,`Cache replace (with empty promise): '${i}'`);const n={item:Xt,errorMessage:r};return t.state.setBlame(i,n),t.setBlameFailure(),Xt}return}}async getBlameContents(e,t){const i=(0,Ut.UH)(),s=`blame:${(0,ze.FB)(t)}`,r=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=r.state){const e=r.state.getBlame(s);if(null!=e)return be.Yd.debug(i,`Cache hit: ${s}`),e.item}be.Yd.debug(i,`Cache miss: ${s}`),null==r.state&&(r.state=new Vt.p2)}const n=this.getBlameContentsCore(e,t,r,s,i);if(null!=r.state){be.Yd.debug(i,`Cache add: '${s}'`);const e={item:n};r.state.setBlame(s,e)}return n}async getBlameContentsCore(e,t,i,s,n){const o=await this.isTrackedPrivate(e);if(null==o)return be.Yd.log(n,`Skipping blame; '${e.fsPath}' is not tracked`),Xt;const[a,l]=o;try{const e=await this.git.blame__contents(l,a,t,{args:r.D.get("advanced.blame.customArguments"),correlationKey:`:${s}`,ignoreWhitespace:r.D.get("blame.ignoreWhitespace")});return pt.parse(this.container,e,l,await this.getCurrentUser(l))}catch(e){if(null!=i.state){const t=e?.toString()??"";be.Yd.debug(n,`Cache replace (with empty promise): '${s}'`);const r={item:Xt,errorMessage:t};return i.state.setBlame(s,r),i.setBlameFailure(),Xt}return}}async getBlameForLine(e,t,i,s){if(i?.isDirty)return this.getBlameForLineContents(e,t,i.getText(),s);if(!s?.forceSingleLine&&this.useCaching){const s=await this.getBlame(e,i);if(null==s)return;let r=s.lines[t];if(null==r){if(s.lines.length!==t)return;r=s.lines[t-1]}const n=s.commits.get(r.sha);if(null==n)return;return{author:{...s.authors.get(n.author.name),lineCount:n.lines.length},commit:n,line:r}}const n=t+1,[o,a]=(0,b.uo)(e,e.repoPath);try{const i=await this.git.blame(a,o,e.sha,{args:r.D.get("advanced.blame.customArguments"),ignoreWhitespace:r.D.get("blame.ignoreWhitespace"),startLine:n,endLine:n}),s=pt.parse(this.container,i,a,await this.getCurrentUser(a));if(null==s)return;return{author:(0,ye.Ps)(s.authors.values()),commit:(0,ye.Ps)(s.commits.values()),line:s.lines[t]}}catch{return}}async getBlameForLineContents(e,t,i,s){if(!s?.forceSingleLine&&this.useCaching){const s=await this.getBlameContents(e,i);if(null==s)return;let r=s.lines[t];if(null==r){if(s.lines.length!==t)return;r=s.lines[t-1]}const n=s.commits.get(r.sha);if(null==n)return;return{author:{...s.authors.get(n.author.name),lineCount:n.lines.length},commit:n,line:r}}const n=t+1,[o,a]=(0,b.uo)(e,e.repoPath);try{const e=await this.git.blame__contents(a,o,i,{args:r.D.get("advanced.blame.customArguments"),ignoreWhitespace:r.D.get("blame.ignoreWhitespace"),startLine:n,endLine:n}),s=pt.parse(this.container,e,a,await this.getCurrentUser(a));if(null==s)return;return{author:(0,ye.Ps)(s.authors.values()),commit:(0,ye.Ps)(s.commits.values()),line:s.lines[t]}}catch{return}}async getBlameForRange(e,t){const i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){const s=await this.getBlameContents(e,i);if(null!=s)return this.getBlameRange(s,e,t)}getBlameRange(e,t,i){if(0===e.lines.length)return{allLines:e.lines,...e};if(0===i.start.line&&i.end.line===e.lines.length-1)return{allLines:e.lines,...e};const s=e.lines.slice(i.start.line,i.end.line+1),r=new Set(s.map((e=>e.sha))),n=i.start.line+1,o=i.end.line+1,a=new Map,l=new Map;for(const t of e.commits.values()){if(!r.has(t.sha))continue;const e=t.with({lines:t.lines.filter((e=>e.line>=n&&e.line<=o))});l.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}const c=new Map([...a.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount)));return{repoPath:t.repoPath,authors:c,commits:l,lines:s,allLines:e.lines}}async getBranch(e){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});if(null!=t)return t;const i=r.D.get("advanced.commitOrdering"),s=await this.git.rev_parse__currentBranch(e,i);if(null==s)return;const[n,o]=s[0].split("\n");if((0,p.uz)(n)){const[r,a]=await Promise.all([this.getRebaseStatus(e),this.git.log__recent_committerdate(e,i)]);t=new p.XI(e,r?.incoming.name??n,!1,!0,null!=a?new Date(1e3*Number(a)):void 0,s[1],o?{name:o,missing:!1}:void 0,void 0,void 0,void 0,null!=r)}return t}async getBranches(e,t){if(null==e)return ei;let i=this.useCaching?this._branchesCache.get(e):void 0;if(null==i){async function n(){try{const t=await this.git.for_each_ref__branch(e,{all:!0});if(null==t||0===t.length){let t;const i=r.D.get("advanced.commitOrdering"),s=await this.git.rev_parse__currentBranch(e,i);if(null!=s){const[r,n]=s[0].split("\n"),[o,a]=await Promise.all([(0,p.uz)(r)?this.getRebaseStatus(e):void 0,this.git.log__recent_committerdate(e,i)]);t=new p.XI(e,o?.incoming.name??r,!1,!0,null!=a?new Date(1e3*Number(a)):void 0,s[1],{name:n,missing:!1},void 0,void 0,void 0,null!=o)}return null!=t?{values:[t]}:ei}return{values:GitBranchParser.parse(t,e)}}catch(t){return this._branchesCache.delete(e),ei}}i=n.call(this),this.useCaching&&null==t?.cursor&&this._branchesCache.set(e,i)}let s=await i;return null!=t?.filter&&(s={...s,values:s.values.filter(t.filter)}),t?.sort&&(0,p.YF)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getChangedFilesCount(e,t){const i=await this.git.diff__shortstat(e,t);if(i)return GitDiffParser.parseShortStat(i)}async getCommit(e,t){const i=await this.getLog(e,{limit:2,ref:t});if(null!=i)return i.commits.get(t)??(0,ye.Ps)(i.commits.values())}async getCommitBranches(e,t,i){if(i?.branch){const s=await this.git.branch__containsOrPointsAt(e,t,{mode:"contains",name:i.branch});return s?[s?.trim()]:[]}const s=await this.git.branch__containsOrPointsAt(e,t,i);return s?(0,y.DZ)(s.split("\n"),(e=>e.trim()||void 0)):[]}getCommitCount(e,t){return this.git.rev_list__count(e,t)}async getCommitForFile(e,t,i){const s=(0,Ut.UH)(),[r,n]=(0,b.uo)(t,e);try{const e=await this.getLogForFile(n,r,{limit:2,ref:i?.ref,range:i?.range});if(null==e)return;let t;if(i?.ref){if(null==e.commits.get(i.ref)&&!i?.firstIfNotFound&&((0,u.D3)(i.ref)||(0,u.l3)(i.ref)))return}return t??(0,ye.Ps)(e.commits.values())}catch(e){return void be.Yd.error(e,s)}}async getCommitsForGraph(e,t,i){const s=(n=i?.include?.stats,n?(null==Y&&(Y=Z({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),Y):(null==q&&(q=K({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),q));var n;const o=(null==j&&(j=J("%H")),j),a=i?.limit??r.D.get("graph.defaultItemLimit")??5e3,l=r.D.get("graph.pageItemLimit")??1e3,c=r.D.get("graph.commitOrdering",void 0,"date"),[h,d,m,g,f]=await Promise.allSettled([this.git.log2(e,void 0,...o.arguments,"-n1",i?.ref??"HEAD"),this.getStash(e),this.getBranches(e),this.getRemotes(e),this.getCurrentUser(e)]),w=(0,Nt.Sb)(m)?.values,v=null!=w?new Map(w.map((e=>[e.name,e]))):new Map,y=w?.find((e=>e.current)),b=y?.upstream?.name,C=(0,Nt.Sb)(f),A=(0,Nt.Sb)(g),P=null!=A?new Map(A.map((e=>[e.name,e]))):new Map,D=(0,ye.Ps)(o.parse((0,Nt.Sb)(h)??"")),k=new Map;let R;const F=(0,Nt.Sb)(d);null!=F&&0!==F.commits.size&&(R=(0,ye.v_)((0,ye.UI)(F.commits.values(),(e=>e.sha.substring(0,9))),"\n"));const $=r.D.get("graph.avatars",void 0,!0),T=new Map,x=new Set,I=new Set,_=new Set;let O=0,B=0;return async function r(n,o,a){let h;B++;let d,m=n;for(;;){const t=[...s.arguments,`--${c}-order`,"--all"];let r;if(a?.skip&&t.push(`--skip=${a.skip}`),o)[r,n]=await this.git.logStreamTo(e,o,n,R?{stdin:R}:void 0,...t);else if(t.push(`-n${m+1}`),r=await this.git.log2(e,R?{stdin:R}:void 0,...t),a&&!Ye(a.sha).test(r)){if(d===r.length)return{repoPath:e,avatars:T,ids:x,includes:i?.include,branches:v,remotes:P,downstreams:k,rows:[]};d=r.length,m=2*(0===m?l:m),a.skip-=Math.floor(.1*a.skip);continue}if(!r)return{repoPath:e,avatars:T,ids:x,includes:i?.include,branches:v,remotes:P,downstreams:k,rows:[]};h=r,0!==n&&(n=m);break}const g=[];let f,w,y,A,D,E,M,W,L;const U=new Map;let N,G,H,V,Q,q,Y,j,z,K,J,Z,X,ee,te,ie=!1,se=!1,re=0;const ne=s.parse(h);for(const i of ne)if(re++,!x.has(i.sha)&&(O++,!_.has(i.sha))){if(x.add(i.sha),G=[],V=[],q=[],M={},ie=!1,i.tips){for(te of(U.clear(),i.tips.split(", ")))if("refs/stash"!==te)if(te.startsWith("tag: "))ee=te.substring(5),X=(0,pe.YU)(e,ee),E={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,u.xB)(ee,e,{id:X,refType:"tag",name:ee})}},Q={id:X,name:ee,annotated:!0,context:(0,Ht.BH)(E)},q.push(Q);else if(ie=te.startsWith("HEAD"),ie&&(I.add(i.sha),"HEAD"!==te&&(te=te.substring(8))),J=(0,p.Lo)(te),J&&(z=P.get(J),null!=z)){if(D=(0,p.S3)(te),"HEAD"===D)continue;K=(0,p.Vx)(e,!0,te),w=(($?z.provider?.avatarUri:void 0)??(0,ot.dM)(this.container,z,t))?.toString(!0),E={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,u.xB)(te,e,{id:K,refType:"branch",name:te,remote:!0,upstream:{name:z.name,missing:!1}})}},H={id:K,name:D,owner:z.name,url:z.url,avatarUrl:w,context:(0,Ht.BH)(E),current:te===b},V.push(H),W=U.get(D),null==W&&(W={remotes:[]},U.set(D,W)),null==W.remotes&&(W.remotes=[]),W.remotes.push(E.webviewItemValue.ref)}else{if(y=v.get(te),A=y?.id??(0,p.Vx)(e,!1,te),E={webviewItem:`gitlens:branch${ie?"+current":""}${null!=y?.upstream?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,u.xB)(te,e,{id:A,refType:"branch",name:te,remote:!1,upstream:y?.upstream})}},N={id:A,name:te,isCurrentHead:ie,context:(0,Ht.BH)(E),upstream:y?.upstream?.name},G.push(N),null!=y?.upstream?.name){let e=k.get(y.upstream.name);null==e&&(e=[],k.set(y.upstream.name,e)),e.push(te)}W=U.get(te),null==W&&(W={},U.set(te,W)),ie&&(W.head=!0),W.local=E.webviewItemValue.ref}for([L,W]of U)null!=W.remotes&&(null!=W.local&&W.remotes.length>0||W.remotes.length>1)&&(null==M.refGroups&&(M.refGroups={}),M.refGroups[L]=(0,Ht.BH)({webviewItemGroup:"gitlens:refGroup"+(W.head?"+current":""),webviewItemGroupValue:{type:"refGroup",refs:null!=W.local?[W.local,...W.remotes]:W.remotes}}))}if(Z=F?.commits.get(i.sha),j=i.parents?i.parents.split(" "):[],I.has(i.sha))for(Y of j)I.add(Y);null!=Z&&j.length>1&&(_.add(j[1]),_.add(j[2]),j.splice(1,2)),null!=Z||T.has(i.authorEmail)||(f=(0,Ze.x4)(i.authorEmail),null!=f&&T.set(i.authorEmail,f.toString(!0))),se=(0,S.o)(C,i.author,i.authorEmail),null!=Z?M.row=(0,Ht.BH)({webviewItem:"gitlens:stash",webviewItemValue:{type:"stash",ref:(0,u.xB)(i.sha,e,{refType:"stash",name:Z.name,number:Z.number})}}):(M.row=(0,Ht.BH)({webviewItem:`gitlens:commit${ie?"+HEAD":""}${I.has(i.sha)?"+current":""}`,webviewItemValue:{type:"commit",ref:(0,u.xB)(i.sha,e,{refType:"revision",message:i.message})}}),M.avatar=(0,Ht.BH)({webviewItem:"gitlens:contributor"+(se?"+current":""),webviewItemValue:{type:"contributor",repoPath:e,name:i.author,email:i.authorEmail,current:se}})),g.push({sha:i.sha,parents:j,author:se?"You":i.author,email:i.authorEmail,date:1e3*Number("author-date"===c?i.authorDate:i.committerDate),message:(0,Xe.X)(i.message.trim()),type:null!=Z?nt.e.Stash:j.length>1?nt.e.MergeCommit:nt.e.Commit,heads:G,remotes:V,tags:q,contexts:M,stats:i.stats})}const oe=a?.sha,ae=(0,ye.Z$)(x);return a=null!=ae?{sha:ae,skip:O-B}:void 0,{repoPath:e,avatars:T,ids:x,includes:i?.include,skippedIds:_,branches:v,remotes:P,downstreams:k,rows:g,id:o,paging:{limit:0===n?re:n,startingCursor:oe,hasMore:0!==n&&re>n},more:async(e,t)=>r.call(this,e,t,a)}}.call(this,a,D)}getConfig(e,t){return this.git.config__get(t,e)}setConfig(e,t,i){return this.git.config__set(t,i,e)}async getContributors(e,t){if(null==e)return[];const i=t?.stats?`stats|${e}`:e;let s=this.useCaching?this._contributorsCache.get(i):void 0;if(null==s){async function r(){try{e=(0,b.AH)(e);const i=await this.getCurrentUser(e),r=(s=t?.stats,s?(null==Q&&(Q=Z({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),Q):(null==V&&(V=K({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),V)),n=await this.git.log(e,t?.ref,{all:t?.all,argsOrFormat:r.arguments}),o=new Map,a=r.parse(n);for(const t of a){const s=`${t.author}|${t.email}`;let r=o.get(s);if(null==r)r=new rt.V(e,t.author,t.email,1,new Date(1e3*Number(t.date)),(0,S.o)(i,t.author,t.email),t.stats),o.set(s,r);else{r.count++;const e=new Date(1e3*Number(t.date));e>r.date&&(r.date=e)}}return[...o.values()]}catch(e){return this._contributorsCache.delete(i),[]}var s}s=r.call(this),this.useCaching&&this._contributorsCache.set(i,s)}return s}async getCurrentUser(e){if(!e)return;const t=(0,Ut.UH)(),i=this._repoInfoCache.get(e);let s=i?.user;if(null!=s)return s;if(null!==s){s={name:void 0,email:void 0};try{const t=await this.git.config__get_regex("^user\\.",e,{local:!0});if(t){let e,i,r;for(;;){if(r=si.exec(t),null==r)break;[,e,i]=r,s[e]=` ${i}`.substr(1)}}else{if(s.name=a.env.GIT_AUTHOR_NAME||a.env.GIT_COMMITTER_NAME||(0,je.userInfo)()?.username||void 0,!s.name)return void this._repoInfoCache.set(e,{...i,user:null});s.email=a.env.GIT_AUTHOR_EMAIL||a.env.GIT_COMMITTER_EMAIL||a.env.EMAIL||`${s.name}@${(0,je.hostname)()}`}const r=`${s.name} <${s.email}>`,n=await this.git.check_mailmap(e,r);if(null!=n&&0!==n.length&&r!==n){const e=ri.exec(n);null!=e&&([,s.name,s.email]=e)}return this._repoInfoCache.set(e,{...i,user:s}),s}catch(s){return be.Yd.error(s,t),void this._repoInfoCache.set(e,{...i,user:null})}}}async getDefaultBranchName(e,t){if(null!=e){if(!t)try{const t=await this.git.symbolic_ref(e,"HEAD");if(null!=t)return t.trim()}catch{}t=t??"origin";try{const i=await this.git.ls_remote__HEAD(e,t);if(null==i)return;const s=/ref:\s(\S+)\s+HEAD/m.exec(i);if(null==s)return;const[,r]=s;return r.substr("refs/heads/".length)}catch{return}}}async getDiff(e,t,i,s){let r;if(r=t===P.CL?null==i?await this.git.diff2(e,void 0,"-U3"):await this.git.diff2(e,void 0,"-U3",i):t===P.pw?null==i?await this.git.diff2(e,void 0,"-U3","--staged"):await this.git.diff2(e,void 0,"-U3","--staged",i):null==i?await this.git.diff2(e,void 0,"-U3",`${t}^`,t):await this.git.diff2(e,void 0,"-U3",t,i),!r)return;return GitDiffParser.parse(r,s?.includeRawDiff)}async getDiffForFile(e,t,i){const s=(0,Ut.UH)();let r="diff";null!=t&&(r+=`:${t}`),null!=i&&(r+=`:${i}`);const n=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=n.state){const e=n.state.getDiff(r);if(null!=e)return be.Yd.debug(s,`Cache hit: '${r}'`),e.item}be.Yd.debug(s,`Cache miss: '${r}'`),null==n.state&&(n.state=new Vt.p2)}const o=await ai(e),a=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:o},n,r,s);if(null!=n.state){be.Yd.debug(s,`Cache add: '${r}'`);const e={item:a};n.state.setDiff(r,e)}return a}async getDiffForFileCore(e,t,i,s,n,o,a,l){const[c,h]=(0,b.uo)(t,e);try{const e=await this.git.diff(h,c,i,s,{...n,filters:["M"],linesOfContext:0,renames:!0,similarityThreshold:r.D.get("advanced.similarityThreshold")});return GitDiffParser.parse(e)}catch(e){if(null!=o.state){const t=e?.toString()??"";be.Yd.debug(l,`Cache replace (with empty promise): '${a}'`);const i={item:Xt,errorMessage:t};return o.state.setDiff(a,i),Xt}return}}async getDiffForFileContents(e,t,i){const s=(0,Ut.UH)(),r=`diff:${(0,ze.FB)(i)}`,n=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=n.state){const e=n.state.getDiff(r);if(null!=e)return be.Yd.debug(s,`Cache hit: ${r}`),e.item}be.Yd.debug(s,`Cache miss: ${r}`),null==n.state&&(n.state=new Vt.p2)}const o=await ai(e),a=this.getDiffForFileContentsCore(e.repoPath,e.fsPath,t,i,{encoding:o},n,r,s);if(null!=n.state){be.Yd.debug(s,`Cache add: '${r}'`);const e={item:a};n.state.setDiff(r,e)}return a}async getDiffForFileContentsCore(e,t,i,s,n,o,a,l){const[c,h]=(0,b.uo)(t,e);try{const e=await this.git.diff__contents(h,c,i,s,{...n,filters:["M"],similarityThreshold:r.D.get("advanced.similarityThreshold")});return GitDiffParser.parse(e)}catch(e){if(null!=o.state){const t=e?.toString()??"";be.Yd.debug(l,`Cache replace (with empty promise): '${a}'`);const i={item:Xt,errorMessage:t};return o.state.setDiff(a,i),Xt}return}}async getDiffForLine(e,t,i,s){try{const r=await this.getDiffForFile(e,i,s);if(null==r)return;const n=t+1,o=r.hunks.find((e=>e.current.position.start<=n&&e.current.position.end>=n));if(null==o)return;return o.lines[n-Math.min(o.current.position.start,o.previous.position.start)]}catch(e){return}}async getDiffStatus(e,t,i,s){try{const n=await this.git.diff__name_status(e,t,i,{similarityThreshold:r.D.get("advanced.similarityThreshold"),...s});if(!n)return;const o=GitDiffParser.parseNameStatus(n,e);return null==o||0===o.length?void 0:o}catch(e){return}}async getFileStatusForCommit(e,t,i){if(i===P.Ii||(0,u.l3)(i))return;const[s,r]=(0,b.uo)(t,e),n=await this.git.show__name_status(r,s,i);if(!n)return;const o=GitDiffParser.parseNameStatus(n,e);return null!=o&&0!==o.length?o[0]:void 0}async getGitDir(e){const t=this._repoInfoCache.get(e);if(null!=t?.gitDir)return t.gitDir;const i=await this.git.rev_parse__git_dir(e);let r;return r=null!=i?{uri:s.Uri.file(i.path),commonUri:null!=i.commonPath?s.Uri.file(i.commonPath):void 0}:{uri:this.getAbsoluteUri(".git",e)},this._repoInfoCache.set(e,{...t,gitDir:r}),r}async getLastFetchedTimestamp(e){try{const t=await this.getGitDir(e),i=await s.workspace.fs.stat(s.Uri.joinPath(t.uri,"FETCH_HEAD"));if(i.size>0)return i.mtime}catch{}}async getLog(e,t){const i=(0,Ut.UH)();try{const i=t?.limit??r.D.get("advanced.maxListItems")??0,s=null==t?.merges||t.merges,n=t?.ordering??r.D.get("advanced.commitOrdering"),o=r.D.get("advanced.similarityThreshold"),a=[`--format=${t?.all?ee.allFormat:ee.defaultFormat}`,"-M"+(null==o?"":`${o}%`),"-m"];let l;null!==t?.status&&a.push(`--${t?.status??"name-status"}`,"--full-history"),t?.all&&a.push("--all"),s||a.push("--first-parent"),n&&a.push(`--${n}-order`),t?.authors?.length&&a.push("--use-mailmap",...t.authors.map((e=>`--author=^${e.name} <${e.email}>$`))),t?.since&&(l=!0,a.push(`--since="${t.since}"`)),t?.until&&(l=!0,a.push(`--until="${t.until}"`)),t?.extraArgs?.length&&(t.extraArgs.some((e=>e.startsWith("-n")||e.startsWith("--until=")||e.startsWith("--since=")))&&(l=!0),a.push(...t.extraArgs)),i&&(l=void 0,a.push(`-n${i+1}`));const c=await this.git.log2(e,{configs:Ue,ref:t?.ref,stdin:t?.stdin},...a),h=ee.parse(this.container,c,H.Log,e,void 0,t?.ref,await this.getCurrentUser(e),i,!1,void 0,l);if(null!=h&&(h.query=i=>this.getLog(e,{...t,limit:i}),h.hasMore)){let e;if(null!=t){let i;({extraArgs:i,...e}=t)}h.more=this.getLogMoreFn(h,e)}return h}catch(e){return void be.Yd.error(e,i)}}async getLogRefsOnly(e,t){const i=(0,Ut.UH)(),s=t?.limit??r.D.get("advanced.maxListItems")??0;try{const i=J("%H"),n=await this.git.log(e,t?.ref,{authors:t?.authors,argsOrFormat:i.arguments,limit:s,merges:null==t?.merges||t.merges,similarityThreshold:r.D.get("advanced.similarityThreshold"),since:t?.since,ordering:t?.ordering??r.D.get("advanced.commitOrdering")});return new Set(i.parse(n))}catch(e){return void be.Yd.error(e,i)}}getLogMoreFn(e,t){return async i=>{const s=null!=i&&"object"==typeof i?i.until:void 0;let n="number"==typeof i?i:void 0;if(s&&(0,ye.G)(e.commits.values(),(e=>e.ref===s)))return e;if(n=n??r.D.get("advanced.maxSearchItems")??0,(0,u.yk)(e.sha)){const i=await this.getLog(e.repoPath,{...t,limit:0===n?0:(t?.limit??0)+n});return i??{...e,hasMore:!1,more:void 0}}const o=(0,ye.Z$)(e.commits.values()),a=o?.ref;let l,c;if(t?.all){const e=o?.committer.date;l=null!=e?Math.ceil(e.getTime()/1e3)+1:void 0}let h=null==s?n:0;for(;;){const i=await this.getLog(e.repoPath,{...t,limit:h,...l?{until:l,extraArgs:["--boundary"]}:{ref:null==s?`${a}^`:`${s}^..${a}^`}});if(null==i)return{...e,hasMore:!1,more:void 0};const r=e.commits.size,o=new Map([...e.commits,...i.commits]);if(r===o.size&&0!==h){if(c===i.commits.size)return{...e,hasMore:!1,more:void 0};c=i.commits.size,h*=2;continue}null!=l&&null!=a&&i.commits.has(a);const u={repoPath:e.repoPath,commits:o,sha:e.sha,range:void 0,count:o.size,limit:null==s?(e.limit??0)+n:void 0,hasMore:null!=s||i.hasMore,startingCursor:(0,ye.Z$)(e.commits)?.[0],endingCursor:i.endingCursor,pagedCommits:()=>{for(const t of e.commits.keys())i.commits.delete(t);return i.commits},query:i=>this.getLog(e.repoPath,{...t,limit:i})};return u.hasMore&&(u.more=this.getLogMoreFn(u,t)),u}}}async getLogForFile(e,t,i){if(null==e)return;const s=(0,Ut.UH)(),n=this.getRelativePath(t,e);if(null!=e&&e===n)throw new Error(`File name cannot match the repository path; path=${n}`);null==(i={reverse:!1,...i}).renames&&(i.renames=r.D.get("advanced.fileHistoryFollowsRenames"));let o="log";null!=i.ref&&(o+=`:${i.ref}`),null==i.all&&(i.all=r.D.get("advanced.fileHistoryShowAllBranches")),i.all&&(o+=":all"),i.limit=i.limit??r.D.get("advanced.maxListItems")??0,i.limit&&(o+=`:n${i.limit}`),i.renames&&(o+=":follow"),i.reverse&&(o+=":reverse"),i.since&&(o+=`:since=${i.since}`),i.skip&&(o+=`:skip${i.skip}`);const a=await this.container.tracker.getOrAdd(st.YY.fromFile(n,e,i.ref));if(!i.force&&this.useCaching&&null==i.range){if(null!=a.state){const r=a.state.getLog(o);if(null!=r)return be.Yd.debug(s,`Cache hit: '${o}'`),r.item;if(null!=i.ref||null!=i.limit){const r=a.state.getLog(`log${i.renames?":follow":""}${i.reverse?":reverse":""}`);if(null!=r){if(null==i.ref)return be.Yd.debug(s,`Cache hit: ~'${o}'`),r.item;be.Yd.debug(s,`Cache ?: '${o}'`);let n=await r.item;if(null!=n&&!n.hasMore&&n.commits.has(i.ref)){be.Yd.debug(s,`Cache hit: '${o}'`);let r=!0,a=0;const l=new Map((0,ye.DZ)(n.commits.entries(),(([e,t])=>{if(r){if(e!==i?.ref)return;r=!1}if(a++,!(null!=i?.limit&&a>i.limit))return[e,t]}))),c={...i};return n={...n,limit:i.limit,count:l.size,commits:l,query:i=>this.getLogForFile(e,t,{...c,limit:i})},n}}}}be.Yd.debug(s,`Cache miss: '${o}'`),null==a.state&&(a.state=new Vt.p2)}const l=this.getLogForFileCore(e,n,i,a,o,s);if(null!=a.state&&null==i.range){be.Yd.debug(s,`Cache add: '${o}'`);const e={item:l};a.state.setLog(o,e)}return l}async getLogForFileCore(e,t,{ref:i,range:n,...o},a,l,c){const h=await this.isTrackedPrivate(t,e,i);if(null==h)return be.Yd.log(c,`Skipping blame; '${t}' is not tracked`),Xt;const[u,d]=h;try{null!=n&&n.start.line>n.end.line&&(n=new s.Range(n.end,n.start));const a=await this.git.log__file(d,u,i,{ordering:r.D.get("advanced.commitOrdering"),...o,firstParent:o.renames,startLine:null==n?void 0:n.start.line+1,endLine:null==n?void 0:n.end.line+1}),l=ee.parse(this.container,a,(0,b.Mh)(u)?H.Log:H.LogFile,d,u,i,await this.getCurrentUser(d),o.limit,o.reverse??!1,n);if(null!=l){const s={...o,ref:i,range:n};l.query=i=>this.getLogForFile(e,t,{...s,limit:i}),l.hasMore&&(l.more=this.getLogForFileMoreFn(l,t,s))}return l}catch(e){if(null!=a.state&&null==n&&!o.reverse){const t=e?.toString()??"";be.Yd.debug(c,`Cache replace (with empty promise): '${l}'`);const i={item:Xt,errorMessage:t};return a.state.setLog(l,i),Xt}return}}getLogForFileMoreFn(e,t,i){return async s=>{const n=null!=s&&"object"==typeof s?s.until:void 0;let o="number"==typeof s?s:void 0;if(n&&(0,ye.G)(e.commits.values(),(e=>e.ref===n)))return e;o=o??r.D.get("advanced.maxSearchItems")??0;const a=(0,ye.Z$)(e.commits.values())?.ref,l=await this.getLogForFile(e.repoPath,t,{...i,limit:null==n?o:0,ref:i.all?void 0:null==n?`${a}^`:`${n}^..${a}^`,skip:i.all?e.count:void 0});if(null==l)return{...e,hasMore:!1,more:void 0};const c=new Map([...e.commits,...l.commits]),h={repoPath:e.repoPath,commits:c,sha:e.sha,range:e.range,count:c.size,limit:null==n?(e.limit??0)+o:void 0,hasMore:null!=n||l.hasMore,query:s=>this.getLogForFile(e.repoPath,t,{...i,limit:s})};if(i.renames){const e=(0,ye.sE)(l.commits.values(),(e=>Boolean(e.file?.originalPath)&&e.file?.originalPath!==t));t=e?.file?.originalPath??t}return h.hasMore&&(h.more=this.getLogForFileMoreFn(h,t,i)),h}}async getMergeBase(e,t,i,s){const r=(0,Ut.UH)();try{const r=await this.git.merge_base(e,t,i,s);if(null==r)return;return r.split("\n")[0].trim()||void 0}catch(e){return void be.Yd.error(e,r)}}async getMergeStatus(e){let t=this.useCaching?this._mergeStatusCache.get(e):void 0;if(void 0===t){const i=await this.git.rev_parse__verify(e,"MERGE_HEAD");if(null!=i){const[s,r,n]=await Promise.all([this.getBranch(e),this.getMergeBase(e,"MERGE_HEAD","HEAD"),this.getCommitBranches(e,"MERGE_HEAD",{mode:"pointsAt"})]);t={type:"merge",repoPath:e,mergeBase:r,HEAD:(0,u.xB)(i,e,{refType:"revision"}),current:(0,u.LB)(s),incoming:1===n?.length?(0,u.xB)(n[0],e,{refType:"branch",name:n[0],remote:!1}):void 0}}this.useCaching&&this._mergeStatusCache.set(e,t??null)}return t??void 0}async getRebaseStatus(e){let t=this.useCaching?this._rebaseStatusCache.get(e):void 0;if(void 0===t){const i=await this.git.rev_parse__verify(e,"REBASE_HEAD");if(null!=i){let[s,r,n,o,a,l]=await Promise.all([this.getMergeBase(e,"REBASE_HEAD","HEAD"),this.git.readDotGitFile(e,["rebase-merge","head-name"]),this.git.readDotGitFile(e,["rebase-merge","onto"]),this.git.readDotGitFile(e,["rebase-merge","msgnum"],{numeric:!0}),this.git.readDotGitFile(e,["rebase-merge","message"],{throw:!0}).catch((()=>this.git.readDotGitFile(e,["rebase-merge","message-squashed"]))),this.git.readDotGitFile(e,["rebase-merge","end"],{numeric:!0})]);if(null==r||null==n)return;r.startsWith("refs/heads/")&&(r=r.substr(11).trim());const c=await this.getCommitBranches(e,n,{mode:"pointsAt"});let h;for(const e of c)if(!e.startsWith("(no branch, rebasing")){h=e;break}t={type:"rebase",repoPath:e,mergeBase:s,HEAD:(0,u.xB)(i,e,{refType:"revision"}),onto:(0,u.xB)(n,e,{refType:"revision"}),current:null!=h?(0,u.xB)(h,e,{refType:"branch",name:h,remote:!1}):void 0,incoming:(0,u.xB)(r,e,{refType:"branch",name:r,remote:!1}),steps:{current:{number:o??0,commit:(0,u.xB)(i,e,{refType:"revision",message:a})},total:l??0}}}this.useCaching&&this._rebaseStatusCache.set(e,t??null)}return t??void 0}async getNextComparisonUris(e,t,i,s=0){if(!i)return;const r=this.getRelativePath(t,e);if((0,u.rD)(i))return{current:st.YY.fromFile(r,e,i),next:st.YY.fromFile(r,e,void 0)};const n=await this.getNextUri(e,t,i,s);if(null==n){const s=await this.getStatusForFile(e,t);return null!=s&&null!=s.indexStatus?{current:st.YY.fromFile(r,e,i),next:st.YY.fromFile(r,e,P.pw)}:{current:st.YY.fromFile(r,e,i),next:st.YY.fromFile(r,e,void 0)}}return{current:0===s?st.YY.fromFile(r,e,i):await this.getNextUri(e,t,i,s-1),next:n}}async getNextUri(e,t,i,s=0){if(!i||(0,u.rD)(i))return;let n;i===P.Ii&&(i=void 0,n=["A"]);const o=this.getRelativePath(t,e);let a=await this.git.log__file(e,o,i,{argsOrFormat:ee.simpleFormat,fileMode:"simple",filters:n,limit:s+1,ordering:r.D.get("advanced.commitOrdering"),reverse:!0});if(null==a||0===a.length)return;const[l,c,h]=ee.parseSimple(a,s);if("D"===h){if(a=await this.git.log__file(e,".",l,{argsOrFormat:ee.simpleFormat,fileMode:"simple",filters:["R","C"],limit:1,ordering:r.D.get("advanced.commitOrdering")}),null==a||0===a.length)return st.YY.fromFile(c??o,e,l);const[t,i]=ee.parseSimpleRenamed(a,c??o);return st.YY.fromFile(i??c??o,e,t??l??P.Ii)}return st.YY.fromFile(c??o,e,l)}async getOldestUnpushedRefForFile(e,t){const[i,s]=(0,b.uo)(t,e),n=await this.git.log__file(s,i,"@{push}..",{argsOrFormat:["-z","--format=%H"],fileMode:"none",ordering:r.D.get("advanced.commitOrdering"),renames:!0});if(!n)return;const o=n.lastIndexOf("\0",n.length-2);return-1===o?void 0:n.slice(o+1,n.length-2)}async getPreviousComparisonUris(e,t,i,s=0,r=!1){if(i===P.Ii)return;const n=this.getRelativePath(t,e);if(i){if((0,u.rD)(i)){const o=0===s?st.YY.fromFile(n,e,i):await this.getPreviousUri(e,t,void 0,s-1,void 0,r);if(null==o||o.sha===P.Ii)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,s,void 0,r)}}}else{const o=await this.getStatusForFile(e,t);if(null!=o){if(null!=o.indexStatus)return null==o.workingTreeStatus&&s++,0===s?{current:st.YY.fromFile(n,e,void 0),previous:st.YY.fromFile(n,e,P.pw)}:{current:st.YY.fromFile(n,e,P.pw),previous:await this.getPreviousUri(e,t,i,s-1,void 0,r)};if(null!=o.workingTreeStatus&&0===s)return{current:st.YY.fromFile(n,e,void 0),previous:await this.getPreviousUri(e,t,void 0,s,void 0,r)}}else 0===s&&s++}const o=0===s?st.YY.fromFile(n,e,i):await this.getPreviousUri(e,t,i,s-1,void 0,r);return null!=o&&o.sha!==P.Ii?{current:o,previous:await this.getPreviousUri(e,t,i,s,void 0,r)}:void 0}async getPreviousComparisonUrisForLine(e,t,i,r,n=0){if(r===P.Ii)return;let o,a=this.getRelativePath(t,e);if(r){if((0,u.rD)(r)){const s=0===n?st.YY.fromFile(a,e,r):await this.getPreviousUri(e,t,void 0,n-1,i);if(s.sha===P.Ii)return;return{current:s,previous:await this.getPreviousUri(e,t,void 0,n,i),line:i}}const s=new st.YY(t,{repoPath:e,sha:r}),l=await this.getBlameForLine(s,i);if(null==l)return;r=l.commit.sha,a=l.commit.file?.path??l.commit.file?.originalPath??a,t=this.getAbsoluteUri(a,e),i=l.line.originalLine-1,0===n&&l.commit.file?.previousSha&&(o=st.YY.fromFile(a,e,l.commit.file.previousSha))}else{const l=new st.YY(t,e),c=await s.workspace.openTextDocument(t),h=c.isDirty?await this.getBlameForLineContents(l,i,c.getText()):await this.getBlameForLine(l,i);if(null==h)return;if(h.commit.isUncommitted){if(c.isDirty){const s=await this.getStatusForFile(e,t);return null!=s&&null!=s.indexStatus?{current:st.YY.fromFile(a,e,void 0),previous:st.YY.fromFile(a,e,P.pw),line:i}:{current:st.YY.fromFile(a,e,void 0),previous:await this.getPreviousUri(e,t,void 0,n,i),line:i}}let s=await this.getDiffForLine(l,i,void 0);null==s&&(s=await this.getDiffForLine(l,i,void 0,P.pw),null!=s?r=P.pw:n++)}else r=h.commit.sha,a=h.commit.file?.path??h.commit.file?.originalPath??a,t=this.getAbsoluteUri(a,e),i=h.line.originalLine-1,0===n&&h.commit.file?.previousSha&&(o=st.YY.fromFile(a,e,h.commit.file.previousSha))}const l=0===n?st.YY.fromFile(a,e,r):await this.getPreviousUri(e,t,r,n-1,i);return l.sha!==P.Ii?{current:l,previous:o??await this.getPreviousUri(e,t,r,n,i),line:i}:void 0}async getPreviousUri(e,t,i,s=0,n,o=!1){if(i===P.Ii)return;const a=(0,Ut.UH)();i===P.CL&&(i=void 0);const l=this.getRelativePath(t,e);let c;try{c=await this.git.log__file(e,l,i,{argsOrFormat:ee.simpleFormat,fileMode:"simple",firstParent:o,limit:s+2,ordering:r.D.get("advanced.commitOrdering"),startLine:null!=n?n+1:void 0})}catch(s){const n=s?.toString()??"";if((null==i||(0,u.rD)(i))&&Ve.invalidLineCount.test(n)){if(null==i){const i=await this.getStatusForFile(e,t);if(null!=i?.indexStatus)return st.YY.fromFile(l,e,P.pw)}return i=await this.git.log__file_recent(e,l,{ordering:r.D.get("advanced.commitOrdering")}),st.YY.fromFile(l,e,i??P.Ii)}throw be.Yd.error(s,a),s}if(null==c||0===c.length)return;const[h,d]=ee.parseSimple(c,s,i);return null==i||i!==h?st.YY.fromFile(d??l,e,h??P.Ii):void 0}async getIncomingActivity(e,t){const i=(0,Ut.UH)(),s=t?.limit??r.D.get("advanced.maxListItems")??0;try{const i=await this.git.reflog(e,{ordering:r.D.get("advanced.commitOrdering"),...t,limit:100*s});if(null==i)return;const n=GitReflogParser.parse(i,e,oi,s,100*s);return n?.hasMore&&(n.more=this.getReflogMoreFn(n,t)),n}catch(e){return void be.Yd.error(e,i)}}getReflogMoreFn(e,t){return async i=>{i=i??r.D.get("advanced.maxSearchItems")??0;const s=await this.getIncomingActivity(e.repoPath,{...t,limit:i,skip:e.total});if(null==s)return{...e,hasMore:!1,more:void 0};const n={repoPath:e.repoPath,records:[...e.records,...s.records],count:e.count+s.count,total:e.total+s.total,limit:(e.limit??0)+i,hasMore:s.hasMore};return n.hasMore&&(n.more=this.getReflogMoreFn(n,t)),n}}async getRemotes(e,t){if(null==e)return[];const i=t?.providers??(0,Bt.v)(r.D.get("remotes",null));try{const s=await this.git.remote(e),r=yt.Ww.parse(s,e,(0,Bt.B)(this.container,i));return null==r?[]:(t?.sort&&ot.ss.sort(r),r)}catch(e){return be.Yd.error(e),[]}}getRevisionContent(e,t,i){const[s,r]=(0,b.uo)(t,e);return this.git.show(r,s,i,{encoding:"buffer"})}async getStash(e){if(null==e)return;let t=this.useCaching?this._stashesCache.get(e):void 0;if(void 0===t){const i=function(e){let t="%x00";const i=[];for(const s in e)i.push(s),t+=`%x00${e[s]}`;return{arguments:["-z",`--format=${t}`,"--name-status"],parse:function*(e){const t=(0,C.UM)(e,"\0\0\0");let s,r,n;for(const e of t){s={},r=[],n=(0,C.UM)(e,"\0"),n.next(),n.next();let t,o=0;for(;t=n.next(),!t.done;)if(o<i.length)s[i[o++]]=t.value;else{const e={status:t.value.trim(),path:void 0};t=n.next(),e.path=t.value,"R"!==e.status[0]&&"C"!==e.status[0]||(t=n.next(),e.originalPath=t.value),r.push(e)}s.files=r,yield s}}}}({sha:"%H",date:"%at",committedDate:"%ct",parents:"%P",stashName:"%gd",summary:"%B"}),s=await this.git.stash__list(e,{args:i.arguments,similarityThreshold:r.D.get("advanced.similarityThreshold")}),n=new Map,o=i.parse(s);for(const t of o){let i,s,r;const o=ni.exec(t.summary);null!=o?.groups?(i=o.groups.onref,s=o.groups.summary.trim(),r=0===s.length?"WIP":o.groups.wip?`WIP: ${s}`:s):r=t.summary.trim(),n.set(t.sha,new A.aM(this.container,e,t.sha,new A._j("You",void 0,new Date(1e3*t.date)),new A._j("You",void 0,new Date(1e3*t.committedDate)),r.split("\n",1)[0]??"",t.parents.split(" "),r,t.files?.map((t=>new D.K8(e,t.path,t.status,t.originalPath)))??[],void 0,[],void 0,t.stashName,i))}t={repoPath:e,commits:n},this.useCaching&&this._stashesCache.set(e,t??null)}return t??void 0}async getStatusForFile(e,t){const i=await this.git.isAtLeastVersion("2.11")?2:1,[s,n]=(0,b.uo)(t,e),o=await this.git.status__file(n,s,i,{similarityThreshold:r.D.get("advanced.similarityThreshold")}),a=GitStatusParser.parse(o,n,i);if(null!=a&&a.files.length)return a.files[0]}async getStatusForFiles(e,t){const i=await this.git.isAtLeastVersion("2.11")?2:1,[s,n]=(0,b.uo)(t,e),o=await this.git.status__file(n,s,i,{similarityThreshold:r.D.get("advanced.similarityThreshold")}),a=GitStatusParser.parse(o,n,i);return null!=a&&a.files.length?a.files:[]}async getStatusForRepo(e){if(null==e)return;const t=await this.git.isAtLeastVersion("2.11")?2:1,i=await this.git.status(e,t,{similarityThreshold:r.D.get("advanced.similarityThreshold")}),s=GitStatusParser.parse(i,e,t);if(s?.detached){const t=await this.getRebaseStatus(e);if(null!=t)return new ct.Hk(e,t.incoming.name,s.sha,s.files,s.state,s.upstream,!0)}return s}async getTags(e,t){if(null==e)return ei;let i=this.useCaching?this._tagsCache.get(e):void 0;if(null==i){async function r(){try{const t=await this.git.tag(e);return{values:GitTagParser.parse(t,e)??[]}}catch(t){return this._tagsCache.delete(e),ei}}i=r.call(this),this.useCaching&&this._tagsCache.set(e,i)}let s=await i;return null!=t?.filter&&(s={...s,values:s.values.filter(t.filter)}),t?.sort&&(0,pe.Pj)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;const[s,r]=(0,b.uo)(t,e),n=await this.git.ls_tree(r,i,s),o=GitTreeParser.parse(n);return o?.length?o[0]:void 0}async getTreeForRevision(e,t){if(null==e)return[];const i=await this.git.ls_tree(e,t);return GitTreeParser.parse(i)??[]}async getUniqueRepositoryId(e){const t=await this.git.rev_list(e,"HEAD",{maxParents:0});return t?.[0]}async hasBranchOrTag(e,t){const[{values:i},{values:s}]=await Promise.all([this.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==s.length}async hasCommitBeenPushed(e,t){return null!=e&&this.git.merge_base__is_ancestor(e,t,"@{u}")}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){return null!=await this.isTrackedPrivate(e)}async isTrackedPrivate(e,t,i){let r,n;if("string"==typeof e){if(i===P.Ii)return;n=this.container.git.getRepository(s.Uri.file(e)),t=t||n?.path,[r,t]=(0,b.uo)(e,t)}else{if(!this.isTrackable(e))return;if(e instanceof st.YY&&(i=e.sha)===P.Ii)return;n=this.container.git.getRepository(e),t=t||n?.path,[r,t]=(0,b.uo)(e,t)}const o=t?`${t}/${r}`:r;let a=o;a=`${i??""}:${a.startsWith("/")?a:`/${a}`}`;let l=this._trackedPaths.get(a);return null!=l||(l=this.isTrackedCore(o,r,t??"",i,n),this._trackedPaths.set(a,l),l=await l,this._trackedPaths.set(a,l)),l}async isTrackedCore(e,t,i,r,n){if(r!==P.Ii)try{for(;;){i||([t,i]=(0,b.uo)(e,"",!0));let o=Boolean(await this.git.ls_files(i,t));if(o)return[t,i];if(i){const[i,r]=(0,b.uo)(e,"",!0);if(i!==t&&(o=Boolean(await this.git.ls_files(r,i)),o))return null!=(n=await this.container.git.getOrOpenRepository(s.Uri.file(e),{detectNested:!0}))?(0,b.uo)(e,n.path):[i,r]}if(o||!r||(0,u.l3)(r)||(o=Boolean(await this.git.ls_files(i,t,{ref:r})),o||(o=Boolean(await this.git.ls_files(i,t,{ref:`${r}^`})))),!o){if(null!=n){const r=t.indexOf("/");if(r<0||r===t.length-1)return;const o=await this.container.git.getOrOpenRepository(s.Uri.file(e),{detectNested:!0});if(null!=o&&o!==n){[t,i]=(0,b.uo)(e,n.path),n=void 0;continue}}return}return[t,i]}}catch(e){return void be.Yd.error(e)}}async getDiffTool(e){return await this.git.config__get("diff.guitool",e,{local:!0})??this.git.config__get("diff.tool",e,{local:!0})}async openDiffTool(e,t,i){const[n,o]=(0,b.uo)(t,e);try{let e=i?.tool;if(!e){const t=(0,Ut.UH)();if(e=r.D.get("advanced.externalDiffTool")||await this.getDiffTool(o),null==e)throw new Error("No diff tool found");be.Yd.log(t,`Using tool=${e}`)}await this.git.difftool(o,n,e,i)}catch(e){const t=e?.toString()??"";if("No diff tool found"===t||/Unknown .+? tool/.test(t)){const e="View Git Docs";return void(await s.window.showWarningMessage("Unable to open changes because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&s.env.openExternal(s.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}be.Yd.error(e,"openDiffTool"),(0,Mt.W8)("Unable to open compare")}}async openDirectoryCompare(e,t,i,n){try{if(!n){const t=(0,Ut.UH)();if(null==(n=r.D.get("advanced.externalDirectoryDiffTool")||await this.getDiffTool(e)))throw new Error("No diff tool found");be.Yd.log(t,`Using tool=${n}`)}await this.git.difftool__dir_diff(e,n,t,i)}catch(e){const t=e?.toString()??"";if("No diff tool found"===t||/Unknown .+? tool/.test(t)){const e="View Git Docs";return void(await s.window.showWarningMessage("Unable to open directory compare because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&s.env.openExternal(s.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}be.Yd.error(e,"openDirectoryCompare"),(0,Mt.W8)("Unable to open directory compare")}}async resolveReference(e,t,i,s){if(!t||t===P.Ii||null==i&&(0,u.D3)(t)||null!=i&&(0,u.l3)(t))return t;if(null==i)return!s?.force&&!(0,u.yo)(t)||t.endsWith("^3")?t:await this.git.rev_parse__verify(e,t)??t;const r=this.getRelativePath(i,e);let n;null!=s?.timeout&&(n=new TimedCancellationSource(s.timeout));const[o,a]=await Promise.allSettled([this.git.rev_parse__verify(e,t,r),this.git.log__file_recent(e,r,{ref:t,cancellation:n?.token})]);if(null==(0,Nt.Sb)(o))return P.Ii;const l=(0,Nt.Sb)(a),c=n?.token.isCancellationRequested;return n?.dispose(),c?t:l??t}async richSearchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};try{const s=i?.limit??r.D.get("advanced.maxSearchItems")??0,n=r.D.get("advanced.similarityThreshold"),o=await this.getCurrentUser(e),{args:a,files:l,shas:c}=(0,Et.vx)(t,o);a.push("-M"+(null==n?"":`${n}%`),"--"),0!==l.length&&a.push(...l);const h=await this.git.log__search(e,c?.size?void 0:a,{ordering:r.D.get("advanced.commitOrdering"),...i,limit:s,shas:c}),u=ee.parse(this.container,h,H.Log,e,void 0,void 0,o,s,!1,void 0);if(null!=u){let s=function(e){return async n=>{n=n??r.D.get("advanced.maxSearchItems")??0;const o=await this.richSearchCommits(e.repoPath,t,{...i,limit:n,skip:e.count});if(null==o)return{...e,hasMore:!1,more:void 0};const a=new Map([...e.commits,...o.commits]),l={repoPath:e.repoPath,commits:a,sha:e.sha,range:e.range,count:a.size,limit:(e.limit??0)+n,hasMore:o.hasMore,query:s=>this.richSearchCommits(e.repoPath,t,{...i,limit:s})};return l.hasMore&&(l.more=s.call(this,l)),l}};u.query=s=>this.richSearchCommits(e,t,{...i,limit:s}),u.hasMore&&(u.more=s.call(this,u))}return u}catch(e){return}}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};const s=(0,Et.FL)(t);try{const n=(null==z&&(z=K({sha:"%H",authorDate:"%at",committerDate:"%ct"})),z),o=t.query.includes("@me")?await this.getCurrentUser(e):void 0,{args:a,files:l,shas:c}=(0,Et.vx)(t,o);if(c?.size){const y=await this.git.show2(e,{cancellation:i?.cancellation},"-s",...n.arguments,...c.values(),...a,"--");let b=0;const C=new Map((0,ye.UI)(n.parse(y),(e=>[e.sha,{i:b++,date:1e3*Number("author-date"===i?.ordering?e.authorDate:e.committerDate)}])));return{repoPath:e,query:t,comparisonKey:s,results:C}}const u=i?.limit??r.D.get("advanced.maxSearchItems")??0,d=r.D.get("advanced.similarityThreshold"),p=await this.getStash(e);let m;null!=p&&0!==p.commits.size&&(m=(0,ye.v_)((0,ye.UI)(p.commits.values(),(e=>e.sha.substring(0,9))),"\n"));const g=[...n.arguments,"-M"+(null==d?"":`${d}%`),"--use-mailmap"],f=new Map;let w=0;async function v(r,o){if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:s,results:f};let c;try{c=await this.git.log2(e,{cancellation:i?.cancellation,configs:["-C",e,...Le],errors:h.Throw,stdin:m},...g,...a,...i?.ordering?[`--${i.ordering}-order`]:Zt,...r?[`-n${r+1}`]:Zt,...o?.skip?[`--skip=${o.skip}`]:Zt,"--",...l)}catch(r){if(r instanceof CancelledRunError||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:s,results:f};throw new tt.l0(r)}if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:s,results:f};let u=w;for(const e of n.parse(c))f.has(e.sha)?r--:f.set(e.sha,{i:w++,date:1e3*Number("author-date"===i?.ordering?e.authorDate:e.committerDate)});u=w-u;const d=(0,ye.Z$)(f)?.[0];return o=null!=d?{sha:d,skip:w}:void 0,{repoPath:e,query:t,comparisonKey:s,results:f,paging:0!==r&&u>r?{limit:r,hasMore:!0}:void 0,more:async e=>v.call(this,e,o)}}return v.call(this,u)}catch(A){if(A instanceof tt.l0)throw A;throw new tt.l0(A)}}validateBranchOrTagName(e,t){return this.git.check_ref_format(t,e)}async validateReference(e,t){return null!=t&&0!==t.length&&(!(t!==P.Ii&&!(0,u.l3)(t))||null!=await this.git.rev_parse__verify(e,t))}async stageFile(e,t){await this.git.add(e,"string"==typeof t?t:(0,b.uo)(t,e)[0])}async stageDirectory(e,t){await this.git.add(e,"string"==typeof t?t:(0,b.uo)(t,e)[0])}async unStageFile(e,t){await this.git.reset(e,"string"==typeof t?t:(0,b.uo)(t,e)[0])}async unStageDirectory(e,t){await this.git.reset(e,"string"==typeof t?t:(0,b.uo)(t,e)[0])}async stashApply(e,t,i){try{await this.git.stash__apply(e,t,Boolean(i?.deleteAfter))}catch(e){if(e instanceof Error){const t=e.message??"";if(t.includes("Your local changes to the following files would be overwritten by merge"))throw new tt.ef(tt.bk.WorkingChanges,e);if(t.includes("Auto-merging")&&t.includes("CONFLICT")||e instanceof RunError&&(e.stdout.includes("Auto-merging")&&e.stdout.includes("CONFLICT")||e.stdout.includes("needs merge")))return void s.window.showInformationMessage("Stash applied with conflicts");throw new tt.ef(`Unable to apply stash — ${t.trim().replace(/\n+?/g,"; ")}`,e)}throw new tt.ef(`Unable to apply stash — ${String(e)}`,e)}}async stashDelete(e,t,i){await this.git.stash__delete(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async stashSave(e,t,i,s){if(null==i)return await this.git.stash__push(e,t,s),void this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes","status"]});await this.ensureGitVersion("2.13.2","Stashing individual files"," Please retry by stashing everything or install a more recent version of Git and try again.");const r=i.map((t=>`./${(0,b.uo)(t,e)[0]}`)),n="2.30.0",o=await this.git.isAtLeastVersion(n);!o&&(0,y.IP)(r)>3e4&&await this.ensureGitVersion(n,`Stashing so many files (${r.length}) at once`," Please retry by stashing fewer files or install a more recent version of Git and try again."),await this.git.stash__push(e,t,{...s,pathspecs:r,stdin:o}),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async createWorktree(e,t,i){try{await this.git.worktree__add(e,t,i),i?.createBranch&&this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches"]})}catch(e){be.Yd.error(e);const t=String(e);if(Ve.alreadyCheckedOut.test(t))throw new tt.P6(tt.hK.AlreadyCheckedOut,e);if(Ve.alreadyExists.test(t))throw new tt.P6(tt.hK.AlreadyExists,e);throw new tt.P6(void 0,e)}}async getWorktrees(e){await this.ensureGitVersion("2.7.6","Displaying worktrees"," Please install a more recent version of Git and try again.");const t=await this.git.worktree__list(e);return GitWorktreeParser.parse(t,e)}async getWorktreesDefaultUri(e){let t=r.D.get("worktrees.defaultLocation");if(null==t)return;t.startsWith("~")&&(t=(0,b.RQ)((0,je.homedir)(),t.slice(1)));const i=this.container.git.getRepository(e)?.folder;return t=(0,C.sX)(t,{userHome:(0,je.homedir)(),workspaceFolder:i?.uri.fsPath,workspaceFolderBasename:i?.name}),this.getAbsoluteUri(t,e)}async deleteWorktree(e,t,i){await this.ensureGitVersion("2.17.0","Deleting worktrees"," Please install a more recent version of Git and try again.");try{await this.git.worktree__remove(e,t,i)}catch(e){be.Yd.error(e);const t=String(e);if(Ve.mainWorkingTree.test(t))throw new tt.Nk(tt.xe.MainWorkingTree,e);if(Ve.uncommittedChanges.test(t))throw new tt.Nk(tt.xe.HasChanges,e);throw new tt.Nk(void 0,e)}}_scmGitApi;async getScmGitApi(){return this._scmGitApi??(this._scmGitApi=this.getScmGitApiCore())}async getScmGitApiCore(){try{const e=s.extensions.getExtension("vscode.git");if(null==e)return;const t=e.isActive?e.exports:await e.activate();return t?.getAPI(1)}catch{return}}getScmGitUri(e,t){const i=this.fromCanonicalMap.get(t),r=this.getAbsoluteUri(e,i??t);return s.Uri.from({scheme:c.sN.Git,path:r.path,query:JSON.stringify({path:r.fsPath,ref:"~"})})}async getOpenScmRepositories(){const e=(0,Ut.UH)();try{const e=await this.getScmGitApi();return e?.repositories??[]}catch(t){return be.Yd.error(t,e),[]}}async getScmRepository(e){const t=(0,Ut.UH)();try{const t=await this.getScmGitApi();return t?.getRepository(s.Uri.file(e))??void 0}catch(e){return void be.Yd.error(e,t)}}async getOrOpenScmRepository(e){const t=(0,Ut.UH)();try{const t=await this.getScmGitApi();return null!=t?.openRepository?await(t?.openRepository?.(s.Uri.file(e)))??void 0:t?.getRepository(s.Uri.file(e))??void 0}catch(e){return void be.Yd.error(e,t)}}async openScmRepository(e){const t=(0,Ut.UH)();try{const t=await this.getScmGitApi();return await(t?.openRepository?.(e))??void 0}catch(e){return void be.Yd.error(e,t)}}async ensureGitVersion(e,t,i){if(!await this.git.isAtLeastVersion(e))throw new Error(`${t} requires a newer version of Git (>= ${e}) than is currently installed (${await this.git.version()}).${i}`)}}async function ai(e){const t=r.D.getAny("files.encoding",e);if(null==t||"utf8"===t)return"utf8";return(0,(await i.e(429).then(i.t.bind(i,4914,23))).encodingExists)(t)?t:"utf8"}Jt([(0,d.cM)()],LocalGitProvider.prototype,"findGit",1),Jt([(0,d.fF)({args:{0:e=>e.url}})],LocalGitProvider.prototype,"getRemoteVisibility",1),Jt([(0,d.cM)({args:!1,singleLine:!0,prefix:(e,t)=>`${e.prefix}(${t.uri.fsPath})`,exit:e=>`returned ${e.length} repositories${0!==e.length?` (${e.map((e=>e.path)).join(", ")})`:""}`})],LocalGitProvider.prototype,"repositorySearch",1),Jt([(0,d.fF)({args:{2:!1,3:!1}})],LocalGitProvider.prototype,"repositorySearchCore",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getBestRevisionUri",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getWorkingUri",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"addRemote",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"pruneRemote",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"removeRemote",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"applyChangesToWorkingFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"checkout",1),Jt([(0,d.cM)({singleLine:!0})],LocalGitProvider.prototype,"resetCache",1),Jt([(0,d.cM)({singleLine:!0})],LocalGitProvider.prototype,"resetCaches",1),Jt([(0,d.cM)({args:{1:e=>e.length}})],LocalGitProvider.prototype,"excludeIgnoredUris",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"fetch",1),Jt([(0,Wt.H)(),(0,d.fF)()],LocalGitProvider.prototype,"findRepositoryUri",1),Jt([(0,d.cM)({args:{1:e=>e.join(",")}})],LocalGitProvider.prototype,"getAheadBehindCommitCount",1),Jt([(0,Wt.H)(((e,t)=>`${e.toString()}|${t?.isDirty}`)),(0,d.cM)({args:{1:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlame",1),Jt([(0,d.cM)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getBlameContents",1),Jt([(0,Wt.H)(((e,t,i,s)=>`${e.toString()}|${t}|${i?.isDirty}|${s?.forceSingleLine}`)),(0,d.cM)({args:{2:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlameForLine",1),Jt([(0,d.cM)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForLineContents",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getBlameForRange",1),Jt([(0,d.cM)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForRangeContents",1),Jt([(0,d.cM)({args:{0:"<blame>"}})],LocalGitProvider.prototype,"getBlameRange",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getBranch",1),Jt([(0,d.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getBranches",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getChangedFilesCount",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getCommit",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getCommitBranches",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getCommitCount",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getCommitForFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getCommitsForGraph",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getContributors",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getCurrentUser",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDefaultBranchName",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDiff",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDiffForFile",1),Jt([(0,d.cM)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getDiffForFileContents",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDiffForLine",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDiffStatus",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getFileStatusForCommit",1),Jt([(0,d.fF)()],LocalGitProvider.prototype,"getGitDir",1),Jt([(0,d.fF)()],LocalGitProvider.prototype,"getLastFetchedTimestamp",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getLog",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getLogRefsOnly",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getLogForFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getMergeBase",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getMergeStatus",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getRebaseStatus",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getNextComparisonUris",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getNextUri",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getOldestUnpushedRefForFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getPreviousComparisonUris",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getPreviousComparisonUrisForLine",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getPreviousUri",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getIncomingActivity",1),Jt([(0,d.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getRemotes",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getRevisionContent",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getStash",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getStatusForFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getStatusForFiles",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getStatusForRepo",1),Jt([(0,d.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getTags",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getTreeEntryForRevision",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getTreeForRevision",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getUniqueRepositoryId",1),Jt([(0,d.cM)({args:{1:!1}})],LocalGitProvider.prototype,"hasBranchOrTag",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"hasCommitBeenPushed",1),Jt([(0,d.cM)({exit:e=>`returned ${Boolean(e)}`})],LocalGitProvider.prototype,"isTrackedPrivate",1),Jt([(0,d.fF)()],LocalGitProvider.prototype,"isTrackedCore",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getDiffTool",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"openDiffTool",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"openDirectoryCompare",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"resolveReference",1),Jt([(0,d.cM)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],LocalGitProvider.prototype,"richSearchCommits",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"searchCommits",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"validateBranchOrTagName",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"validateReference",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"stageFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"stageDirectory",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"unStageFile",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"unStageDirectory",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"stashApply",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"stashDelete",1),Jt([(0,d.cM)({args:{2:e=>e?.length}})],LocalGitProvider.prototype,"stashSave",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"createWorktree",1),Jt([(0,Wt.H)(),(0,d.cM)()],LocalGitProvider.prototype,"getWorktrees",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getWorktreesDefaultUri",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"deleteWorktree",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getScmGitApiCore",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getOpenScmRepositories",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getScmRepository",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"getOrOpenScmRepository",1),Jt([(0,d.cM)()],LocalGitProvider.prototype,"openScmRepository",1);class VslsGit extends Git{constructor(e){super(),this.localGit=e}async git(e,...t){if(e.local)return e.cwd="",this.localGit.git(e,...t);const i=await gv.instance.vsls.guest();if(null==i)throw new Error("No guest");return i.git(e,...t)}}class VslsGitProvider extends LocalGitProvider{descriptor={id:it.pq.Vsls,name:"Live Share",virtual:!1};supportedSchemes=new Set([c.sN.Vsls,c.sN.VslsScc]);async discoverRepositories(e){if(!this.supportedSchemes.has(e.scheme))return[];const t=(0,Ut.UH)();try{const t=await this.container.vsls.guest(),i=await(t?.getRepositoriesForUri(e));return null==i||0===i.length?[]:i.flatMap((e=>this.openRepository(void 0,s.Uri.parse(e.folderUri,!0),e.root,void 0,e.closed)))}catch(e){return be.Yd.error(e,t),[]}}canHandlePathOrUri(e,t){return super.canHandlePathOrUri(e,t)}getAbsoluteUri(e,t){e=(0,b.IC)(e);const i=("string"!=typeof t?t.scheme:void 0)??("string"!=typeof e?e.scheme:void 0)??c.sN.Vsls;return super.getAbsoluteUri(e,t).with({scheme:i})}async findRepositoryUri(e,t){const i=(0,Ut.UH)();let r;try{if(null==t){t=((await s.workspace.fs.stat(e)).type&s.FileType.Directory)===s.FileType.Directory}if(t||(e=s.Uri.joinPath(e,"..")),r=await this.git.rev_parse__show_toplevel(e.fsPath),!r)return;return r?s.Uri.parse(r,!0):void 0}catch(e){return void be.Yd.error(e,i)}}getLastFetchedTimestamp(e){return Promise.resolve(void 0)}}let li;function ci(){return null==li&&(li=new Git),li}var hi=i(8452),ui=i(8786),di=Object.defineProperty,pi=Object.getOwnPropertyDescriptor,mi=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?pi(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&di(t,i,n),n};const gi=Object.freeze(new Map),fi=/<num>/g;function wi(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,prefix:e.prefix,title:e.title,url:e.url,type:e.type,description:e.description}}function vi(e){return!("prefix"in e)&&!("url"in e)}function yi(e){return"prefix"in e&&null!=e.prefix&&"url"in e&&null!=e.url}class Autolinks{constructor(e){this.container=e,this._references=[],this._disposable=s.Disposable.from(r.D.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}dispose(){this._disposable?.dispose()}onConfigurationChanged(e){if(r.D.changed(e,"autolinks")){const e=r.D.get("autolinks");this._references=e?.filter((e=>e.prefix&&e.url))?.map((e=>({prefix:e.prefix,url:e.url,title:e.title,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,type:e.type,description:e.description})))??[]}}getAutolinks(e,t){const i=t?.provider;if(null!=t&&null==t.provider)return gi;const s=new Map;let r,n;for(const t of i?.autolinks??this._references)if(yi(t))for(bi(t,"plaintext");;){if(r=t.messageRegex.exec(e),null==r)break;[,,n]=r,s.set(n,{provider:i,id:n,prefix:t.prefix,url:t.url?.replace(fi,n),title:t.title?.replace(fi,n),type:t.type,description:t.description?.replace(fi,n)})}else vi(t)&&t.parse(e,s);return s}async getLinkedIssuesAndPullRequests(e,t,i){if(!t.hasRichProvider())return;const{provider:s}=t;if(!(s.maybeConnected??await s.isConnected()))return;let r=i?.autolinks;if(null==r&&(r=this.getAutolinks(e,t)),0===r.size)return;const n=await(0,Nt.xu)(r.keys(),(e=>s.getIssueOrPullRequest(e)),i?.timeout);for(const[e,t]of n)null==t&&n.delete(e);return 0!==n.size?n:void 0}linkify(e,t,i,s,r){const n="plaintext"===t&&null==r;n&&(r=new Map);const o=new Map;for(const i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,o,s,r));if(null!=i&&0!==i.length)for(const n of i)if(null!=n.provider)for(const i of n.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,o,s,r));return 0!==o.size&&(e=e.replace(/(\x00\d+\x00)/g,((e,t)=>o.get(t)??t))),n&&r?.size&&(e+=`\n${c.NE.Dash.repeat(2)}\n${(0,ye.v_)((0,ye.UI)(r,(([e,t])=>`${(0,C.sC)(e)} ${t}`)),"\n")}`),e}ensureAutolinkCached(e){if(vi(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,s,r,n)=>{let o;switch(i){case"markdown":return bi(e,i),t.replace(e.messageMarkdownRegex,((t,i,a)=>{const l=(0,ui.M)(e.url.replace(fi,a));let h="";if(e.title){h=` "${e.title.replace(fi,a)}`;const t=r?.get(a);if(null!=t)if(t instanceof Nt.PK)h+=`\n${c.NE.Dash.repeat(2)}\nDetails timed out`;else{const e=(0,C.ry)(t.title.trim());null!=n&&(o=n.size+1,n.set(o,`[${(0,hi.sy)(t)} **${e}**](${l}${h}")\\\n${c.NE.Space.repeat(5)}${i} ${t.closed?"closed":"opened"} ${(0,ie.Zh)(t.closedDate??t.date)}`)),h+=`\n${c.NE.Dash.repeat(2)}\n${e}\n${t.closed?"Closed":"Opened"}, ${(0,ie.Zh)(t.closedDate??t.date)}`}h+='"'}const u=`\0${s.size}\0`;return s.set(u,`[${i}](${l}${h})`),u}));case"html":return bi(e,i),t.replace(e.messageHtmlRegex,((t,i,a)=>{const l=(0,ui.M)(e.url.replace(fi,a));let h="";if(e.title){h=`"${(0,C.se)(e.title.replace(fi,a))}`;const t=r?.get(a);if(null!=t)if(t instanceof Nt.PK)h+=`\n${c.NE.Dash.repeat(2)}\nDetails timed out`;else{const e=(0,C.se)(t.title.trim());null!=n&&(o=n.size+1,n.set(o,`<a href="${l}" title=${h}>${(0,hi.Ty)(t)} <b>${e}</b></a><br /><span>${c.NE.Space.repeat(5)}${i} ${t.closed?"closed":"opened"} ${(0,ie.Zh)(t.closedDate??t.date)}</span>`)),h+=`\n${c.NE.Dash.repeat(2)}\n${e}\n${t.closed?"Closed":"Opened"}, ${(0,ie.Zh)(t.closedDate??t.date)}`}h+='"'}const u=`\0${s.size}\0`;return s.set(u,`<a href="${l}" title=${h}>${i}</a>`),u}));default:return bi(e,i),t.replace(e.messageRegex,((e,t,i)=>{const a=r?.get(i);if(null==a)return t;null!=n&&(o=n.size+1,n.set(o,`${t}: ${a instanceof Nt.PK?"Details timed out":`${a.title}  ${c.NE.Dot}  ${a.closed?"Closed":"Opened"}, ${(0,ie.Zh)(a.closedDate??a.date)}`}`));const l=`\0${s.size}\0`;return s.set(l,`${t}${(0,C.sC)(o)}`),l}))}}}catch(t){be.Yd.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}}function bi(e,t){return"markdown"===t&&null==e.messageMarkdownRegex?e.messageMarkdownRegex=new RegExp(`(?<=^|\\s|\\(|\\[|\\{)(${(0,C.yI)((0,C.se)((0,C.ry)(e.prefix)))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):"html"===t&&null==e.messageHtmlRegex?e.messageHtmlRegex=new RegExp(`(?<=^|\\s|\\(|\\[|\\{)(${(0,C.yI)((0,C.se)(e.prefix))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):null==e.messageRegex&&(e.messageRegex=new RegExp(`(?<=^|\\s|\\(|\\[|\\{)(${(0,C.yI)(e.prefix)}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g")),!0}mi([(0,d.fF)({args:{0:"<message>",1:!1}})],Autolinks.prototype,"getAutolinks",1),mi([(0,d.fF)({args:{0:"<message>",1:!1,2:e=>`autolinks=${null!=e?.autolinks}, timeout=${e?.timeout}`}})],Autolinks.prototype,"getLinkedIssuesAndPullRequests",1),mi([(0,d.fF)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],Autolinks.prototype,"linkify",1);var Ci=i(6631),Ai=i(2185),Pi=i(2509),Di=(e=>(e.Computing="computing",e.Computed="computed",e))(Di||{});function Si(e){return`${e?.document.uri.toString()}|${e?.viewColumn}`}class AnnotationProviderBase{constructor(e,t,i){this.annotationType=e,this.editor=t,this.trackedDocument=i,this.correlationKey=Si(this.editor),this.document=this.editor.document,this.disposable=s.Disposable.from(s.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}dispose(){this.clear(),this.disposable.dispose()}onTextEditorSelectionChanged(e){this.document===e.textEditor.document&&this.selection({line:e.selections[0].active.line})}get editorUri(){return this.editor?.document?.uri}clear(){if(this.annotationContext=void 0,this.status=void 0,null!=this.editor&&this.decorations?.length){for(const e of this.decorations)try{this.editor.setDecorations(e.decorationType,[])}catch{}this.decorations=void 0}}mustReopen(e){return!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;const t=[];for(const i of this.decorations){const s=e.get(i.decorationType);null!==s&&(null!=s&&(i.decorationType=s),t.push(i))}this.setDecorations(this.decorations)}async restore(e){if(!1!==this.editor._disposed){if(this.status="computing",e===s.window.activeTextEditor&&await(0,Ci.v)(c.zf.AnnotationStatus,this.status),this.editor=e,this.correlationKey=Si(e),this.document=e.document,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.status="computed",e===s.window.activeTextEditor&&await(0,Ci.v)(c.zf.AnnotationStatus,this.status)}}async provideAnnotation(e){this.status="computing";try{if(await this.onProvideAnnotation(e))return this.status="computed",!0}catch(e){be.Yd.error(e)}return this.status=void 0,!1}setDecorations(e){if(this.decorations?.length&&this.clear(),this.decorations=e,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions)}}var ki=i(9529);async function Ri(e){const t=(0,Nt.PQ)();return await(0,ki.P0)(c.Gh.GitCommands,{...e,completion:t}),t.promise}async function Fi(e,t){await(0,ki.b2)(c.Gh.BrowseRepoAtRevision,void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}var $i=i(6922);function Ti(e,t){return t?.document?.uri??e}function xi(e){return"viewItem"===e.type&&(0,p.BF)(e.node.branch)}function Ii(e){return"viewItem"===e.type&&(0,A.f_)(e.node.commit)}function _i(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(0,A.f_)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function Oi(e){return"viewItem"===e.type&&ot.ss.is(e.node.remote)}function Bi(e){return"viewItem"===e.type&&e.node.repo instanceof lt._j}function Ei(e){return"viewItem"===e.type&&(0,pe.YR)(e.node.tag)}function Mi(e){return null!=e&&(null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates))}function Wi(e){return null!=e&&null!=e.resourceUri}class Command{constructor(e){if(this.contextParsingOptions={expectsEditor:!1},"string"==typeof e)return void(this._disposable=(0,ki.xR)(e,((...t)=>this._execute(e,...t)),this));const t=e.map((e=>(0,ki.xR)(e,((...t)=>this._execute(e,...t)),this)));this._disposable=s.Disposable.from(...t)}static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){const[i,s]=Li(e,{...this.contextParsingOptions},...t);return Array.isArray(i)?(0,Lt.df)(this.preExecute,i.map((e=>[e,...s])),this):this.preExecute(i,...s)}}function Li(e,t,...i){let r,n=i[0];if(t?.expectsEditor)if((null==n||null!=n.id&&null!=n.document?.uri)&&(r=n,n=(i=i.slice(1))[0]),i.length>0&&(null==n||n instanceof s.Uri)){const[t,...n]=i;if(null!=t){null!=r||t.toString()!==s.window.activeTextEditor?.document.uri.toString()&&!e.endsWith("InDiffLeft")||(r=s.window.activeTextEditor);const i=n[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof s.Uri?[{command:e,type:"uris",editor:r,uri:t,uris:i},n.slice(1)]:[{command:e,type:"uri",editor:r,uri:t},n]}i=i.slice(1)}else null==r&&(r=s.window.activeTextEditor);if(n instanceof $i.Re){let[t,...s]=i;if(n=s[0],Array.isArray(n)&&n[0]instanceof $i.Re){let i;[i,...s]=s;const r=[];for(const s of i)s?.constructor===t.constructor&&r.push({command:e,type:"viewItem",node:s,uri:s.uri});return[r,s]}return[{command:e,type:"viewItem",node:t,uri:t.uri},s]}if(Wi(n)){const t=[];let s=0;for(const e of i){if(!Wi(e))break;s++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(s)]}if(Mi(n)){const t=[];let s=0;for(const e of i){if(!Mi(e))break;s++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(s)]}if(null!=(o=n)&&function(e){return null!=e&&null!=e.timestamp&&null!=e.label}(o)&&null!=o.ref&&null!=o.previousRef&&null!=o.message){const[t,s,...r]=i;return[{command:e,type:"timeline-item:git",item:t,uri:s},r]}var o,a;if(null!=(a=n)&&null!=a.id&&null!=a.rootUri&&null!=a.inputBox&&null!=a.statusBarCommands){const[t,...s]=i;return[{command:e,type:"scm",scm:t},s]}return[{command:e,type:"unknown",editor:r,uri:r?.document.uri},i]}class ActiveEditorCommand extends Command{constructor(){super(...arguments),this.contextParsingOptions={expectsEditor:!0}}preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}}let Ui;class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return Ui={command:e,args:t},super._execute(e,...t)}}class EditorCommand{constructor(e){Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(s.commands.registerTextEditorCommand(i,((e,t,...s)=>this.executeCore(i,e,t,...s)),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...s){return this.execute(t,i,...s)}}var Ni=Object.defineProperty,Gi=Object.getOwnPropertyDescriptor;let Hi=class extends Command{constructor(e){super(c.Gh.AddAuthors),this.container=e}execute(e){let t;return null!=e?.rootUri&&(t=this.container.git.getRepository(e.rootUri)),Ri({command:"co-authors",state:{repo:t,contributors:void 0}})}};Hi=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Gi(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ni(t,i,n),n})([(0,ki.WD)()],Hi);var Vi=Object.defineProperty,Qi=Object.getOwnPropertyDescriptor;let qi=class extends ActiveEditorCommand{constructor(e){super([c.Gh.BrowseRepoAtRevision,c.Gh.BrowseRepoAtRevisionInNewWindow,c.Gh.BrowseRepoBeforeRevision,c.Gh.BrowseRepoBeforeRevisionInNewWindow]),this.container=e}preExecute(e,t){switch(e.command){case c.Gh.BrowseRepoAtRevisionInNewWindow:t={...t,before:!1,openInNewWindow:!0};break;case c.Gh.BrowseRepoBeforeRevision:t={...t,before:!0,openInNewWindow:!1};break;case c.Gh.BrowseRepoBeforeRevisionInNewWindow:t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(null==(t=Ti(t,e)))return}else t=i.uri;let s=await st.YY.fromUri(t);if(null==s.sha)return;const r=i?.before?await this.container.git.resolveReference(s.repoPath,`${s.sha}^`):s.sha;t=this.container.git.getRevisionUri(r,s.repoPath,s.repoPath),s=st.YY.fromRevisionUri(t),(0,Pi.ic)(t,{location:i.openInNewWindow?Pi.Tc.NewWindow:Pi.Tc.AddToWorkspace,name:`${(0,b.EZ)(s.repoPath)} @ ${s.shortSha}`}),i.openInNewWindow||(0,ki.dO)(c.nA.FocusFilesExplorer)}catch(e){be.Yd.error(e,"BrowseRepoAtRevisionCommand"),(0,Mt.W8)("Unable to open the repository at the specified revision")}}};function Yi(e){return{kind:s.QuickPickItemKind.Separator,label:e??""}}qi=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Qi(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Vi(t,i,n),n})([(0,ki.WD)()],qi);class CommandQuickPickItem{constructor(e,t,i,s){this.command=t,this.args=i,this.options=s,this.command=t,this.args=i,"string"==typeof e?this.label=e:Object.assign(this,e)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,t,null==i?[]:[i])}static is(e){return e instanceof CommandQuickPickItem}execute(e){if(void 0===this.command)return Promise.resolve(void 0);return s.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;const t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}}class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}function ji(e,t,i,s){return{...i,item:t,picked:zi(e,t),context:s}}function zi(e,t){return void 0===t?0===e.length:Array.isArray(t)?0===t.length?0===e.length:t.every((t=>e.includes(t))):e.includes(t)}var Ki=(e=>(e[e.Back=0]="Back",e[e.Cancel=1]="Cancel",e[e.LoadMore=2]="LoadMore",e[e.Noop=3]="Noop",e[e.RequiresVerification=4]="RequiresVerification",e[e.ExtendTrial=5]="ExtendTrial",e[e.RequiresPaidSubscription=6]="RequiresPaidSubscription",e[e.StartPreviewTrial=7]="StartPreviewTrial",e))(Ki||{});function Ji(e){return"number"==typeof e&&null!=Ki[e]}function Zi(e,t,i){let s=i?.label,r=i?.detail;if(null==s)switch(e){case 0:s="Back";break;case 1:s="Cancel";break;case 2:s="Load more";break;case 3:s="Try again";break;case 7:s="Start a GitLens Pro Trial",r="Try GitLens+ features on private repos, free for 3 days, without an account";break;case 5:s="Extend Your GitLens Pro Trial",r="To continue to use GitLens+ features on private repos, free for an additional 7-days";break;case 4:s="Resend Verification Email",r="You must verify your email address before you can continue";break;case 6:s="Upgrade to Pro",r="To use GitLens+ features on private repos"}return{label:s,description:i?.description,detail:r,alwaysShow:!0,picked:t,directive:e}}function Xi(e){return null!=e&&"directive"in e}class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){const e=this.getToggledState().icon;return"string"==typeof e?{dark:s.Uri.file(gv.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:s.Uri.file(gv.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}}class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}}const es={iconPath:new s.ThemeIcon("sync"),tooltip:"Fetch"},ts={iconPath:new s.ThemeIcon("refresh"),tooltip:"Load More"},is=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},ss=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},rs=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},ns={iconPath:new s.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},os=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super((()=>({on:{tooltip:"Choose a Specific Commit",icon:new s.ThemeIcon("git-commit")},off:{tooltip:"Choose a Branch"+(t.showTags?" or Tag":""),icon:new s.ThemeIcon("git-branch")}})),e),this.onDidClick=i}},as={iconPath:new s.ThemeIcon("empty-window"),tooltip:"Open in New Window"},ls={iconPath:new s.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},cs={iconPath:new s.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},hs={iconPath:new s.ThemeIcon("eye"),tooltip:"Open Details"},us={iconPath:new s.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},ds=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new s.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},ps={iconPath:new s.ThemeIcon("check"),tooltip:"Will always confirm"},ms=class extends ToggleQuickInputButton{constructor(e=!1,t){super((()=>({on:{tooltip:"Will confirm",icon:{dark:s.Uri.file(gv.instance.context.asAbsolutePath("images/dark/icon-check.svg")),light:s.Uri.file(gv.instance.context.asAbsolutePath("images/light/icon-check.svg"))}},off:{tooltip:"Skips confirm",icon:{dark:s.Uri.file(gv.instance.context.asAbsolutePath("images/dark/icon-no-check.svg")),light:s.Uri.file(gv.instance.context.asAbsolutePath("images/light/icon-no-check.svg"))}}})),e),this.onDidClick=t}};function gs(e,t,i){return Ri({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function fs(e,t){return Ri({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function ws(e,t,i){return Ri({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}async function vs(e,t){const i=e.remote?gv.instance.remotesView:gv.instance.branchesView,s=i.canReveal?await i.revealBranch(e,t):await gv.instance.repositoriesView.revealBranch(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}async function ys(e,t,i){await Rs(e,t,{preserveFocus:!0,preview:!1});let s=t.ref;"string"!=typeof e&&"?"===e.status&&(s=`${s}^3`),await gv.instance.git.applyChangesToWorkingFile(st.YY.fromFile(e,t.repoPath,s),s,i?.ref)}async function bs(e){let t;if((0,A.f_)(e))t=e,null==t.message&&await t.ensureFullDetails();else if(t=await gv.instance.git.getCommit(e.repoPath,e.ref),null==t)return;const i=t.message??t.summary;await s.env.clipboard.writeText(i)}async function Cs(e,t,i){let r,n;if((0,A.f_)(e)?(null==e.files&&await e.ensureFullDetails(),r=e.files??[],n={repoPath:e.repoPath,ref1:e.unresolvedPreviousSha,ref2:e.sha},i=t):(r=e,n=t),r.length>10){const e=await s.window.showWarningMessage(`Are you sure you want to open the changes for all ${r.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}i={preserveFocus:!0,preview:!1,...i};for(const e of r)await Ps(e,n,i)}async function As(e,t,i){let r,n;if((0,A.f_)(e)?(null==e.files&&await e.ensureFullDetails(),r=e.files??[],n={repoPath:e.repoPath,ref:e.sha},i=t):(r=e,n=t),r.length>10){const e=await s.window.showWarningMessage(`Are you sure you want to open the changes for all ${r.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}i={preserveFocus:!0,preview:!1,...i};for(const e of r)await Ss(e,n,i)}async function Ps(e,t,i){const s=(0,A.f_)(t);if("string"==typeof e){if(!s)throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&s){const s=await t.getCommitForFile(e);return void(0,ki.P0)(c.Gh.DiffWithPrevious,{commit:s,showOptions:i})}const r=s?{repoPath:t.repoPath,ref1:t.unresolvedPreviousSha,ref2:t.sha}:t,n=st.YY.fromFile(e,r.repoPath),o="R"===e.status||"C"===e.status?st.YY.fromFile(e,r.repoPath,r.ref2,!0):n;await(0,ki.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{uri:n,sha:r.ref1},rhs:{uri:o,sha:r.ref2},showOptions:i})}async function Ds(e,t,i){if("string"==typeof e){if(!(0,A.f_)(t))throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}return gv.instance.git.openDiffTool(t.repoPath,st.YY.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,u.l3)(t.ref)?"":`${t.ref}^`,ref2:(0,u.l3)(t.ref)?"":t.ref,staged:(0,u.rD)(t.ref)||null!=e.indexStatus,tool:i})}async function Ss(e,t,i){if("string"==typeof e){if(!(0,A.f_)(t))throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}if("D"===e.status)return;let s;s=(0,A.f_)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await(0,ki.b2)(c.Gh.DiffWithWorking,void 0,{uri:st.YY.fromFile(e,s.repoPath,s.ref),showOptions:i})}async function ks(e,t,i,s){return gv.instance.git.openDirectoryCompare(e,t,i,s)}async function Rs(e,t,i){let r;if(e instanceof s.Uri)r=e,i=t;else{const i=t;if(r=st.YY.fromFile(e,i.repoPath,i.ref),"string"!=typeof e&&"?"===e.status)return}i={preserveFocus:!0,preview:!1,...i},await(0,ki.b2)(c.Gh.OpenWorkingFile,void 0,{uri:r,showOptions:i})}async function Fs(e,t,i){let r;if(e instanceof s.Uri){if((0,A.f_)(t))throw new Error("Invalid arguments");r=e,i=t}else{if(!(0,A.f_)(t))throw new Error("Invalid arguments");const i=t;let s;if("string"==typeof e){const t=await i.findFile(e);if(null==t)throw new Error("Invalid arguments");s=t}else s=e;r=gv.instance.git.getRevisionUri("D"===s.status?await i.getPreviousSha()??P.Ii:i.sha,s,i.repoPath)}const{annotationType:n,line:o,...a}={preserveFocus:!0,preview:!1,...i};null!=o&&0!==o&&(a.selection=new s.Range(o,0,o,0));const l=await(0,Pi.GR)(r,a);null!=n&&null!=l&&await gv.instance.fileAnnotations.show(l,n,{selection:{line:o}})}async function $s(e,t,i){let r;if((0,A.f_)(e)?(null==e.files&&await e.ensureFullDetails(),r=e.files??[],t=e.repoPath,i=e.sha):r=e,r.length>10){const e=await s.window.showWarningMessage(`Are you sure you want to open all ${r.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}const n=(await Promise.all(r.map((e=>gv.instance.git.getWorkingUri(t,st.YY.fromFile(e,t,i)))))).filter((e=>Boolean(e)));(0,Pi.$_)(n)}async function Ts(e,t,i,r){let n;if((0,A.f_)(e)?(null==e.files&&await e.ensureFullDetails(),n=e.files??[],t=e.repoPath,i=e.sha,r=await e.getPreviousSha()):n=e,n.length>10){const e=await s.window.showWarningMessage(`Are you sure you want to open all ${n.length} file revisions?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}(0,Pi.$_)(n.map((e=>gv.instance.git.getRevisionUri("D"===e.status?r:i,e,t))))}async function xs(e,t){let i,s;"string"==typeof e?(i=e,s=t.ref):(i=e.path,s="?"===e.status?`${t.ref}^3`:"D"===e.status?`${t.ref}^`:t.ref),await gv.instance.git.checkout(t.repoPath,s,{path:i})}async function Is(e,t){const i=[gv.instance.commitsView,gv.instance.branchesView,gv.instance.remotesView];for(const s of i){const i=s.canReveal?await s.revealCommit(e,t):await gv.instance.repositoriesView.revealCommit(e,t);if(null!=i)return i}i[0].show({preserveFocus:!t?.focus})}async function _s(e,t){if(null==t)return void await(0,ki.P0)(c.Gh.ShowQuickCommit,{commit:e});let i;i=t instanceof s.Uri?t:st.YY.fromFile(t,e.repoPath,e.ref),await(0,ki.P0)(c.Gh.ShowQuickCommitFile,i,{sha:e.sha})}function Os(e,t){return gv.instance.commitDetailsView.show({...t,commit:e})}function Bs(e,t){return Ri({command:"co-authors",state:{repo:e,contributors:t}})}async function Es(e,t){const i=gv.instance.contributorsView,s=i.canReveal?await i.revealContributor(e,t):await gv.instance.repositoriesView.revealContributor(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function Ms(e,t,i,s){return Ri({command:"remote",confirm:s?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:s?.fetch?["-f"]:void 0,reveal:s?.reveal}})}async function Ws(e,t){const i=gv.instance.remotesView,s=null!=e?i.canReveal?await i.revealRemote(e,t):await gv.instance.repositoriesView.revealRemote(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}function Ls(e,t){return Ri({command:"cherry-pick",state:{repo:e,references:t}})}function Us(e,t){return Ri({command:"fetch",state:{repos:e,reference:t}})}function Ns(e,t){return Ri({command:"merge",state:{repo:e,reference:t}})}function Gs(e,t){return Ri({command:"pull",state:{repos:e,reference:t}})}function Hs(e,t,i){return Ri({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function Vs(e,t,i=!0){return Ri({command:"rebase",state:{repo:e,reference:t,flags:i?["--interactive"]:[]}})}function Qs(e,t,i){return Ri({command:"reset",confirm:null==i||i.includes("--hard"),state:{repo:e,reference:t,flags:i}})}function qs(e,t){return Ri({command:"revert",state:{repo:e,references:t}})}function Ys(e,t,i){return Ri({command:"switch",state:{repos:e,reference:t},confirm:i})}async function js(e,t,i){const s=t?.canReveal?await t.revealRepository(e,i):await gv.instance.repositoriesView.revealRepository(e,i);return null==s&&(t??gv.instance.repositoriesView).show({preserveFocus:!i?.focus}),s}function zs(e,t){return Ri({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function Ks(e,t){return Ri({command:"stash",state:{subcommand:"drop",repo:e,reference:t}})}function Js(e,t,i,s=!1,r=!1){return Ri({command:"stash",state:{subcommand:"push",repo:e,uris:t,message:i,flags:[...s?["--keep-index"]:[],...r?["--staged"]:[]]}})}async function Zs(e,t){const i=gv.instance.stashesView,s=i.canReveal?await i.revealStash(e,t):await gv.instance.repositoriesView.revealStash(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function Xs(e,t){return gv.instance.commitDetailsView.show({...t,commit:e})}function er(e,t,i){return Ri({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function tr(e,t){return Ri({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}async function ir(e,t){const i=gv.instance.tagsView,s=i.canReveal?await i.revealTag(e,t):await gv.instance.repositoriesView.revealTag(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function sr(e,t,i,s){return Ri({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,createBranch:s?.createBranch,flags:s?.createBranch?["-b"]:void 0,reveal:s?.reveal}})}async function rr(e,t){const i=gv.instance.worktreesView,s=null!=e?i.canReveal?await i.revealWorktree(e,t):await gv.instance.repositoriesView.revealWorktree(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}async function nr(e){await(0,ki.dO)(c.nA.RevealInFileExplorer,e.uri)}function or(e){if(null!=e)switch(e){case Pi.Tc.NewWindow:return["--new-window"];case Pi.Tc.AddToWorkspace:return["--add-to-workspace"];case Pi.Tc.CurrentWindow:default:return[]}}function ar(e){if(null!=e)return e.includes("--new-window")?Pi.Tc.NewWindow:e.includes("--add-to-workspace")?Pi.Tc.AddToWorkspace:Pi.Tc.CurrentWindow}class CommitFilesQuickPickItem extends CommandQuickPickItem{constructor(e,t){super({label:e.summary,description:`${CommitFormatter.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${null!=t?.file?`$(file) ${(0,b.EZ)(t.file.path)}${t.file.formatStats({expand:!0,separator:", ",prefix:` ${c.NE.Dot} `})}`:`$(files) ${e.formatStats({expand:!0,separator:", ",empty:"No files changed"})}`}${null!=t?.hint?`${(0,C.vk)(c.NE.Dash,4,2,c.NE.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[hs,ls]},void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}}class CommitFileQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super({label:`${(0,C.vk)((0,D.Qw)(t.status),0,2)}${(0,b.EZ)(t.path)}`,description:(0,D.OC)(t,!0),picked:i}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return Ps(this.file,this.commit,e)}}class CommitBrowseRepositoryFromHereCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??`$(folder-opened) Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t}execute(e){return Fi(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}}class CommitCompareWithHEADCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(compare-changes) Compare with HEAD"),this.commit=e}execute(e){return gv.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"HEAD")}}class CommitCompareWithWorkingCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(compare-changes) Compare with Working Tree"),this.commit=e}execute(e){return gv.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"")}}class CommitCopyIdQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(copy) Copy SHA"),this.commit=e}execute(){return async function(e){await s.env.clipboard.writeText(e.ref)}(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),s.window.showInformationMessage("Commit SHA copied to the clipboard")}}class CommitCopyMessageQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(copy) Copy Message"),this.commit=e}execute(){return bs(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),s.window.showInformationMessage((this.commit.stashName?"Stash":"Commit")+" Message copied to the clipboard")}}class CommitOpenAllChangesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(git-compare) Open All Changes"),this.commit=e}execute(e){return Cs(this.commit,e)}}class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(git-compare) Open All Changes (difftool)"),this.commit=e}execute(){return async function(e,t){let i;if((0,A.f_)(e)?(null==e.files&&await e.ensureFullDetails(),i=e.files??[],t={repoPath:e.repoPath,ref:e.sha}):i=e,i.length>10){const e=await s.window.showWarningMessage(`Are you sure you want to open the changes for all ${i.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}for(const e of i)Ds(e,t)}(this.commit)}}class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(git-compare) Open All Changes with Working Tree"),this.commit=e}execute(e){return As(this.commit,e)}}class CommitOpenChangesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"$(git-compare) Open Changes"),this.commit=e,this.file=t}execute(e){return Ps(this.file,this.commit,e)}}class CommitOpenChangesWithDiffToolCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"$(git-compare) Open Changes (difftool)"),this.commit=e,this.file=t}execute(){return Ds(this.file,this.commit)}}class CommitOpenChangesWithWorkingCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"$(git-compare) Open Changes with Working File"),this.commit=e,this.file=t}execute(e){return Ss(this.file,this.commit,e)}}class CommitOpenDirectoryCompareCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(git-compare) Open Directory Compare"),this.commit=e}execute(){return async function(e){return ks(e.repoPath,e.ref,`${e.ref}^`)}(this.commit)}}class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(git-compare) Open Directory Compare with Working Tree"),this.commit=e}execute(){return async function(e){return ks(e.repoPath,e.ref,void 0)}(this.commit)}}class CommitOpenDetailsCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(eye) Open Details"),this.commit=e}execute(e){return Os(this.commit,{preserveFocus:e?.preserveFocus})}}class CommitOpenInGraphCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(gitlens-graph) Open in Commit Graph"),this.commit=e}execute(e){return async function(e,t){await(0,ki.P0)(c.Gh.ShowInCommitGraph,{ref:(0,u.qj)(e),preserveFocus:t?.preserveFocus})}(this.commit,{preserveFocus:e?.preserveFocus})}}class CommitOpenFilesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(files) Open Files"),this.commit=e}execute(e){return $s(this.commit)}}class CommitOpenFileCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"$(file) Open File"),this.commit=e,this.file=t}execute(e){return Rs(this.file,this.commit,e)}}class CommitOpenRevisionsCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(t??"$(files) Open Files at Revision"),this.commit=e}execute(e){return Ts(this.commit)}}class CommitOpenRevisionCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"$(file) Open File at Revision"),this.commit=e,this.file=t}execute(e){return Fs(this.file,this.commit,e)}}class CommitApplyFileChangesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??"Apply Changes"),this.commit=e,this.file=t}async execute(){return ys(this.file,this.commit)}}class CommitRestoreFileChangesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i){super(i??{label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return xs(this.file,this.commit)}}class OpenChangedFilesCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){const i={uris:e.map((e=>e.uri))};super(t??"$(files) Open All Changed Files",c.Gh.OpenChangedFiles,[i])}}class ConfigureCustomRemoteProviderCommandQuickPickItem extends CommandQuickPickItem{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await s.env.openExternal(s.Uri.parse("https://github.com/gitkraken/vscode-gitlens#remote-provider-integration-settings-"))}}class CopyOrOpenRemoteCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t,i,s){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:s}),this.remote=e,this.resource=t,this.clipboard=i}async execute(){let e=this.resource;if(e.type===at.J.Comparison)(0,p.Lo)(e.base)===this.remote.name&&(e={...e,base:(0,p.S3)(e.base)}),(0,p.Lo)(e.compare)===this.remote.name&&(e={...e,compare:(0,p.S3)(e.compare)});else if(e.type===at.J.CreatePullRequest){let t=e.base.branch;if(null==t&&(t=await gv.instance.git.getDefaultBranchName(this.remote.repoPath,this.remote.name),null==t&&this.remote.hasRichProvider())){const e=await(this.remote.provider.getDefaultBranch?.());t=e?.name}e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url}}}}else if(e.type===at.J.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){const{branchOrTag:t}=e,[i,s]=await Promise.allSettled([gv.instance.git.getBranches(this.remote.repoPath,{filter:e=>e.name===t||e.getNameWithoutRemote()===t}),gv.instance.git.getTags(this.remote.repoPath,{filter:e=>e.name===t})]),r=(0,Nt.Sb)(i)?.values[0]?.sha??(0,Nt.Sb)(s)?.values[0]?.sha;r&&(e={...e,type:at.J.Revision,sha:r})}await(this.clipboard?this.remote.provider.copy(e):this.remote.provider.open(e))}setAsDefault(){return this.remote.setAsDefault(!0)}}class CopyRemoteResourceCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){const i=ot.ss.getHighlanderProviders(e),s={resource:t,remotes:e,clipboard:!0};super(`$(copy) Copy Link to ${(0,at.C)(t)} for ${i?.length?i[0].name:"Remote"}${1===i?.length?"":c.NE.Ellipsis}`,c.Gh.OpenOnRemote,[s])}async onDidPressKey(e){await super.onDidPressKey(e),s.window.showInformationMessage("URL copied to the clipboard")}}class OpenRemoteResourceCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){const i=ot.ss.getHighlanderProviders(e),s={resource:t,remotes:e,clipboard:!1};super(`$(link-external) Open ${(0,at.C)(t)} on ${1===i?.length?i[0].name:`${i?.length?i[0].name:"Remote"}${c.NE.Ellipsis}`}`,c.Gh.OpenOnRemote,[s])}}var lr=i(4968),cr=i(1774);function hr(e,t,i,s){if(1===i.repos.length)return s?`${e}${(0,C.$G)(s,c.d$-e.length)}`:e;let r;return r=null!=t.repo?`${s??""}${(0,C.vk)(c.NE.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${s??""}${(0,C.vk)(c.NE.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,C.vk)(c.NE.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,C.$G)(r,c.d$-e.length)}`}async function ur(e,t){return mr(e,["branches"],{buttons:t?.buttons,filter:null!=t?.filter?{branches:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{branches:t.sort}})}async function dr(e,t){if(null==e)return[];return(await e.getRemotes(null!=t?.filter?{filter:t.filter}:void 0)).map((e=>$l(e,null!=t?.picked&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0})))}async function pr(e,{buttons:t,filter:i,includeStatus:s,picked:r}){const n=e instanceof lt._j?await e.getWorktrees():e;return Promise.all([...n.filter((e=>null==i||i(e))).map((async e=>function(e,t,i){let s,r,n="";i?.type&&(n="worktree");null!=i?.status&&(n+=i.status.hasChanges?(0,C.vk)(`Uncommited changes (${i.status.getFormattedDiffStatus()})`,n?2:0,0):(0,C.vk)("No changes",n?2:0,0));switch(e.type){case"bare":r="(bare)",s="$(folder)";break;case"branch":r=e.branch,s="$(git-branch)";break;case"detached":r=(0,u.zL)(e.sha),s="$(git-commit)"}const o={label:`${s}${c.NE.Space}${r}${i?.checked?(0,C.vk)("$(check)",2):""}`,description:n,detail:i?.path?`In $(folder) ${e.friendlyPath}`:void 0,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,opened:e.opened,hasChanges:i?.status?.hasChanges};return o}(e,null!=r&&("string"==typeof r?e.uri.toString()===r:r.includes(e.uri.toString())),{buttons:t,path:!0,status:s?await e.getStatus():void 0})))])}async function mr(e,t,{buttons:i,filter:s,picked:r,sort:n}={}){if(null==e)return[];let o,a,l=!1;if(e instanceof lt._j||1===e.length){l=!0;const i=e instanceof lt._j?e:e[0],[r,c]=await Promise.allSettled([t.includes("branches")?i.getBranches({filter:s?.branches,sort:"boolean"==typeof n?n:n?.branches}):void 0,t.includes("tags")?i.getTags({filter:s?.tags,sort:!0}):void 0]);o=(0,Nt.Sb)(r)?.values??[],a=(0,Nt.Sb)(c)?.values??[]}else{const[i,r]=await Promise.allSettled([t.includes("branches")?Promise.allSettled(e.map((e=>e.getBranches({filter:s?.branches,sort:"boolean"==typeof n?n:n?.branches})))):void 0,t.includes("tags")?Promise.allSettled(e.map((e=>e.getTags({filter:s?.tags,sort:"boolean"==typeof n?n:n?.tags})))):void 0]),l="fulfilled"===i.status?i.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0,c="fulfilled"===r.status?r.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0;t.includes("branches")&&null!=l&&(o=(0,p.YF)((0,y.jV)(l,((e,t)=>e.name===t.name)))),t.includes("tags")&&null!=c&&(a=(0,pe.Pj)((0,y.jV)(c,((e,t)=>e.name===t.name))))}return null!=o&&0!==o.length||null!=a&&0!==a.length?null==o||0===o.length||null!=a&&0!==a.length?null==a||0===a.length||null!=o&&0!==o.length?[Yi("Branches"),...await Promise.all(o.filter((e=>!e.remote)).map((e=>kl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l})))),Yi("Tags"),...a.map((e=>xl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,message:!1,ref:l,type:!0}))),Yi("Remote Branches"),...await Promise.all(o.filter((e=>e.remote)).map((e=>kl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"}))))]:a.map((e=>xl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,message:!1,ref:l}))):[Yi("Branches"),...await Promise.all(o.filter((e=>!e.remote)).map((e=>kl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"})))),Yi("Remote Branches"),...await Promise.all(o.filter((e=>e.remote)).map((e=>kl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"}))))]:[]}function gr(e,t){return async(i,s)=>{let r=!1;if(s.startsWith("#")&&(r=!0,s=s.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(r&&t?.ranges&&(0,u.yk)(s))return i.items=[Fl(s,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await gv.instance.git.validateReference(e.path,s))return!!r&&(i.items=[Zi(Ki.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!r&&await gv.instance.git.hasBranchOrTag(e.path,{filter:{branches:e=>e.name.includes(s),tags:e=>e.name.includes(s)}}))return!1;const n=await gv.instance.git.getCommit(e.path,s);return i.items=[Rl(n,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:!0})],!0}}async function*fr(e,t,i){const s=Jr({title:hr(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e){const i=await gv.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid branch name`]}let i=!0;for(const s of e.repos)if(i=await gv.instance.git.validateBranchOrTagName(s.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),r=yield s;return zr(s,e,r)&&await Yr(s,e,r)?r:Qr}async function*wr(e,t,i){const s=Jr({title:hr(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid remote name"];if(!!/[^a-zA-Z0-9-_.]/.test(t))return[!1,`'${t}' isn't a valid remote name`];if("repo"in e){if(0!==(await e.repo.getRemotes({filter:e=>e.name===t})).length)return[!1,`Remote named '${t}' already exists`]}return[!0,void 0]}}),r=yield s;return zr(s,e,r)&&await Yr(s,e,r)?r:Qr}async function*vr(e,t,i){const s=Jr({title:hr(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];const t=yt.gK.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),r=yield s;return zr(s,e,r)&&await Yr(s,e,r)?r:Qr}async function*yr(e,t,i){const s=Jr({title:hr(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){const i=await gv.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}let i=!0;for(const s of e.repos)if(i=await gv.instance.git.validateBranchOrTagName(s.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),r=yield s;return zr(s,e,r)&&await Yr(s,e,r)?r:Qr}async function*br(e,t,{filter:i,picked:s,placeholder:r,titleContext:n}){const o=await ur(e.repo,{buttons:[ls],filter:i,picked:s}),a={title:hr(`${t.title}${n??""}`,e,t),placeholder:0===o.length?`No branches found in ${e.repo.formattedName}`:r,matchOnDetail:!0,items:0===o.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:o,onDidClickItemButton:(e,t,{item:i})=>{t===ls&&vs(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await vs(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},l=yield a;return jr(a,e,l)?l[0].item:Qr}async function*Cr(e,t,{filter:i,picked:s,placeholder:r,sort:n,titleContext:o}){const a=await ur(e.repo,{buttons:[ls],filter:i,picked:s,sort:n}),l={multiselect:0!==a.length,title:hr(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No branches found in ${e.repo.formattedName}`:r,matchOnDetail:!0,items:0===a.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{t===ls&&vs(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await vs(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},c=yield l;return jr(l,e,c)?c.map((e=>e.item)):Qr}async function*Ar(e,t,{filter:i,picked:s,placeholder:r,titleContext:n,value:o,additionalButtons:a,ranges:l}){t.showTags=!0;const h=new ds(t.showTags),d=async()=>mr(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[ns,ls]:[ls],filter:i,picked:s,sort:!0}),p=await d(),m={title:hr(`${t.title}${n??""}`,e,t),placeholder:0===p.length?`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`:`${"string"==typeof r?r:r(t)}${c.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:o,selectValueWhenShown:!0,items:0===p.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:p,additionalButtons:[...a??[],h],onDidClickItemButton:(e,i,{item:s})=>i===ns?(t.pickCommitForItem=!0,!0):(i===ls&&((0,u.UR)(s)?vs(s,{select:!0,focus:!1,expand:!0}):(0,u.gA)(s)?ir(s,{select:!0,focus:!1,expand:!0}):(0,u.FT)(s)&&Os(s,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,s)=>{if(s===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;const s=await d();i.placeholder=0===s.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof r?r:r(t)}${c.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=s}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,u.UR)(t)?vs(t,{select:!0,focus:!1,expand:!0}):(0,u.gA)(t)?ir(t,{select:!0,focus:!1,expand:!0}):(0,u.FT)(t)&&Os(t,{pin:!1,preserveFocus:!0})},onValidateValue:gr(e.repo,{ranges:l})},g=yield m;return jr(m,e,g)?g[0].item:Qr}async function*Pr(e,t,{filter:i,picked:s,placeholder:r,titleContext:n,value:o}){t.showTags=1===e.repos.length;const a=new ds(t.showTags),l=()=>mr(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[ls],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...i},picked:s??e.reference?.ref,sort:{branches:{orderBy:te.Vz.DateDesc},tags:{orderBy:te.RV.DateDesc}}}),h=await l(),d={title:hr(`${t.title}${n??""}`,e,t),placeholder:0===h.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof r?r:r(t)}${c.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:o??((0,u.FT)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:0===h.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:h,additionalButtons:[a],onDidClickItemButton:(e,t,{item:i})=>{t===ls&&((0,u.UR)(i)?vs(i,{select:!0,focus:!1,expand:!0}):(0,u.gA)(i)?ir(i,{select:!0,focus:!1,expand:!0}):(0,u.FT)(i)&&Os(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,s)=>{if(s===a){i.busy=!0;try{t.showTags=!t.showTags,a.on=t.showTags;const s=await l();i.placeholder=0===s.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof r?r:r(t)}${c.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=s}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,u.UR)(t)?vs(t,{select:!0,focus:!1,expand:!0}):(0,u.gA)(t)?ir(t,{select:!0,focus:!1,expand:!0}):(0,u.FT)(t)&&Os(t,{pin:!1,preserveFocus:!0})},onValidateValue:gr(e.repos)},p=yield d;return jr(d,e,p)?p[0].item:Qr}async function*Dr(e,t,{ignoreFocusOut:i,log:s,onDidLoadMore:n,picked:o,placeholder:a,showInSideBarCommand:l,showInSideBarButton:c,titleContext:h}){function u(e){return null==e?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:[...(0,ye.UI)(e.commits.values(),(e=>Rl(e,null!=o&&("string"==typeof o?e.ref===o:o.includes(e.ref)),{buttons:[hs,ls],compact:!0,icon:!0}))),...e?.hasMore?[Zi(Ki.LoadMore)]:[]]}const d={title:hr(`${t.title}${h??""}`,e,t),placeholder:"string"==typeof a?a:a(t,s),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof o&&0===s?.count?o:void 0,selectValueWhenShown:!0,items:null!=l?[l,...u(s)]:u(s),onDidLoadMore:async e=>(e.keepScrollPosition=!0,s=await(s?.more?.(r.D.get("advanced.maxListItems"))),n?.(s),"string"!=typeof a&&(e.placeholder=a(t,s)),u(s)),additionalButtons:[...null!=c?.button?[c?.button]:[],...s?.hasMore?[ts]:[]],onDidClickItemButton:(e,t,i)=>{if(!CommandQuickPickItem.is(i))switch(t){case hs:Os(i.item,{pin:!1,preserveFocus:!0});break;case ls:Is(i.item,{select:!0,focus:!1,expand:!0})}},onDidClickButton:(e,t)=>{if(null==s)return;const i=e.activeItems.filter((e=>!CommandQuickPickItem.is(e)));t===c?.button&&c.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{if(0===e.activeItems.length)return;const i=e.activeItems.filter((e=>!CommandQuickPickItem.is(e)));"ctrl+right"===t?Os(i[0].item,{pin:!1,preserveFocus:!0}):await Is(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:gr(e.repo,{buttons:[hs,ls]})},p=yield d;return jr(d,e,p)?CommandQuickPickItem.is(p[0])?(Zr(e),await p[0].execute(),Qr):p[0].item:Qr}function*Sr(e,t,{log:i,onDidLoadMore:s,picked:n,placeholder:o,titleContext:a}){function l(e){return null==e?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:[...(0,ye.UI)(e.commits.values(),(e=>Rl(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:[hs,ls],compact:!0,icon:!0})))]}const c={title:hr(`${t.title}${a??""}`,e,t),multiselect:null!=i,placeholder:"string"==typeof o?o:o(t,i),matchOnDescription:!0,matchOnDetail:!0,items:l(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await(i?.more?.(r.D.get("advanced.maxListItems"))),s?.(i),"string"!=typeof o&&(e.placeholder=o(t,i)),l(i)),additionalButtons:[...i?.hasMore?[ts]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case hs:Os(i,{pin:!1,preserveFocus:!0});break;case ls:Is(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&("ctrl+right"===t?Os(e.activeItems[0].item,{pin:!1,preserveFocus:!0}):await Is(e.activeItems[0].item,{select:!0,focus:!1,expand:!0}))}},h=yield c;return jr(c,e,h)?h.map((e=>e.item)):Qr}async function*kr(e,t,i="Choose contributors"){const s=(await gv.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,r={title:hr(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:(await gv.instance.git.getContributors(e.repo.path)).map((e=>{return t=e,i=s?.includes(e.getCoauthor()),r={buttons:[ls]},{label:t.label,description:t.email,alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:i,item:t};var t,i,r})),onDidClickItemButton:(e,t,{item:i})=>{t===ls&&Es(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&Es(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},n=yield r;return jr(r,e,n)?n.map((e=>e.item)):Qr}async function*Rr(e,t,{filter:i,picked:s,placeholder:r,titleContext:n}){const o=await dr(e.repo,{buttons:[ls],filter:i,picked:s}),a={title:hr(`${t.title}${n??""}`,e,t),placeholder:0===o.length?`No remotes found in ${e.repo.formattedName}`:r,matchOnDetail:!0,items:0===o.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:o,onDidClickItemButton:(e,t,{item:i})=>{t===ls&&Ws(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await Ws(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},l=yield a;return jr(a,e,l)?l[0].item:Qr}async function*Fr(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=gv.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;const s=e.repo??await gv.instance.git.getOrOpenRepositoryForEditor(),r={title:t.title,placeholder:i,items:0===t.repos.length?[Zi(Ki.Cancel)]:await Promise.all(t.repos.map((e=>Tl(e,e.id===s?.id,{branch:!0,buttons:[ls],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:s})=>{i===ls&&js(s.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&js(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}},n=yield r;return jr(r,e,n)?n[0].item:Qr}async function*$r(e,t,i){let s;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos)if((0,y.GI)(e.repos)){if(s=(0,y.DZ)(e.repos,(e=>t.repos.find((t=>t.path===e)))),i.skipIfPossible&&0!==s.length&&e.repos.length===s.length)return s}else s=e.repos;else{const e=await gv.instance.git.getOrOpenRepositoryForEditor();s=null!=e?[e]:[]}const r={multiselect:!0,title:t.title,placeholder:i.placeholder,items:0===t.repos.length?[Zi(Ki.Cancel)]:await Promise.all(t.repos.map((e=>Tl(e,s.some((t=>t.id===e.id)),{branch:!0,buttons:[ls],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:s})=>{i===ls&&js(s.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&js(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}},n=yield r;return jr(r,e,n)?n.map((e=>e.item)):Qr}function*Tr(e,t,{ignoreFocusOut:i,stash:s,picked:r,placeholder:n,titleContext:o}){const a={title:hr(`${t.title}${o??""}`,e,t),placeholder:"string"==typeof n?n:n(t,s),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==s?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:[...(0,ye.UI)(s.commits.values(),(e=>Rl(e,null!=r&&("string"==typeof r?e.ref===r:r.includes(e.ref)),{buttons:[hs],compact:!0,icon:!0})))],onDidClickItemButton:(e,t,{item:i})=>{t===hs&&Xs(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await Xs(e.activeItems[0].item,{pin:!1,preserveFocus:!0})}},l=yield a;return jr(a,e,l)?l[0].item:Qr}async function*xr(e,t,{filter:i,picked:s,placeholder:r,titleContext:n}){const o=await async function(e,t){return mr(e,["tags"],{buttons:t?.buttons,filter:null!=t?.filter?{tags:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{tags:t.sort}})}(e.repo,{buttons:[ls],filter:i,picked:s}),a={multiselect:0!==o.length,title:hr(`${t.title}${n??""}`,e,t),placeholder:0===o.length?`No tags found in ${e.repo.formattedName}`:r,matchOnDetail:!0,items:0===o.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:o,onDidClickItemButton:(e,t,{item:i})=>{t===ls&&ir(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await ir(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},l=yield a;return jr(a,e,l)?l.map((e=>e.item)):Qr}async function*Ir(e,t,{filter:i,includeStatus:s,picked:r,placeholder:n,titleContext:o}){const a=await pr(t.worktrees??e.repo,{buttons:[as,ls],filter:i,includeStatus:s,picked:r}),l={title:hr(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===a.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case as:(0,Pi.ic)(i.uri,{location:Pi.Tc.NewWindow});break;case ls:rr(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await rr(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},c=yield l;return jr(l,e,c)?c[0].item:Qr}async function*_r(e,t,{filter:i,includeStatus:s,picked:r,placeholder:n,titleContext:o}){const a=await pr(t.worktrees??e.repo,{buttons:[as,ls],filter:i,includeStatus:s,picked:r}),l={multiselect:0!==a.length,title:hr(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===a.length?[Zi(Ki.Back,!0),Zi(Ki.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case as:(0,Pi.ic)(i.uri,{location:Pi.Tc.NewWindow});break;case ls:rr(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await rr(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}},c=yield l;return jr(l,e,c)?c.map((e=>e.item)):Qr}async function*Or(e,t){const i={title:hr((0,u.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,u.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:await Br(e),onDidClickItemButton:(t,i,s)=>{switch(i){case hs:(0,u.pZ)(e.reference)?Xs(e.reference,{pin:!1,preserveFocus:!0}):Os(e.reference,{pin:!1,preserveFocus:!0});break;case ls:(0,u.pZ)(e.reference)?Zs(e.reference,{select:!0,focus:!1,expand:!0}):Is(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}},s=yield i;return jr(i,e,s)?s[0]:Qr}async function Br(e){const t=[new CommitOpenDetailsCommandQuickPickItem(e.reference),new CommitOpenInGraphCommandQuickPickItem(e.reference)];let i;if((0,A.G2)(e.reference))t.push(Yi("Actions"),new GitCommandQuickPickItem("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new GitCommandQuickPickItem("Delete Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,reference:e.reference}}),Yi(),new CommitCopyMessageQuickPickItem(e.reference));else{const s=await gv.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});s?.length&&t.push(Yi(ot.ss.getHighlanderProviderName(s)??"Remote"),new OpenRemoteResourceCommandQuickPickItem(s,{type:at.J.Commit,sha:e.reference.sha}),new CopyRemoteResourceCommandQuickPickItem(s,{type:at.J.Commit,sha:e.reference.sha})),t.push(Yi("Actions"));const r=await gv.instance.git.getBranch(e.repo.path),[n,o]=await Promise.all([null!=r?gv.instance.git.getCommitBranches(e.repo.path,e.reference.ref,{branch:r.name,commitDate:(0,A.f_)(e.reference)?e.reference.committer.date:void 0}):void 0,r?.remote||null==r?.upstream?void 0:e.reference.isPushed()]);Boolean(n?.length)?(i=!o,i&&t.push(new GitCommandQuickPickItem("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),t.push(new GitCommandQuickPickItem("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new GitCommandQuickPickItem(`Reset ${r?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new GitCommandQuickPickItem(`Reset ${r?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,u.xB)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):t.push(new GitCommandQuickPickItem("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),t.push(new GitCommandQuickPickItem(`Rebase ${r?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,reference:e.reference}}),new GitCommandQuickPickItem("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),Yi(),new GitCommandQuickPickItem("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new GitCommandQuickPickItem("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),Yi("Copy"),new CommitCopyIdQuickPickItem(e.reference),new CommitCopyMessageQuickPickItem(e.reference))}return t.push(Yi("Open"),new CommitOpenAllChangesCommandQuickPickItem(e.reference),new CommitOpenAllChangesWithWorkingCommandQuickPickItem(e.reference),new CommitOpenAllChangesWithDiffToolCommandQuickPickItem(e.reference),Yi(),new CommitOpenFilesCommandQuickPickItem(e.reference),new CommitOpenRevisionsCommandQuickPickItem(e.reference)),t.push(Yi("Compare"),new CommitCompareWithHEADCommandQuickPickItem(e.reference),new CommitCompareWithWorkingCommandQuickPickItem(e.reference)),t.push(Yi(),new CommitOpenDirectoryCompareCommandQuickPickItem(e.reference),new CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem(e.reference)),t.push(Yi("Browse"),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{openInNewWindow:!1}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{before:!0,openInNewWindow:!1}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{openInNewWindow:!0}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{before:!0,openInNewWindow:!0})),t.splice(0,0,new CommitFilesQuickPickItem(e.reference,{unpublished:i,hint:"Click to see all changed files"})),t}function*Er(e,t,i){e.reference.files;const s={title:hr((0,u.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,u.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new CommitFilesQuickPickItem(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,A.G2)(e.reference)?"stash":"commit"} actions`}),Yi("Files"),...e.reference.files?.map((t=>new CommitFileQuickPickItem(e.reference,t,i?.picked===t.path)))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,s)=>{switch(i){case hs:(0,u.pZ)(e.reference)?Xs(e.reference,{pin:!1,preserveFocus:!0}):Os(e.reference,{pin:!1,preserveFocus:!0});break;case ls:(0,u.pZ)(e.reference)?Zs(e.reference,{select:!0,focus:!1,expand:!0}):Is(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}},r=yield s;return jr(s,e,r)?r[0]:Qr}async function*Mr(e,t){const i={title:hr((0,u.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,C.vk)(c.NE.Dot,2,2)}${(0,cr.d)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,cr.d)(e.fileName,{relativeTo:e.repo.path})} in ${(0,u.Wh)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:await Wr(e),matchOnDescription:!0,onDidClickItemButton:(t,i,s)=>{switch(i){case hs:(0,u.pZ)(e.reference)?Xs(e.reference,{pin:!1,preserveFocus:!0}):Os(e.reference,{pin:!1,preserveFocus:!0});break;case ls:(0,u.pZ)(e.reference)?Zs(e.reference,{select:!0,focus:!1,expand:!0}):Is(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}},s=yield i;return jr(i,e,s)?s[0]:Qr}async function Wr(e){const t=await e.reference.findFile(e.fileName);if(null==t)return[];const i=[new CommitOpenDetailsCommandQuickPickItem(e.reference),new CommitOpenInGraphCommandQuickPickItem(e.reference)];if((0,A.G2)(e.reference))i.push(Yi(),new CommitCopyMessageQuickPickItem(e.reference),Yi("Actions"),new CommitApplyFileChangesCommandQuickPickItem(e.reference,t),new CommitRestoreFileChangesCommandQuickPickItem(e.reference,t),Yi(),new CommitCopyMessageQuickPickItem(e.reference));else{const s=await gv.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});s?.length&&i.push(Yi(ot.ss.getHighlanderProviderName(s)??"Remote"),new OpenRemoteResourceCommandQuickPickItem(s,{type:at.J.Revision,fileName:e.fileName,commit:e.reference}),new CopyRemoteResourceCommandQuickPickItem(s,{type:at.J.Revision,fileName:e.fileName,commit:e.reference}),Yi(),new OpenRemoteResourceCommandQuickPickItem(s,{type:at.J.Commit,sha:e.reference.ref}),new CopyRemoteResourceCommandQuickPickItem(s,{type:at.J.Commit,sha:e.reference.sha})),i.push(Yi("Actions"),new CommitApplyFileChangesCommandQuickPickItem(e.reference,t),new CommitRestoreFileChangesCommandQuickPickItem(e.reference,t),Yi("Copy"),new CommitCopyIdQuickPickItem(e.reference),new CommitCopyMessageQuickPickItem(e.reference))}return i.push(Yi("Open"),new CommitOpenChangesCommandQuickPickItem(e.reference,e.fileName),new CommitOpenChangesWithWorkingCommandQuickPickItem(e.reference,e.fileName),new CommitOpenChangesWithDiffToolCommandQuickPickItem(e.reference,e.fileName),Yi()),"D"!==t.status&&i.push(new CommitOpenFileCommandQuickPickItem(e.reference,t)),i.push(new CommitOpenRevisionCommandQuickPickItem(e.reference,t)),i.push(Yi("Compare"),new CommitCompareWithHEADCommandQuickPickItem(e.reference),new CommitCompareWithWorkingCommandQuickPickItem(e.reference)),i.push(Yi("Browse"),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{openInNewWindow:!1}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{before:!0,openInNewWindow:!1}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{openInNewWindow:!0}),new CommitBrowseRepositoryFromHereCommandQuickPickItem(e.reference,{before:!0,openInNewWindow:!0})),i.splice(0,0,new CommitFilesQuickPickItem(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*Lr(e,t){const i=t.status.getUpstreamStatus({expand:!0,separator:", "}),s=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),r={title:hr(t.title,e,t),placeholder:`${i?`${i}, ${s}`:s}`,ignoreFocusOut:!0,items:Ur(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}},n=yield r;return jr(r,e,n)?n[0]:Qr}function Ur(e,t){const i=[],s=t.status.computeWorkingTreeStatus();let r;return r=0===s.staged&&0===s.unstaged?"No working tree changes":`$(files) ${s.staged?`${(0,C._6)("staged file",s.staged)} (${s.stagedStatus})`:""}${s.unstaged?`${s.staged?", ":""}${(0,C._6)("unstaged file",s.unstaged)} (${s.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.state.ahead&&0===t.status.state.behind?i.push(Zi(Ki.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream}`,detail:r})):0!==t.status.state.ahead&&0!==t.status.state.behind?i.push(Zi(Ki.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream}`,detail:r})):0!==t.status.state.ahead?i.push(Zi(Ki.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream}`,detail:r})):0!==t.status.state.behind&&i.push(Zi(Ki.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream}`,detail:r})),0!==t.status.state.behind&&i.push(new GitCommandQuickPickItem(`$(cloud-download) ${(0,C._6)("commit",t.status.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,u.xB)((0,u.oI)(t.status.ref,t.status.upstream),e.repo.path)}})),0!==t.status.state.ahead&&i.push(new GitCommandQuickPickItem(`$(cloud-upload) ${(0,C._6)("commit",t.status.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,u.xB)((0,u.oI)(t.status.upstream,t.status.ref),e.repo.path)}}))):i.push(Zi(Ki.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:r})),t.status.files.length&&i.push(new OpenChangedFilesCommandQuickPickItem(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges))),s.staged>0&&i.push(new OpenChangedFilesCommandQuickPickItem(s.stagedAddsAndChanges,{label:"$(files) Open Staged Files"})),s.unstaged>0&&i.push(new OpenChangedFilesCommandQuickPickItem(s.unstagedAddsAndChanges,{label:"$(files) Open Unstaged Files"})),t.status.files.length&&i.push(new CommandQuickPickItem("$(x) Close Unchanged Files",c.Gh.CloseUnchangedFiles)),i}async function*Nr(e,t,i){const s=await gv.instance.git.access(i,e.repo.path);if(s.allowed)return;const r=[];let n;if(!1===s.subscription.current.account?.verified)r.push(Zi(Ki.RequiresVerification,!0)),n="You must verify your email address before you can continue";else{if(null==s.subscription.required)return;n="You need GitLens Pro to access GitLens+ features on this repo",(0,lr.aG)(s.subscription.required)&&null!=s.subscription.current.account?r.push(Zi(Ki.RequiresPaidSubscription,!0)):null!=s.subscription.current.account||(0,lr.gA)(s.subscription.current)?r.push(Zi(Ki.ExtendTrial)):r.push(Zi(Ki.StartPreviewTrial,!0))}const o={title:hr(t.title,e,t),placeholder:n,items:[...r,Zi(Ki.Cancel)]};return jr(o,e,yield o)?void 0:Qr}function Gr(e){return"object"==typeof e&&null!=e.show}function Hr(e){return"object"==typeof e&&null==e.items&&null==e.show}function Vr(e){return"object"==typeof e&&null!=e.items}const Qr=Symbol("BreakStep");class QuickCommand{constructor(e,t,i,s,r={}){this.container=e,this.key=t,this.label=i,this.title=s,this._picked=!1,this._pickedVia="menu",this.description=r.description,this.detail=r.detail}get canConfirm(){return!0}get canSkipConfirm(){return!0}get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!r.D.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(Ki.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));const t=await this._stepsIterator.next(e);return t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===Qr?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(Ki.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,s={}){return Kr(e,t,{title:this.title},i,s)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}}function qr(e){return e instanceof QuickCommand}async function Yr(e,t,i){if(!zr(e,t,i))return!1;const[s]=await(e.validate?.(i))??[!0];return!!s&&(t.counter++,!0)}function jr(e,t,i){return!!zr(e,t,i)&&(!!(e.validate?.(i)??1)&&(t.counter++,!0))}function zr(e,t,i){if(null==i)return!1;if(Ji(i)){switch(i){case Ki.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case Ki.Cancel:Zr(t)}return!1}return!0}function Kr(e,t,i,s,r={}){return{placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,s??Zi(Ki.Cancel)],selectedItems:[t.find((e=>e.picked))??t[0]],...r}}function Jr(e){return e.ignoreFocusOut=!0,e}function Zr(e){e.counter=-1}function Xr(e){if(!(e.repo instanceof lt._j&&"create"===e.subcommand))throw new Error("Missing repository")}function en(e){if(!(e.repo instanceof lt._j&&"delete"===e.subcommand))throw new Error("Missing repository")}function tn(e){if(!(e.repo instanceof lt._j&&"rename"===e.subcommand))throw new Error("Missing repository")}function sn(e){if(!Array.isArray(e.references))throw new Error("Missing branches")}const rn=new Map([["create","Create"],["delete","Delete"],["rename","Rename"]]);function nn(e,t){return null==t?e:`${rn.get(t)} ${e}`}class BranchGitCommand extends QuickCommand{constructor(e,t){super(e,"branch","branch","Branch",{description:"create, rename, or delete branches"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"create":case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={associatedView:this.container.branchesView,repos:this.container.git.openRepositories,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===Qr)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=nn("delete"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)continue;e.repo=i}switch(e.subcommand){case"create":Xr(e),yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":en(e),yield*this.deleteCommandSteps(e,t);break;case"rename":tn(e),yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:Zr(e)}i&&e.counter--}return e.counter<0?Qr:void 0}*pickSubcommandStep(e){const t={title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]},i=yield t;return jr(t,e,i)?i[0].item:Qr}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Ar(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new branch from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,u.FT)(e.reference)?e.reference.ref:void 0});if(i===Qr)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*fr(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,u.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??(0,u.Av)(e.reference)});if(i===Qr)continue;e.name=i}if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e),e.flags.includes("--switch")?await e.repo.switch(e.reference.ref,{createBranch:e.name}):e.repo.branch(...e.flags,e.name,e.reference.ref)}}*createCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,u.Wh)(e.reference)}`}),ji(e.flags,["--switch"],{label:`${t.title} and Switch`,description:"--switch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,u.Wh)(e.reference)}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}async*deleteCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=nn("Branches",e.subcommand);const i=yield*Cr(e,t,{filter:e=>!e.current,picked:e.references?.map((e=>e.ref)),placeholder:"Choose branches to delete",sort:{current:!1,missingUpstream:!0}});if(i===Qr)break;e.references=i}t.title=nn((0,C._6)("Branch",e.references.length,{only:!0,plural:"Branches"}),e.subcommand),sn(e);const i=yield*this.deleteCommandConfirmStep(e,t);i!==Qr&&(e.flags=i,Zr(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}*deleteCommandConfirmStep(e,t){const i=[ji(e.flags,[],{label:t.title,detail:`Will delete ${(0,u.Wh)(e.references)}`})];e.references.every((e=>e.remote))||(i.push(ji(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,u.Wh)(e.references)}`})),e.references.some((e=>null!=e.upstream))&&i.push(ji(e.flags,["--remotes"],{label:`${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--remotes",detail:`Will delete ${(0,u.Wh)(e.references)} and any remote tracking branches`}),ji(e.flags,["--force","--remotes"],{label:`Force ${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--force --remotes",detail:`Will forcibly delete ${(0,u.Wh)(e.references)} and any remote tracking branches`})));const s=Kr(hr(`Confirm ${t.title}`,e,t),i,t),r=yield s;return jr(s,e,r)?r[0].item:Qr}async*renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*br(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===Qr)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*fr(e,t,{placeholder:`Please provide a new name for ${(0,u.Wh)(e.reference,{icon:!1})}`,titleContext:` ${(0,u.Wh)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===Qr)continue;e.name=i}const i=yield*this.renameCommandConfirmStep(e,t);i!==Qr&&(e.flags=i,Zr(e),e.repo.branch(...e.flags,e.reference.ref,e.name))}}*renameCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,u.Wh)(e.reference)} to ${e.name}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}}class CherryPickGitCommand extends QuickCommand{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map((e=>e.ref)).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,u.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.references||0===e.references.length){const s=yield*Ar(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(s===Qr){i&&e.counter--;continue}(0,u.FT)(s)?(e.references=[s],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=s}if(e.counter<3&&null!=t.selectedBranchOrTag){const i=(0,u.oI)(t.destination.ref,t.selectedBranchOrTag.ref);let s=t.cache.get(i);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,s));const r=yield*Sr(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map((e=>e.ref)),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,u.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,u.Wh)(e.destination,{icon:!1})}`});if(r===Qr)continue;e.references=r}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}*confirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will apply ${(0,u.Wh)(e.references)} to ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,u.Wh)(e.references)} to ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,u.Wh)(e.references)} to ${(0,u.Wh)(t.destination)} without Committing`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}}class CoAuthorsGitCommand extends QuickCommand{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.contributors||Array.isArray(t.state.contributors)&&0===t.state.contributors.length||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){const t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value;const s=i.indexOf("Co-authored-by: ");-1!==s&&(i=i.substring(0,s-1).trimRight()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]);for(const t of e.contributors){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await(0,ki.dO)(c.nA.ShowSCM)}async*steps(e){const t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.contributorsView,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter((e=>i.find((t=>(0,b.AH)(t.rootUri.fsPath)===e.path)))),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some((e=>e.rootUri.fsPath===t.activeRepo.path))||(t.activeRepo=void 0));let s=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(s=!1,1===t.repos.length)s=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(e.counter<2||null==e.contributors){const i=yield*kr(e,t,"Choose contributors to add as co-authors");if(i===Qr){s&&e.counter--;continue}e.contributors=i}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}}class FetchGitCommand extends QuickCommand{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,u.UR)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,y.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repos=[t.repos[0]];else{const i=yield*$r(e,t,{skipIfPossible:e.counter>=1});if(i===Qr)break;e.repos=i}if(this.confirm(e.confirm)){const s=yield*this.confirmStep(e,t);if(s===Qr){i&&e.counter--;continue}e.flags=s}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}async*confirmStep(e,t){let i,s="";if(1===e.repos.length){const t=await e.repos[0].getLastFetched();0!==t&&(s=`${(0,C.vk)(c.NE.Dot,2,2)}Last fetched ${(0,ie.Zh)(new Date(t))}`)}if(1===e.repos.length&&(0,u.UR)(e.reference))i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t,s),[ji(e.flags,[],{label:this.title,detail:`Will fetch ${(0,u.Wh)(e.reference)}`})]);else{const r=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`;i=Kr(hr(`Confirm ${this.title}`,e,t,s),[ji(e.flags,[],{label:this.title,detail:`Will fetch ${r}`}),ji(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${r}`}),ji(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${r}`}),ji(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${r}`})],t)}const r=yield i;return jr(i,e,r)?r[0].item:Qr}}function on(e){if(!(e.repo instanceof lt._j))throw new Error("Missing repository")}class LogGitCommand extends QuickCommand{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&(i++,"HEAD"!==t.state.reference&&(0,u.FT)(t.state.reference)&&!(0,u.Nn)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,selectedBranchOrTag:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(on(e),"HEAD"===e.reference){const t=await e.repo.getBranch();e.reference=t}if(e.counter<2||null==e.reference){const s=yield*Ar(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(s===Qr){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,u.FT)(e.reference)&&!(0,u.Nn)(e.reference)||(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,C.vk)(c.NE.Dot,2,2)}${(0,u.Wh)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,C.vk)(c.NE.Dot,2,2)}${(0,cr.d)(e.fileName,{fileOnly:!0,truncateTo:c.d$-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){const i=t.selectedBranchOrTag.ref;let s=t.cache.get(i);null==s&&(s=null!=e.fileName?this.container.git.getLogForFile(e.repo.path,e.fileName,{ref:i}):this.container.git.getLog(e.repo.path,{ref:i}),t.cache.set(i,s));const r=yield*Dr(e,t,{ignoreFocusOut:!0,log:await s,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,u.Wh)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(r===Qr)continue;e.reference=r}let s;e.reference instanceof A.aM&&null==e.reference.file||(e.reference=await this.container.git.getCommit(e.repo.path,e.reference.ref)),e.openPickInView?(Os(e.reference,{pin:!1,preserveFocus:!1}),s=Qr):s=yield*Sl(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,s===Qr&&Zr(e)}return e.counter<0?Qr:void 0}}class MergeGitCommand extends QuickCommand{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){return e.repo.merge(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,u.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const s=new os(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,s.on=t.pickCommit})),r=yield*Ar(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[s]});if(r===Qr){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((0,u.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let s=t.cache.get(i);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,s));const r=yield*Dr(e,t,{ignoreFocusOut:!0,log:await s,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,u.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,u.Wh)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(r===Qr)continue;e.reference=r}const s=yield*this.confirmStep(e,t);s!==Qr&&(e.flags=s,Zr(e),this.execute(e))}return e.counter<0?Qr:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,[(0,u.oI)(t.destination.name,e.reference.name)]),s=null!=i?i.ahead+i.behind:0;if(0===s){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,u.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,u.Wh)(e.reference)}`}));return jr(i,e,yield i),Qr}const r=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will merge ${(0,C._6)("commit",s)} from ${(0,u.Wh)(e.reference)} into ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,C._6)("commit",s)} from ${(0,u.Wh)(e.reference)} into ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,C._6)("commit",s)} from ${(0,u.Wh)(e.reference)} into one when merging into ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--no-ff"],{label:`${this.title} without Fast-Forwarding`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,C._6)("commit",s)} from ${(0,u.Wh)(e.reference)} into ${(0,u.Wh)(t.destination)}`}),ji(e.flags,["--no-ff","--no-commit"],{label:`${this.title} without Fast-Forwarding or Committing`,description:"--no-ff --no-commit",detail:`Will merge ${(0,C._6)("commit",s)} from ${(0,u.Wh)(e.reference)} into ${(0,u.Wh)(t.destination)} without Committing`})]),n=yield r;return jr(r,e,n)?n[0].item:Qr}}class PullGitCommand extends QuickCommand{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,u.UR)(e.reference)&&(!(0,p.BF)(e.reference)||!e.reference.current)){const t=await e.repos[0].getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,y.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repos=[t.repos[0]];else{const i=yield*$r(e,t,{skipIfPossible:e.counter>=1});if(i===Qr)break;e.repos=i}if(this.confirm(e.confirm)){const s=yield*this.confirmStep(e,t);if(s===Qr){i&&e.counter--;continue}e.flags=s}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}async*confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repositories`}),ji(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repositories by rebasing`})]);else if((0,u.UR)(e.reference))if(e.reference.remote)i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{const[s]=e.repos,r=await s.getBranch(e.reference.name);i=null==r?.upstream?this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:"Will pull"+(r.state.behind?` ${(0,C._6)("commit",r.state.behind)} into ${(0,u.Wh)(r)}`:` into ${(0,u.Wh)(r)}`)})])}else{const[s]=e.repos,[r,n]=await Promise.all([s.getStatus(),s.getLastFetched()]);let o="";0!==n&&(o=`${(0,C.vk)(c.NE.Dot,2,2)}Last fetched ${(0,ie.Zh)(new Date(n))}`);const a=null!=r?.state.behind?` ${(0,C._6)("commit",r.state.behind)} into $(repo) ${s.formattedName}`:` into $(repo) ${s.formattedName}`;i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t,o),[ji(e.flags,[],{label:this.title,detail:`Will pull${a}`}),ji(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${a}`})],void 0,{additionalButtons:[es],onDidClickButton:async(e,i)=>{if(i!==es||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.vk)(c.NE.Dot,2,2)}Fetching${c.NE.Ellipsis}`,e.busy=!0;try{return await s.fetch({progress:!0}),!0}finally{e.busy=!1}}})}const s=yield i;return jr(i,e,s)?s[0].item:Qr}}class PushGitCommand extends QuickCommand{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){const t=e.flags.indexOf("--set-upstream");return-1!==t?(0,u.UR)(e.reference)?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):Promise.resolve():this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,y.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){const i=yield*Fr({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===Qr)break;e.repos=[i]}else{const i=yield*$r(e,t,{skipIfPossible:e.counter>=1});if(i===Qr)break;e.repos=i}if(this.confirm(e.confirm)){const s=yield*this.confirmStep(e,t);if(s===Qr){i&&e.counter--;continue}e.flags=s}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}async*confirmStep(e,t){const i=r.D.getAny(c.eq.UseForcePushWithLease)??!1;let s;if(e.repos.length>1)s=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repositories`}),ji(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${e.repos.length} repositories`})]);else{const[r]=e.repos,n=[];if((0,u.UR)(e.reference))if(e.reference.remote)s=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot push remote branch"}));else{const o=await r.getBranch(e.reference.name);if(null!=o&&null==o?.upstream){for(const t of await r.getRemotes())n.push(ji(e.flags,["--set-upstream",t.name,o.name],{label:`Publish ${o.name} to ${t.name}`,detail:`Will publish ${(0,u.Wh)(o)} to ${t.name}`}));s=n.length?this.createConfirmStep(hr("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep(hr("Confirm Publish",e,t),[],Zi(Ki.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"})}else s=null!=o&&o?.state.behind>0?this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${o?.state.ahead?` ${(0,C._6)("commit",o.state.ahead)}`:""}${o.getRemoteName()?` to ${o.getRemoteName()}`:""}${null!=o&&o.state.behind>0?`, overwriting ${(0,C._6)("commit",o.state.behind)}${o?.getRemoteName()?` on ${o.getRemoteName()}`:""}`:""}`})],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,u.Wh)(o)} is behind ${o.getRemoteName()} by ${(0,C._6)("commit",o.state.behind)}`})):null!=o&&o?.state.ahead>0?this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[o.getRemoteName()],{label:this.title,detail:`Will push ${(0,C._6)("commit",o.state.ahead)} from ${(0,u.Wh)(o)} to ${o.getRemoteName()}`})]):this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:"No commits found to push"}))}else{const o=await r.getStatus(),a={refType:"branch",name:o?.branch??"HEAD",ref:o?.branch??"HEAD",remote:!1,repoPath:r.path};if(0===o?.state.ahead){if(null==e.reference&&null==o.upstream){e.reference=a;for(const t of await r.getRemotes())n.push(ji(e.flags,["--set-upstream",t.name,o.branch],{label:`Publish ${a.name} to ${t.name}`,detail:`Will publish ${(0,u.Wh)(a)} to ${t.name}`}))}s=n.length?this.createConfirmStep(hr("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):null==o.upstream?this.createConfirmStep(hr("Confirm Publish",e,t),[],Zi(Ki.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"}):this.createConfirmStep(hr("Confirm Push",e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; No commits ahead of ${(0,p.Lo)(o.upstream)}`}))}else{let n="";const l=await r.getLastFetched();let h;0!==l&&(n=`${(0,C.vk)(c.NE.Dot,2,2)}Last fetched ${(0,ie.Zh)(new Date(l))}`),h=null!=e.reference?`${o?.state.ahead?` commits up to and including ${(0,u.Wh)(e.reference,{label:!1})}`:""}${o?.upstream?` to ${(0,p.Lo)(o.upstream)}`:""}`:`${o?.state.ahead?` ${(0,C._6)("commit",o.state.ahead)}`:""}${o?.upstream?` to ${(0,p.Lo)(o.upstream)}`:""}`,s=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t,n),[...o?.state.behind?[]:[ji(e.flags,[],{label:this.title,detail:`Will push${h}`})],ji(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${h}${null!=o&&o.state.behind>0?`, overwriting ${(0,C._6)("commit",o.state.behind)}${o?.upstream?` on ${(0,p.Lo)(o.upstream)}`:""}`:""}`})],o?.state.behind?Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,u.Wh)(a)} is behind${o?.upstream?` ${(0,p.Lo)(o.upstream)}`:""} by ${(0,C._6)("commit",o.state.behind)}`}):void 0),s.additionalButtons=[es],s.onDidClickButton=async(e,i)=>{if(i!==es||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.vk)(c.NE.Dot,2,2)}Fetching${c.NE.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}const n=yield s;return jr(s,e,n)?n[0].item:Qr}}class RebaseGitCommand extends QuickCommand{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();t=["-c",`"sequence.editor=${(0,Pi._L)()}"`]}return e.repo.rebase(t,...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,u.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const s=new os(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,s.on=t.pickCommit})),r=yield*Ar(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[s]});if(r===Qr){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((0,u.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let s=t.cache.get(i);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,s));const r=yield*Dr(e,t,{ignoreFocusOut:!0,log:await s,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,u.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,u.Wh)(e.destination,{icon:!1})} onto`,picked:e.reference?.ref});if(r===Qr)continue;e.reference=r}const s=yield*this.confirmStep(e,t);s!==Qr&&(e.flags=s,Zr(e),this.execute(e))}return e.counter<0?Qr:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,["revision"===e.reference.refType?(0,u.oI)(e.reference.ref,t.destination.ref):(0,u.oI)(t.destination.name,e.reference.name)]),s=null!=i?i.ahead+i.behind:0;if(0===s){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[],Zi(Ki.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,u.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,u.Wh)(e.reference)}`}));return jr(i,e,yield i),Qr}const r=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will update ${(0,u.Wh)(t.destination)} by applying ${(0,C._6)("commit",s)} on top of ${(0,u.Wh)(e.reference)}`}),ji(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,u.Wh)(t.destination)} by applying ${(0,C._6)("commit",s)} on top of ${(0,u.Wh)(e.reference)}`})]),n=yield r;return jr(r,e,n)?n[0].item:Qr}}function an(e){if(!(e.repo instanceof lt._j&&"add"===e.subcommand))throw new Error("Missing repository")}function ln(e){if(!(e.repo instanceof lt._j&&"remove"===e.subcommand))throw new Error("Missing repository")}function cn(e){if(!(e.repo instanceof lt._j&&"prune"===e.subcommand))throw new Error("Missing repository")}function hn(e){if("string"==typeof e.remote)throw new Error("Missing remote")}function un(e){if("string"==typeof e.remote)throw new Error("Missing remote")}const dn=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);function pn(e,t){return null==t?e:`${dn.get(t)} ${e}`}class RemoteGitCommand extends QuickCommand{constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.remotesView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===Qr)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=pn(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)continue;e.repo=i}switch(e.subcommand){case"add":an(e),yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":cn(e),yield*this.pruneCommandSteps(e,t);break;case"remove":ln(e),yield*this.removeCommandSteps(e,t);break;default:Zr(e)}i&&e.counter--}return e.counter<0?Qr:void 0}*pickSubcommandStep(e){const t={title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[s.QuickInputButtons.Back]},i=yield t;return jr(t,e,i)?i[0].item:Qr}async*addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){const s=yield*wr(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(s===Qr)continue;if(i=0!==(await e.repo.getRemotes({filter:e=>e.name===s})).length,i){e.counter--;continue}e.name=s}if(e.counter<4||null==e.url){const i=yield*vr(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===Qr)continue;e.url=i}if(this.confirm(e.confirm)){const i=yield*this.addCommandConfirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e),await e.repo.addRemote(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0),!1!==e.reveal&&Ws(void 0,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),ji(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}async*removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){t.title=pn("Remotes",e.subcommand);const i=yield*Rr(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===Qr)break;e.remote=i}hn(e);if((yield*this.removeCommandConfirmStep(e,t))!==Qr){Zr(e);try{await e.repo.removeRemote(e.remote.name)}catch(e){be.Yd.error(e),(0,Mt.W8)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t);return jr(i,e,yield i)?void 0:Qr}async*pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){const i=yield*Rr(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===Qr)break;e.remote=i}un(e);(yield*this.pruneCommandConfirmStep(e,t))!==Qr&&(Zr(e),e.repo.pruneRemote(e.remote.name))}}*pruneCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t);return jr(i,e,yield i)?void 0:Qr}}class ResetGitCommand extends QuickCommand{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"}),this._canSkipConfirm=!1;let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}get canSkipConfirm(){return this._canSkipConfirm}execute(e){return e.repo.reset(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,u.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){const s=t.destination.ref;let r=t.cache.get(s);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:s,merges:!1}),t.cache.set(s,r));const n=yield*Dr(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(s,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(n===Qr){i&&e.counter--;continue}e.reference=n}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}*confirmStep(e,t){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,u.Wh)(t.destination)} to ${(0,u.Wh)(e.reference)}`}),ji(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,u.Wh)(t.destination)} to ${(0,u.Wh)(e.reference)}`}),ji(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,u.Wh)(t.destination)} to ${(0,u.Wh)(e.reference)}`})]),s=yield i;return jr(i,e,s)?s[0].item:Qr}}class RevertGitCommand extends QuickCommand{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){return e.repo.revert(...e.flags,...e.references.map((e=>e.ref)).reverse())}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){const s=t.destination.ref;let r=t.cache.get(s);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:s,merges:!1}),t.cache.set(s,r));const n=yield*Sr(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(s,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map((e=>e.ref))});if(n===Qr){i&&e.counter--;continue}e.references=n}const s=yield*this.confirmStep(e,t);s!==Qr&&(e.flags=s,Zr(e),this.execute(e))}return e.counter<0?Qr:void 0}*confirmStep(e,t){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,u.Wh)(e.references)}`}),ji(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,u.Wh)(e.references)}`})]),s=yield i;return jr(i,e,s)?s[0].item:Qr}}var mn=i(4092);class BranchOrTagFolderNode extends $i.Re{constructor(e,t,i,s,r,n,o,a,l=!1){super(st.YY.fromRepoPath(s),e,t),this.type=i,this.repoPath=s,this.folderName=r,this.relativePath=n,this.root=o,this._key=a,this._expanded=l}static getId(e,t,i,s){return`${al.getId(e)}:${void 0===t?i:`${t}:${i}`}-folder(${s})`}toClipboard(){return this.folderName}get id(){return BranchOrTagFolderNode.getId(this.repoPath,this._key,this.type,this.relativePath)}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];const e=[];for(const t of this.root.children.values())if(void 0!==t.value)t.value.parent=this.folderName?this:this.parent,e.push(t.value);else{const i=t.descendants?.some((e=>e instanceof ba&&e.current));e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.type,this.repoPath,t.name,t.relativePath,t,this._key,i))}return e}getTreeItem(){const e=new s.TreeItem(this.label,this._expanded?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Folder,e.iconPath=s.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}}class MessageNode extends $i.Re{constructor(e,t,i,s,r,n,o){super(st.Wj,e,t),this._message=i,this._description=s,this._tooltip=r,this._iconPath=n,this._contextValue=o}getChildren(){return[]}getTreeItem(){const e=new s.TreeItem(this._message,s.TreeItemCollapsibleState.None);return e.contextValue=this._contextValue??$i.Td.Message,e.description=this._description,e.tooltip=this._tooltip,e.iconPath=this._iconPath,e}}class CommandMessageNode extends MessageNode{constructor(e,t,i,s,r,n,o){super(e,t,s,r,n,o),this._command=i}getTreeItem(){const e=super.getTreeItem();return e instanceof s.TreeItem?(e.command=this._command,e):e.then((e=>(e.command=this._command,e)))}}class PagerNode extends $i.Re{constructor(e,t,i,s,r){super(st.Wj,e,t),this.message=i,this.previousNode=s,this.options=r}async loadAll(){const e=await(this.options?.getCount?.())??0;return this.view.loadMoreNodeChildren(this.parent,e>5e3?5e3:0,this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??r.D.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){const e=new s.TreeItem(this.message,s.TreeItemCollapsibleState.None);return e.contextValue=$i.Td.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}}class LoadMoreNode extends PagerNode{constructor(e,t,i,s){super(e,t,s?.message??(0===s?.pageSize?`Load all ${c.NE.Space}${c.NE.Dash}${c.NE.Space} this may take a while`:"Load more"),i,s)}}var gn=Object.defineProperty,fn=Object.getOwnPropertyDescriptor;const wn=class extends $i.Re{constructor(e,t,i,s,r){super(e,t,i),this.remote=s,this.repo=r}static getId(e,t,i){return`${al.getId(e)}${this.key}(${t}|${i})`}toClipboard(){return this.remote.name}get id(){return wn.getId(this.remote.repoPath,this.remote.name,this.remote.id)}async getChildren(){const e=await this.repo.getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new MessageNode(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new ba(st.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e,!1,{showComparison:!1,showTracking:!1})));if(this.view.config.branches.layout===te.CZ.List)return t;const i=(0,y.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0)));return new BranchOrTagFolderNode(this.view,this,"remote-branch",this.repo.path,"",void 0,i,`remote(${this.remote.name})`).getChildren()}async getTreeItem(){const e=new s.TreeItem(this.remote.name,s.TreeItemCollapsibleState.Collapsed);if(e.id=this.id,e.description=(0,ot.jv)(this.remote),null!=this.remote.provider){const{provider:t}=this.remote;if(e.iconPath=null!=t.avatarUri&&this.view.config.avatars?t.avatarUri:"remote"===t.icon?new s.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${t.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${t.icon}.svg`)},t.hasRichIntegration()){const i=t.maybeConnected??await t.isConnected();e.contextValue=`${$i.Td.Remote}${i?"+connected":"+disconnected"}`,e.tooltip=`${this.remote.name} (${t.name} ${c.NE.Dash} ${i?"connected":"not connected"})\n${t.displayPath}\n`}else e.contextValue=$i.Td.Remote,e.tooltip=`${this.remote.name} (${t.name})\n${t.displayPath}\n`}else e.contextValue=$i.Td.Remote,e.iconPath=new s.ThemeIcon("cloud"),e.tooltip=`${this.remote.name} (${this.remote.domain})\n${this.remote.path}\n`;this.remote.default&&(e.contextValue+="+default",e.resourceUri=s.Uri.parse("gitlens-view://remote/default"));for(const{type:t,url:i}of this.remote.urls)e.tooltip+=`\n${i} (${t})`;return e}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}};let vn=wn;vn.key=":remote",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?fn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&gn(t,i,n)})([(0,d.cM)()],vn.prototype,"setAsDefault",1);var yn=Object.defineProperty,bn=Object.getOwnPropertyDescriptor;const Cn=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return Cn.getId(this.repo.path)}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){const e=await this.repo.getRemotes({sort:!0});if(0===e.length)return[new MessageNode(this.view,this,"No remotes could be found")];this._children=e.map((e=>new vn(this.uri,this.view,this,e,this.repo)))}return this._children}getTreeItem(){const e=new s.TreeItem("Remotes",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Remotes,e.iconPath=new s.ThemeIcon("cloud"),e}refresh(){this._children=void 0}};let An=Cn;An.key=":remotes",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?bn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&yn(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],An.prototype,"refresh",1);var Pn=Object.defineProperty,Dn=Object.getOwnPropertyDescriptor,Sn=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Dn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Pn(t,i,n),n};class ViewBase{constructor(e,t,i,n){if(this.container=e,this.id=t,this.name=i,this.trackingFeature=n,this._onDidChangeTreeData=new s.EventEmitter,this._onDidChangeSelection=new s.EventEmitter,this._onDidChangeVisibility=new s.EventEmitter,this._onDidChangeNodeCollapsibleState=new s.EventEmitter,this.disposables=[],this._lastKnownLimits=new Map,this.disposables.push((0,Ai.IH)(e.onReady)(this.onReady,this)),this.container.debugging||r.D.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new s.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}\n\n---\ncontext: ${e.contextValue}\nnode: ${t.toString()}${null!=i?`\nparent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`\n\n---\n\ncontext: \`${e.contextValue}\`\\\nnode: \`${t.toString()}\`${null!=i?`\\\nparent: \`${i.toString()}\``:""}`)};const t=this.getTreeItem;this.getTreeItem=async function(i){const s=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(s,i,i.getParent()),s};const i=this.resolveTreeItem;this.resolveTreeItem=async function(t,s){return t=await i.apply(this,[t,s]),e(t,s,s.getParent()),t}}this.disposables.push(...this.registerCommands())}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}get onDidChangeSelection(){return this._onDidChangeSelection.event}get onDidChangeVisibility(){return this._onDidChangeVisibility.event}get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}dispose(){this._nodeState?.dispose(),this._nodeState=void 0,s.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:this.showCollapseAll}),queueMicrotask((()=>this.onConfigurationChanged()))}get canReveal(){return!0}get canSelectMany(){return this.container.prereleaseOrDebugging&&r.D.get("views.experimental.multiSelect.enabled",void 0,!1)}get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){if(!r.D.changed(e,"views"))return!1;if(r.D.changed(e,`views.${this.configKey}`))return!0;for(const t of te.TA)if(r.D.changed(e,`views.${t}`))return!0;return!1}get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`${this.id}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e={}){this.tree=s.window.createTreeView(this.id,{...e,treeDataProvider:this}),this.disposables.push(r.D.onDidChange((e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))}),this),this.tree,this.tree.onDidChangeSelection((0,Lt.Ds)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,Lt.Ds)(this.onVisibilityChanged,250),this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),this._title=this.tree.title}ensureRoot(e=!1){return(null==this.root||e)&&(this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();return this.ensureRoot().getChildren()}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}resolveTreeItem(e,t){return t.resolveTreeItem?.(e)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:s.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:s.TreeItemCollapsibleState.Expanded})}onSelectionChanged(e){this._onDidChangeSelection.fire(e)}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`),this._onDidChangeVisibility.fire(e)}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,{allowPaging:t=!1,canTraverse:i,maxDepth:s=2,token:r}={}){const n=(0,Ut.UH)();async function o(){try{return await this.findNodeCoreBFS("string"==typeof e?t=>t.id===e:e,this.ensureRoot(),t,i,s,r)}catch(e){return void be.Yd.error(e,n)}}return null!=this.root?o.call(this):(await this.show({preserveFocus:!0}),new Promise((e=>setTimeout((()=>e(o.call(this))),100))))}async findNodeCoreBFS(e,t,i,s,n,o){const a=[t,void 0],l=r.D.get("advanced.maxListItems");let c,h,u,d=0;for(;a.length>1;){if(o?.isCancellationRequested)return;if(c=a.shift(),null!=c){if(e(c))return c;if(null!=s){const e=s(c);if((0,Nt.tI)(e)){if(!await e)continue}else if(!e)continue}if(h=await c.getChildren(),0!==h.length){for(;null!=c&&!(0,$i.On)(c);)c=await(c.getSplattedChild?.());if(null!=c&&(0,$i.On)(c)){let t=h.find(e);if(null!=t)return t;if(i&&c.hasMore)for(;;){if(o?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(c,l),u=await(0,Nt.HO)(Promise.resolve(c.getChildren()),o??6e4,{onDidCancel:e=>e([])}),t=u.find(e),null!=t)return t;if(!c.hasMore)break}}else a.push(...h)}}else if(d++,a.push(void 0),d>n)break}}async ensureRevealNode(e,t){const i=[];let s=e;for(;null!=s;)i.push(s),s=s.getParent();i.length>1&&i.pop();for(const e of i.reverse())try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await(this.root?.refresh?.(e)),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){const s=await(e.refresh?.(t));(i||!0!==s)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){be.Yd.error(e)}}async show(e){const t=(0,Ut.UH)();try{await(0,ki.P0)(`${this.id}.focus`,e)}catch(e){be.Yd.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,s){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,s),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}get config(){if(null==this._config){const e={...r.D.get("views")};for(const t of te.S4)delete e[t];this._config={...e,...r.D.get("views")[this.configKey]}}return this._config}}Sn([(0,d.cM)({args:{0:e=>"string"==typeof e?e:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),Sn([(0,d.fF)()],ViewBase.prototype,"refresh",1),Sn([(0,d.fF)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),Sn([(0,d.cM)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),Sn([(0,d.cM)()],ViewBase.prototype,"show",1),Sn([(0,d.fF)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),Sn([(0,d.fF)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),Sn([(0,d.fF)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);class ViewNodeState{dispose(){this.reset()}reset(){this._state?.clear(),this._state=void 0}deleteState(e,t){null==t?this._state?.delete(e):this._state?.get(e)?.delete(t)}getState(e,t){return this._state?.get(e)?.get(t)}storeState(e,t,i){null==this._state&&(this._state=new Map);const s=this._state.get(e);null!=s?s.set(t,i):this._state.set(e,new Map([[t,i]]))}}const kn=class extends $i.Re{constructor(e,t,i,s,r,n,o){super(st.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.folderName=s,this.root=r,this.containsWorkingFiles=n,this.relativePath=o,this.priority=1}static getId(e,t){return`${e.id}${this.key}(${t})`}toClipboard(){return this.folderName}get id(){return kn.getId(this.parent,this.folderName)}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if(kn.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath)===te.Vc.List)this.root.descendants.forEach((e=>e.relativePath=this.root.relativePath)),e=this.root.descendants;else{e=[];for(const t of this.root.children.values())void 0!==t.value?(t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new kn(this.view,this.folderName?this:this.parent,this.repoPath,t.name,t,this.containsWorkingFiles,t.relativePath))}return e.sort(((e,t)=>(e instanceof kn?-1:1)-(t instanceof kn?-1:1)||e.priority-t.priority||(0,C.dm)(e.label,t.label))),e}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=$i.Td.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=s.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){const s=e.layout||te.Vc.Auto;if(s===te.Vc.Auto){if(i||e.compact){const i=e.threshold||5;if(t.length<=i)return te.Vc.List}return te.Vc.Tree}return s}};let Rn=kn;Rn.key=":folder";const Fn=new Map,$n=/ /g,Tn=class{constructor(e,t){this.collapsableWhitespace=0,this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,null==t&&null!=this._options||(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}_padOrTruncate(e,t){if(null==e||0===e.length)return e;null==t&&(t={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0});let i=t.truncateTo;if(null==i)this.collapsableWhitespace=0;else{i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const s=(0,C.dz)(e),r=i-s;r>0?(t.collapseWhitespace&&(this.collapsableWhitespace=r),"left"===t.padDirection?e=(0,C.Q_)(e,i,void 0,s):(t.collapseWhitespace&&(i-=r),e=(0,C.eh)(e,i,void 0,s))):r<0&&(e=(0,C.$G)(e,i,void 0,s))}return(t.prefix||t.suffix)&&(e=`${t.prefix??""}${e}${t.suffix??""}`),e}static fromTemplateCore(e,t,i,s){if(t=t.replace($n," "),e instanceof Tn)return(0,C.sX)(t,e);let r;if(r=null==s||"string"==typeof s?{dateFormat:s}:s,null==r.tokenOptions){const e=(0,C.Gg)(t).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));r.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,r):this._formatter.reset(i,r),(0,C.sX)(t,this._formatter)}static fromTemplateCoreAsync(e,t,i,s){if(t=t.replace($n," "),e instanceof Tn)return(0,C.Qu)(t,e);let r;if(r=null==s||"string"==typeof s?{dateFormat:s}:s,null==r.tokenOptions){const e=(0,C.Gg)(t).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));r.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,r):this._formatter.reset(i,r),(0,C.Qu)(t,this._formatter)}static has(e,...t){const i=1===t.length?t[0]:`(${t.join("|")})`;let s=Fn.get(i);return null==s&&(s=new RegExp(`\\b${i}\\b`),Fn.set(i,s)),s.test(e)}};let xn=Tn;xn._formatter=void 0;class StatusFileFormatter extends xn{get directory(){const e=(0,D.OC)(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){const e=(0,b.EZ)(this._item.path);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=(0,D.PM)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo});return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){const e=(0,D.Gv)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){const e=(0,D.W5)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){const e=(0,D.K9)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${c.NE.Pencil}${c.NE.Space}${c.NE.SpaceThinnest}${c.NE.Check}`:null!=this._item.workingTreeStatus?`${c.NE.Pencil}${c.NE.SpaceThin}${c.NE.SpaceThinnest}${c.NE.EnDash}${c.NE.Space}`:null!=this._item.indexStatus?`${c.NE.Space}${c.NE.EnDash}${c.NE.Space.repeat(2)}${c.NE.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return this._padOrTruncate(D.K8.is(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate(D.K8.is(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate(D.K8.is(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}class MergeConflictCurrentChangesNode extends $i.Re{constructor(e,t,i,s){super(st.YY.fromFile(s,i.repoPath,"HEAD"),e,t),this.status=i,this.file=s}getChildren(){return[]}async getTreeItem(){const e=await this.view.container.git.getCommit(this.status.repoPath,"HEAD"),t=new s.TreeItem("Current changes",s.TreeItemCollapsibleState.None);t.contextValue=$i.Td.MergeConflictCurrentChanges,t.description=`${(0,u.Wh)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,u.Wh)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await(e?.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle")}))??new s.ThemeIcon("diff"):new s.ThemeIcon("diff");const i=new s.MarkdownString(`Current changes to $(file)${c.NE.Space}${this.file.path} on ${(0,u.Wh)(this.status.current)}${null!=e?`\n\n${await CommitFormatter.fromTemplateAsync("${avatar}&nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${link}${' via 'pullRequest}",e,{avatarSize:16,dateFormat:r.D.get("defaultDateFormat"),messageIndent:4,outputFormat:"markdown"})}`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t.command=this.getCommand(),t}getCommand(){if(null==this.status.mergeBase)return{title:"Open Revision",command:c.nA.Open,arguments:[this.view.container.git.getRevisionUri("HEAD",this.file.path,this.status.repoPath)]};const e={lhs:{sha:this.status.mergeBase,uri:st.YY.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:st.YY.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,u.Wh)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:c.Gh.DiffWith,arguments:[e]}}}class MergeConflictIncomingChangesNode extends $i.Re{constructor(e,t,i,s){super(st.YY.fromFile(s,i.repoPath,i.HEAD.ref),e,t),this.status=i,this.file=s}getChildren(){return[]}async getTreeItem(){const e=await this.view.container.git.getCommit(this.status.repoPath,"rebase"===this.status.type?this.status.steps.current.commit.ref:this.status.HEAD.ref),t=new s.TreeItem("Incoming changes",s.TreeItemCollapsibleState.None);t.contextValue=$i.Td.MergeConflictIncomingChanges,t.description=`${(0,u.Wh)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,u.Wh)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,u.Wh)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await(e?.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle")}))??new s.ThemeIcon("diff"):new s.ThemeIcon("diff");const i=new s.MarkdownString(`Incoming changes to $(file)${c.NE.Space}${this.file.path}${null!=this.status.incoming?` from ${(0,u.Wh)(this.status.incoming)}${null!=e?`\n\n${await CommitFormatter.fromTemplateAsync("${avatar}&nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${link}${' via 'pullRequest}",e,{avatarSize:16,dateFormat:r.D.get("defaultDateFormat"),messageIndent:4,outputFormat:"markdown"})}`:"rebase"===this.status.type?`\n\n${(0,u.Wh)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`\n\n${(0,u.Wh)(this.status.HEAD,{capitalize:!0,label:!1})}`}`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t.command=this.getCommand(),t}getCommand(){if(null==this.status.mergeBase)return{title:"Open Revision",command:c.nA.Open,arguments:[this.view.container.git.getRevisionUri(this.status.HEAD.ref,this.file.path,this.status.repoPath)]};const e={lhs:{sha:this.status.mergeBase,uri:st.YY.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:st.YY.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,u.Wh)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:c.Gh.DiffWith,arguments:[e]}}}class FileRevisionAsCommitNode extends $i.RW{constructor(e,t,i,s,r={}){super(st.YY.fromFile(i,s.repoPath,s.sha),e,t,i),this.commit=s,this._options=r}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];const[e,t]=await Promise.allSettled([this.view.container.git.getMergeStatus(this.commit.repoPath),this.view.container.git.getRebaseStatus(this.commit.repoPath)]),i=(0,Nt.Sb)(e);if(null==i)return[];const s=(0,Nt.Sb)(t);return null==s?[]:[new MergeConflictCurrentChangesNode(this.view,this,i??s,this.file),new MergeConflictIncomingChangesNode(this.view,this,i??s,this.file)]}async getTreeItem(){if(null==this.commit.file){const e=await this.commit.getCommitForFile(this.file);if(null==e){const e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}const e=new s.TreeItem(CommitFormatter.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=CommitFormatter.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=s.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new s.ThemeIcon("arrow-up",new s.ThemeColor(c.wL.UnpublishedCommitIconColor)):await this.commit.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle")})),null==e.iconPath){const t=(0,D.tK)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,b.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,b.RQ)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${$i.Td.File}+conflicted`:this.commit.isUncommittedStaged?`${$i.Td.File}+staged`:`${$i.Td.File}+unstaged`:`${$i.Td.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;if(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)return{title:"Open Changes",command:c.Gh.DiffWith,arguments:[{lhs:{sha:"MERGE_HEAD",uri:st.YY.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:st.YY.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}]};const t={commit:this.commit,uri:st.YY.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,t]}}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;const e=await this.view.container.git.getMergeBase(this.repoPath,"MERGE_HEAD","HEAD");return st.YY.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(){const e=await this.view.container.git.getRemotesWithProviders(this.commit.repoPath),t=await this.view.container.git.getBestRemoteWithRichProvider(e);let i,n;if(null==this.commit.message&&await this.commit.ensureFullDetails(),null!=t?.provider){const[e,s]=await Promise.allSettled([this.view.container.autolinks.getLinkedIssuesAndPullRequests(this.commit.message??this.commit.summary,t),this.commit.getAssociatedPullRequest({remote:t})]);i=(0,Nt.Sb)(e),n=(0,Nt.Sb)(s),null!=n&&i?.delete(n.id)}const o=StatusFileFormatter.fromTemplate("${status}${ (originalPath)}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}",this.file),a=await CommitFormatter.fromTemplateAsync(this.view.config.formats.commits.tooltipWithStatus.replace("{{slot-status}}",o),this.commit,{autolinkedIssuesOrPullRequests:i,dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:this._options.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequestOrRemote:n,outputFormat:"markdown",remotes:e,unpublished:this._options.unpublished}),l=new s.MarkdownString(a,!0);return l.supportHtml=!0,l.isTrusted=!0,l}}class StatusFileNode extends $i.Te{constructor(e,t,i,s,r,n="ahead"){let o,a=!1,l=!1;for(const e of r){if(!e.isUncommitted){if(l)break;o=e.sha;break}if(e.isUncommittedStaged){a=!0,l||(o=e.sha);break}o=void 0,l=!0}super(st.YY.fromFile(i,s,o),e,t,i),this.commits=r,this._direction=n,this._hasStagedChanges=a,this._hasUnstagedChanges=l}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this.commits.map((e=>new FileRevisionAsCommitNode(this.view,this,this.file,e)))}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);if(e.description=this.description,(this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length)e.contextValue=$i.Td.File,this._hasStagedChanges?(e.contextValue+="+staged",e.tooltip=StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)} in Index (staged)",this.file)):(e.contextValue+="+unstaged",e.tooltip=StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)} in Working Tree",this.file)),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=s.ThemeIcon.File,e.command=this.getCommand();else{if(e.collapsibleState=s.TreeItemCollapsibleState.Collapsed,this._hasStagedChanges||this._hasUnstagedChanges)e.contextValue=$i.Td.File,this._hasStagedChanges&&this._hasUnstagedChanges?e.contextValue+="+staged+unstaged":this._hasStagedChanges?e.contextValue+="+staged":e.contextValue+="+unstaged",e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=s.ThemeIcon.File;else{e.contextValue=$i.Td.StatusFileCommits;const t=(0,D.tK)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,b.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,b.RQ)("images","light",t))}}e.tooltip=StatusFileFormatter.fromTemplate(`\${file}\n\${directory}/\n\n\${status}\${ (originalPath)} in ${this.getChangedIn()}`,this.file),e.command=this.getCommand()}return this._label=void 0,this._description=void 0,e}get description(){return null==this._description&&(this._description=StatusFileFormatter.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}get folderName(){return null==this._folderName&&(this._folderName=(0,b.Fd)(this.uri.relativePath)),this._folderName}get label(){return null==this._label&&(this._label=StatusFileFormatter.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getChangedIn(){const e=[];let t=0;return this._hasUnstagedChanges&&(t++,e.push("Working Tree")),this._hasStagedChanges&&(t++,e.push("Index (staged)")),this.commits.length>t&&(t=this.commits.length-t),t>0&&e.push((0,C._6)("commit",t)),e.length>2&&(e[e.length-1]=`and ${e[e.length-1]}`),e.join(e.length>2?", ":" and ")}getCommand(){if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length){const e={commit:this.commit,uri:st.YY.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,e]}}const e="behind"===this._direction?this.commits[0]:this.commits[this.commits.length-1],t=e.files?.find((e=>e.path===this.file.path))??this.file,i={lhs:{sha:"behind"===this._direction?e.sha:`${e.sha}^`,uri:st.YY.fromFile(t,this.repoPath,void 0,!0)},rhs:{sha:"",uri:st.YY.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:c.Gh.DiffWith,arguments:[i]}}}const In=class extends $i.Re{constructor(e,t,i,s,r,n=!1){super(st.YY.fromRepoPath(s.repoPath),e,t),this.branch=i,this.status=s,this.direction=r,this.root=n,this.repoPath=s.repoPath}static getId(e,t,i,s,r){return`${ba.getId(e,t,i)}${this.key}(${s}|${r})`}get id(){return In.getId(this.status.repoPath,this.status.ref,this.root,this.status.upstream,this.direction)}async getChildren(){const e=await this.view.container.git.getLog(this.repoPath,{limit:0,ref:(0,u.oI)(this.status.upstream,this.branch.ref,"behind"===this.direction?"...":"..")});let t;null!=e?(await Promise.allSettled((0,ye.UI)((0,ye.hX)(e.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),t=[...(0,ye.VS)(e.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))]):t=[],t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,y.vM)(t,(e=>e.path));let s=Object.values(i).map((e=>new StatusFileNode(this.view,this,e[e.length-1],this.repoPath,e.map((e=>e.commit)),this.direction)));if(this.view.config.files.layout!==te.Vc.List){const e=(0,y.Mo)(s,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);s=new Rn(this.view,this,this.repoPath,"",e,!1).getChildren()}else s.sort(((e,t)=>e.priority-t.priority||(0,C.dm)(e.label,t.label)));return s}async getTreeItem(){const e=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}${"behind"===this.direction?"..":"..."}`),t=e?.changedFiles??0,i=`${(0,C._6)("file",t)} changed`,r=new s.TreeItem(i,s.TreeItemCollapsibleState.Collapsed);return r.id=this.id,r.contextValue=$i.Td.BranchStatusFiles,r}};let _n=In;_n.key=":status-branch:files";var On=(e=>(e[e.Branches=1]="Branches",e[e.Tags=2]="Tags",e[e.WorkingTree=4]="WorkingTree",e[e.HEAD=8]="HEAD",e[e.BranchesAndTags=3]="BranchesAndTags",e))(On||{});async function Bn(e,t,i,r={}){const n=s.window.createQuickPick();n.ignoreFocusOut=(0,Pi.hE)(),n.title=t,n.placeholder=null!=r.allowEnteringRefs?`${i}${c.NE.Space.repeat(3)}(or enter a reference using #)`:i,n.matchOnDescription=!0;const o=[];let a;null!=r?.keys&&0!==r.keys.length&&null!==r?.onDidPressKey&&(a=gv.instance.keyboard.createScope(Object.fromEntries(r.keys.map((e=>[e,{onDidPressKey:e=>{0!==n.activeItems.length&&r.onDidPressKey(e,n)}}])))),a.start(),o.push(a));const l=new s.CancellationTokenSource;let h,d=async function(e,{picked:t,filter:i,include:s,sort:r}){s=s??3;const n=await mr(gv.instance.git.getRepository(e),s?["branches","tags"]:s?["branches"]:s?["tags"]:[],{buttons:[ls],filter:i,picked:t,sort:r??{branches:{current:!1},tags:{}}});if(t){const e=n.findIndex((e=>e.ref===t));-1!==e&&n.splice(0,0,...n.splice(e,1))}8&s&&n.splice(0,0,Fl("HEAD",e,void 0,{icon:!0}));4&s&&n.splice(0,0,Fl("",e,void 0,{icon:!0}));return n}(e,r);r.autoPick&&(d=d.then((e=>(e.length<=1&&(h=e[0],l.cancel()),e)))),n.busy=!0,n.show();const p=gr(gv.instance.git.getRepository(e),{buttons:[ls],ranges:r?.allowEnteringRefs&&"boolean"!=typeof r.allowEnteringRefs?r.allowEnteringRefs.ranges:void 0});n.items=await d,n.busy=!1;try{let e=await new Promise((e=>{o.push(l.token.onCancellationRequested((()=>n.hide())),n.onDidHide((()=>e(void 0))),n.onDidAccept((()=>{0!==n.activeItems.length&&e(n.activeItems[0])})),n.onDidChangeValue((async e=>{r.allowEnteringRefs&&(await p(n,e)||(n.items=await d)),null!=a&&(0!==e.length?await a.pause(["left","right"]):await a.resume())})),n.onDidTriggerItemButton((({button:e,item:{item:t}})=>{e===ls&&((0,u.UR)(t)?vs(t,{select:!0,expand:!0}):(0,u.gA)(t)?ir(t,{select:!0,expand:!0}):(0,u.FT)(t)&&Os(t,{pin:!1,preserveFocus:!0}))})))}));if(null==e&&null!=h&&(e=h),null==e)return;return e.item}finally{n.dispose(),o.forEach((e=>{e.dispose()}))}}var En=i(4298);const Mn=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*Wn(e,t,i,{show:s}={show:!0}){if(!t.view.config.showRelativeDateMarkers||!s)return yield*e;let r,n=i??0;const o=Date.now();let a=!0;for(const i of e){if(n<Mn.length){let[e,s]=Mn[n];if(void 0===r){const t=new Date(o);r=t.setDate(t.getDate()-e)}const l=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(l<=r){for(;n<Mn.length-1;){[e]=Mn[n+1];const t=new Date(o);if(l>t.setDate(t.getDate()-e))break;n++,r=void 0,[,s]=Mn[n]}a||(yield new MessageNode(t.view,t,"",s,void 0,void 0,$i.Td.DateMarker)),n++,r=void 0}}a=!1,yield i}}var Ln=Object.defineProperty,Un=Object.getOwnPropertyDescriptor,Nn=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Un(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ln(t,i,n),n};const Gn=class extends $i.CF{constructor(e,t,i,s,r){super(e,t,i),this.folder=s,this.branch=r,this.splatted=!0,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t){return`${al.getId(e)}${this.key}(${t})`}toClipboard(){return this.uri.fileName}get id(){return Gn.getId(this.uri.repoPath,this.uri.toString(!0))}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[],t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,s,r,n,o]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.getStatusForFiles(this.uri.repoPath,this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.getCurrentUser(this.uri.repoPath):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,t?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:t}):void 0]);if(s?.length)if(this.folder){const t=(0,ye.UI)((0,ye.uw)((0,ye.VS)(s,(e=>e.getPseudoCommits(this.view.container,r))),(e=>e.sha),((e,t)=>e.with({files:{files:[...e.files,...t.files]}}))),(e=>new Ao(this.view,this,e)));e.push(...t)}else{const[t]=s,i=t.getPseudoCommits(this.view.container,r);i.length&&e.push(...i.map((e=>new FileRevisionAsCommitNode(this.view,this,t,e))))}return null!=i&&(e.push(...Wn((0,ye.DZ)(i.commits.values(),(e=>this.folder?new Ao(this.view,this,e,o?.has(e.ref),this.branch,void 0,{expand:!1}):null!=e.file?new FileRevisionAsCommitNode(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:n,unpublished:o?.has(e.ref)}):void 0)),this)),i.hasMore&&e.push(new LoadMoreNode(this.view,this,e[e.length-1]))),0===e.length?[new MessageNode(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new s.TreeItem(e,s.TreeItemCollapsibleState.Expanded);return t.contextValue=$i.Td.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,b.EZ)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===P.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===P.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return s.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem(),r.D.onDidChange((e=>{r.D.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)})))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(lt.I6.Index,lt.I6.Heads,lt.I6.Remotes,lt.I6.RemoteProviders,lt.I6.Status,lt.I6.Unknown,lt.du.Any)&&(be.Yd.debug(`FileHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){if(this.folder){if(!e.uris.some((e=>e.fsPath.startsWith(this.uri.fsPath))))return}else if(!e.uris.some((e=>e.toString()===this.uri.toString())))return;be.Yd.debug(`FileHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0)}refresh(e){e&&(this._log=void 0)}async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.getPathOrGlob(),{limit:this.limit??this.view.config.pageItemLimit,ref:this.uri.sha})),this._log}getPathOrGlob(){return this.folder?s.Uri.joinPath(this.uri,"*"):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};let Hn=Gn;Hn.key=":history:file",Nn([(0,d.fF)()],Hn.prototype,"subscribe",1),Nn([(0,Wt.H)(),(0,d.fF)()],Hn.prototype,"refresh",1),Nn([(0,se.H)()],Hn.prototype,"getPathOrGlob",1),Nn([(0,Wt.H)()],Hn.prototype,"loadMore",1);var Vn=Object.defineProperty,Qn=Object.getOwnPropertyDescriptor,qn=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Qn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Vn(t,i,n),n};class FileHistoryTrackerNode extends $i.CF{constructor(e){super(st.Wj,e),this.splatted=!0}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},t=new st.YY(this.uri,e);let i,r=!1;try{((await s.workspace.fs.stat(this.uri)).type&s.FileType.Directory)===s.FileType.Directory&&(r=!0)}catch{}this.view.title=r?"Folder History":"File History",e.sha&&"HEAD"!==e.sha?(0,u.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new Hn(t,this.view,this,r,i)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new s.TreeItem("File History",s.TreeItemCollapsibleState.Expanded);return e.contextValue=$i.Td.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=st.Wj}async changeBase(){const e=await Bn(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,u.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,Ut.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==st.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=s.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&s.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path)return null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!0;let r,n=await st.YY.fromUri(i.document.uri);if(null!=n.sha){const e=await this.view.container.git.getWorkingUri(n.repoPath,n);null!=e&&(r=e)}return!(!this.hasUri||!En.n.equals(r??n,this.uri))||(null!=r&&(n=await st.YY.fromUri(r)),null==n.repoPath?this.reset():(this.setUri(n),this.resetChild()),null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.resetChild()}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return s.Disposable.from(s.window.onDidChangeActiveTextEditor((0,Lt.Ds)(this.onActiveEditorChanged,250),this))}etag(){return 0}onActiveEditorChanged(e){if(null==e&&(0,Pi.pt)(this._uri))return null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,Lt.Ds)((()=>this.triggerChange()),1500)),void this._triggerChangeDebounced();this.triggerChange()}setUri(e){this._uri=e??st.Wj,(0,Ci.v)(c.zf.ViewsFileHistoryCanPin,this.hasUri)}}qn([(0,d.fF)()],FileHistoryTrackerNode.prototype,"resetChild",1),qn([(0,Wt.H)(),(0,d.cM)()],FileHistoryTrackerNode.prototype,"changeBase",1),qn([(0,Wt.H)(),(0,d.fF)({exit:e=>`returned ${e}`})],FileHistoryTrackerNode.prototype,"refresh",1),qn([(0,d.cM)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),qn([(0,d.cM)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),qn([(0,d.fF)()],FileHistoryTrackerNode.prototype,"subscribe",1),qn([(0,d.fF)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var Yn=Object.defineProperty,jn=Object.getOwnPropertyDescriptor,zn=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?jn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Yn(t,i,n),n};const Kn=class extends $i.CF{constructor(e,t,i,s,r,n){super(e,t,i),this.branch=s,this.selection=r,this.editorContents=n,this.splatted=!0,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t,i){return`${al.getId(e)}${this.key}(${t}[${i.start.line},${i.start.character}-${i.end.line},${i.end.character}])`}toClipboard(){return this.uri.fileName}get id(){return Kn.getId(this.uri.repoPath,this.uri.toString(!0),this.selection)}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[];let t=this.selection;const i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[r,n,o,a]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,u.l3)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,i?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:i}):void 0]);if(null!=n)for(const i of n.commits.values()){if(!i.isUncommitted)continue;const r=n.lines[0],o=n.lines[n.lines.length-1],a=t.active.line===r.line-1;t=new s.Selection((a?o:r).originalLine-1,t.anchor.character,(a?r:o).originalLine-1,t.active.character);const l=await this.view.container.git.getStatusForFile(this.uri.repoPath,this.uri);if(null!=l){const s={conflictStatus:l?.conflictStatus,path:i.file?.path??"",indexStatus:l?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:l?.status??D.NV.Modified,workingTreeStatus:l?.workingTreeStatus},r=await this.view.container.git.getCurrentUser(this.uri.repoPath),n=l?.getPseudoCommits(this.view.container,r);if(null!=n)for(const i of n.reverse())e.splice(0,0,new FileRevisionAsCommitNode(this.view,this,s,i,{selection:t}))}break}return null!=r&&(e.push(...Wn((0,ye.DZ)(r.commits.values(),(e=>null!=e.file?new FileRevisionAsCommitNode(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:a?.has(e.ref)}):void 0)),this)),r.hasMore&&e.push(new LoadMoreNode(this.view,this,e[e.length-1]))),0===e.length?[new MessageNode(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new s.TreeItem(e,s.TreeItemCollapsibleState.Expanded);return t.contextValue=$i.Td.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===P.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return s.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem())}etag(){return Date.now()}onRepositoryChanged(e){e.changed(lt.I6.Index,lt.I6.Heads,lt.I6.Remotes,lt.I6.RemoteProviders,lt.I6.Status,lt.I6.Unknown,lt.du.Any)&&(be.Yd.debug(`LineHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){e.uris.some((e=>e.toString()===this.uri.toString()))&&(be.Yd.debug(`LineHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0))}refresh(e){e&&(this._log=void 0)}async getLog(e){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.uri,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,ref:this.uri.sha,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};let Jn=Kn;Jn.key=":history:line",zn([(0,se.H)()],Jn.prototype,"lines",1),zn([(0,d.fF)()],Jn.prototype,"subscribe",1),zn([(0,Wt.H)(),(0,d.fF)()],Jn.prototype,"refresh",1),zn([(0,Wt.H)()],Jn.prototype,"loadMore",1);var Zn=Object.defineProperty,Xn=Object.getOwnPropertyDescriptor,eo=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xn(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Zn(t,i,n),n};class LineHistoryTrackerNode extends $i.CF{constructor(e){super(st.Wj,e),this.splatted=!0}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];if(null==this._selection)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===P.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${this.followingEditor?"":" (pinned)"}`,[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},t=new st.YY(this.uri,e);let i;e.sha&&"HEAD"!==e.sha?(0,u.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new Jn(t,this.view,this,i,this._selection,this._editorContents)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new s.TreeItem("Line History",s.TreeItemCollapsibleState.Expanded);return e.contextValue=$i.Td.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=st.Wj}async changeBase(){const e=await Bn(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,u.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,Ut.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==st.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=s.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&s.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!0;const r=await st.YY.fromUri(i.document.uri);return!!(this.hasUri&&En.n.equals(r,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==r.repoPath?this.reset():(this.setUri(r),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.resetChild()),null!=t&&(t.exitDetails=`, uri=${be.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.resetChild()}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;const e=(0,Lt.Ds)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,this.view.container.lineTracker.onDidChangeActiveLines((t=>{t.pending||e(t)})))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??st.Wj,(0,Ci.v)(c.zf.ViewsFileHistoryCanPin,this.hasUri)}}eo([(0,d.fF)()],LineHistoryTrackerNode.prototype,"resetChild",1),eo([(0,Wt.H)(),(0,d.cM)()],LineHistoryTrackerNode.prototype,"changeBase",1),eo([(0,Wt.H)(),(0,d.fF)({exit:e=>`returned ${e}`})],LineHistoryTrackerNode.prototype,"refresh",1),eo([(0,d.cM)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),eo([(0,d.fF)()],LineHistoryTrackerNode.prototype,"subscribe",1),eo([(0,d.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);const to=" (pinned)";class FileHistoryView extends ViewBase{constructor(e){super(e,"gitlens.views.fileHistory","File History","fileHistoryView"),this.configKey="fileHistory",this._followCursor=!1,this._followEditor=!0,(0,Ci.v)(c.zf.ViewsFileHistoryCursorFollowing,this._followCursor),(0,Ci.v)(c.zf.ViewsFileHistoryEditorFollowing,this._followEditor)}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),la(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),la(this.getQualifiedCommand("setCursorFollowingOn"),(()=>this.setCursorFollowing(!0)),this),la(this.getQualifiedCommand("setCursorFollowingOff"),(()=>this.setCursorFollowing(!1)),this),la(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),la(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),la(this.getQualifiedCommand("setRenameFollowingOn"),(()=>this.setRenameFollowing(!0)),this),la(this.getQualifiedCommand("setRenameFollowingOff"),(()=>this.setRenameFollowing(!1)),this),la(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),la(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"advanced.fileHistoryFollowsRenames")||r.D.changed(e,"advanced.fileHistoryShowAllBranches"))}async showHistoryForUri(e){this.setCursorFollowing(!1);const t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){const t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,Ci.v)(c.zf.ViewsFileHistoryCursorFollowing,e),this.title=this._followCursor?"Line History":"File History";const i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,Ci.v)(c.zf.ViewsFileHistoryEditorFollowing,e),t.setEditorFollowing(e),this.description?.endsWith(to)?e&&(this.description=this.description.substr(0,this.description.length-to.length)):e||null==this.description||(this.description+=to),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return r.D.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return r.D.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}}var io=Object.defineProperty,so=Object.getOwnPropertyDescriptor,ro=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?so(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&io(t,i,n),n};const no=class extends $i.bT{constructor(e,t,i,s){super(e,t,i),this.tag=s,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t){return`${al.getId(e)}${this.key}(${t})`}toClipboard(){return this.tag.name}get id(){return no.getId(this.tag.repoPath,this.tag.name)}get label(){return this.view.config.branches.layout===te.CZ.Tree?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){const e=await this.getLog();if(null==e)return[new MessageNode(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.tag.name),i=[...Wn((0,ye.UI)(e.commits.values(),(e=>new Ao(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new LoadMoreNode(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.getCommitCount(this.tag.repoPath,this.tag.name)})),i}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Tag,e.description=(0,Xe.X)(this.tag.message),e.tooltip=`${this.tag.name}${(0,C.vk)(c.NE.Dash,2,2)}${(0,u.zL)(this.tag.sha,{force:!0})}${null!=this.tag.date?`\n${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}\n\n${(0,Xe.X)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`\n${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:this.tag.name})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};let oo=no;oo.key=":tag",ro([(0,Wt.H)(),(0,d.fF)()],oo.prototype,"refresh",1),ro([(0,Wt.H)()],oo.prototype,"loadMore",1);var ao=Object.defineProperty,lo=Object.getOwnPropertyDescriptor;const co=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return co.getId(this.repo.path)}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){const e=await this.repo.getTags({sort:!0});if(0===e.values.length)return[new MessageNode(this.view,this,"No tags could be found.")];const t=e.values.map((e=>new oo(st.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e)));if(this.view.config.branches.layout===te.CZ.List)return t;const i=(0,y.Mo)(t,(e=>e.tag.name.split("/")),((...e)=>e.join("/")),this.view.config.files.compact),s=new BranchOrTagFolderNode(this.view,this,"tag",this.repo.path,"",void 0,i,"tags");this._children=s.getChildren()}return this._children}getTreeItem(){const e=new s.TreeItem("Tags",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Tags,e.iconPath=new s.ThemeIcon("tag"),e}refresh(){this._children=void 0}};let ho=co;ho.key=":tags",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?lo(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&ao(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],ho.prototype,"refresh",1);var uo=Object.defineProperty,po=Object.getOwnPropertyDescriptor,mo=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?po(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&uo(t,i,n),n};class TagsRepositoryNode extends $i.vb{async getChildren(){return null==this.child&&(this.child=new ho(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(lt.I6.Tags,lt.I6.Unknown,lt.du.Any)}}class TagsViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No tags could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new TagsRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getTags();return 0===t.values.length?(this.view.message="No tags could be found.",this.view.title="Tags",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Tags (${t.values.length})`,e.getChildren())}return this.view.title="Tags",this.children}getTreeItem(){return new s.TreeItem("Tags",s.TreeItemCollapsibleState.Expanded)}}class TagsView extends ViewBase{constructor(e){super(e,"gitlens.views.tags","Tags","tagsView"),this.configKey="tags"}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showTags")}getRoot(){return new TagsViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("tags"),this.refresh(!0))),this),la(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout(te.CZ.List)),this),la(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout(te.CZ.Tree)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"sortTagsBy"))}findTag(e,t){const i=al.getId(e.repoPath);return this.findNode((t=>t.tag?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i),token:t})}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findTag(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}setLayout(e){return r.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}}mo([(0,Wt.H)((()=>""))],TagsView.prototype,"revealRepository",1),mo([(0,Wt.H)((()=>""))],TagsView.prototype,"revealTag",1);const go=class extends $i.RW{constructor(e,t,i,s,r={}){super(st.YY.fromFile(i,s.repoPath,s.sha),e,t,i),this.commit=s,this._options=r}static getId(e,t){return`${e.id}${this.key}(${t})`}toClipboard(){return this.file.path}get id(){return go.getId(this.parent,this.file.path)}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){const e=await this.commit.getCommitForFile(this.file);if(null==e){const e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,e.resourceUri=s.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`),e.tooltip=this.tooltip;const t=(0,D.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,b.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,b.RQ)("images","light",t))},e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${$i.Td.File}+staged`:`${$i.Td.File}+unstaged`:`${$i.Td.File}+committed${this._options.branch?.current?"+current":""}${this._options.branch?.current&&this._options.branch.sha===this.commit.ref?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}get description(){return StatusFileFormatter.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}get folderName(){return void 0===this._folderName&&(this._folderName=(0,b.Fd)(this.uri.relativePath)),this._folderName}get label(){return void 0===this._label&&(this._label=StatusFileFormatter.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get tooltip(){const e=StatusFileFormatter.fromTemplate("${file}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;\\\n'directory}&nbsp;\n\n${status}${ (originalPath)}",this.file),t=new s.MarkdownString(e,!0);return t.supportHtml=!0,t.isTrusted=!0,t}getCommand(){let e;e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0;const t={commit:this.commit,uri:st.YY.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,t]}}};let fo=go;fo.key=":file";const wo=class extends $i.Re{constructor(e,t,i,s){let r,n;"string"==typeof s?n=s:(n=s.repoPath,r=s),super(st.YY.fromRepoPath(n),e,t),this.parent=t,this.branchOrCommit=r,this.pullRequest=i,this.repoPath=n}static getId(e,t,i){return`${e.id}${this.key}(${t}):${i}`}toClipboard(){return this.pullRequest.url}get id(){return wo.getId(this.parent,this.pullRequest.id,this.branchOrCommit?.ref)}getChildren(){return[]}getTreeItem(){const e=new s.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,s.TreeItemCollapsibleState.None);e.id=this.id,e.contextValue=$i.Td.PullRequest,e.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,e.iconPath=mn.i7.getThemeIcon(this.pullRequest);const t=new s.MarkdownString("",!0);t.supportHtml=!0,t.isTrusted=!0,(0,A.f_)(this.branchOrCommit)&&t.appendMarkdown(`Commit \`$(git-commit) ${this.branchOrCommit.shortSha}\` was introduced by $(git-pull-request) PR #${this.pullRequest.id}\n\n`);const i=` "Open Pull Request \\#${this.pullRequest.id} on ${this.pullRequest.provider.name}"`;return t.appendMarkdown(`${mn.i7.getMarkdownIcon(this.pullRequest)} [**${this.pullRequest.title.trim()}**](${this.pullRequest.url}${i}) \\\n[#${this.pullRequest.id}](${this.pullRequest.url}${i}) by [@${this.pullRequest.author.name}](${this.pullRequest.author.url} "Open @${this.pullRequest.author.name} on ${this.pullRequest.provider.name}") was ${this.pullRequest.state===mn.o0.Open?"opened":this.pullRequest.state.toLowerCase()} ${this.pullRequest.formatDateFromNow()}`),e.tooltip=t,e}};let vo=wo;vo.key=":pullrequest";var yo=Object.defineProperty,bo=Object.getOwnPropertyDescriptor;const Co=class extends $i.bT{constructor(e,t,i,s,r,n,o={}){super(i.getGitUri(),e,t),this.parent=t,this.commit=i,this.unpublished=s,this.branch=r,this.getBranchAndTagTips=n,this._options=o}static getId(e,t){return`${e.id}${this.key}(${t})`}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get id(){return Co.getId(this.parent,this.commit.sha)}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(null==this._children){const e=this.commit;let t,i,s=[];if(!(this.view instanceof TagsView)&&!(this.view instanceof FileHistoryView)&&!this.unpublished&&(0,Ci.fw)(c.zf.HasConnectedRemotes)&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForCommits&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,Nt.PQ)();const i=this.getAssociatedPullRequest(e);queueMicrotask((async()=>{await(t?.promise);let s=!1;const r=setTimeout((()=>{s=!0,this.view.triggerNodeChange(this)}),250),n=await i;clearTimeout(r),null!=n&&null!=this._children&&this._children.splice(0,0,new vo(this.view,this,n,e)),(s||null!=n)&&this.view.triggerNodeChange(this)}))}const r=await e.getCommitsForFiles();for(const e of r)s.push(new fo(this.view,this,e.file,e));if(this.view.config.files.layout!==te.Vc.List){const e=(0,y.Mo)(s,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);s=new Rn(this.view,this,this.repoPath,"",e).getChildren()}else s.sort(((e,t)=>(0,C.dm)(e.label,t.label)));null!=i&&s.splice(0,0,new vo(this.view,this,i,e)),this._children=s,setTimeout((()=>t?.fulfill()),1)}return this._children}async getTreeItem(){const e=CommitFormatter.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new s.TreeItem(e,this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);t.id=this.id,t.contextValue=`${$i.Td.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=CommitFormatter.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0});const i=this.getState("pendingPullRequest");return t.iconPath=null!=i?new s.ThemeIcon("loading~spin"):this.unpublished?new s.ThemeIcon("arrow-up",new s.ThemeColor(c.wL.UnpublishedCommitIconColor)):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle")}):new s.ThemeIcon("git-commit"),t}getCommand(){const e={commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,e]}}refresh(e){this._children=void 0,e&&this.deleteState()}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let s=this.getState("pendingPullRequest");return s??(s=e.getAssociatedPullRequest({remote:t}),this.storeState("pendingPullRequest",s),i=await s,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}async getTooltip(){const e=await this.view.container.git.getRemotesWithProviders(this.commit.repoPath,{sort:!0}),t=await this.view.container.git.getBestRemoteWithRichProvider(e);let i,n;if(null==this.commit.message&&await this.commit.ensureFullDetails(),null!=t?.provider){const[e,s]=await Promise.allSettled([this.view.container.autolinks.getLinkedIssuesAndPullRequests(this.commit.message??this.commit.summary,t),this.getAssociatedPullRequest(this.commit,t)]);i=(0,Nt.Sb)(e),n=(0,Nt.Sb)(s),null!=n&&i?.delete(n.id)}const o=await CommitFormatter.fromTemplateAsync(this.view.config.formats.commits.tooltip,this.commit,{autolinkedIssuesOrPullRequests:i,dateFormat:r.D.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequestOrRemote:n,outputFormat:"markdown",remotes:e,unpublished:this.unpublished}),a=new s.MarkdownString(o,!0);return a.supportHtml=!0,a.isTrusted=!0,a}};let Ao=Co;Ao.key=":commit",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?bo(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&yo(t,i,n)})([(0,Wt.H)()],Ao.prototype,"refresh",1);var Po=Object.defineProperty,Do=Object.getOwnPropertyDescriptor,So=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Do(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Po(t,i,n),n};const ko=class extends $i.Re{constructor(e,t,i,s,r,n=!1,o){super(st.YY.fromRepoPath(s.repoPath),e,t),this.branch=i,this.status=s,this.upstreamType=r,this.root=n,this.limit=this.view.getNodeLastKnownLimit(this),this.options={showAheadCommits:!1,...o}}static getId(e,t,i,s,r){return`${ba.getId(e,t,i)}${this.key}(${s??""}):${r}`}get id(){return ko.getId(this.status.repoPath,this.status.ref,this.root,this.status.upstream,this.upstreamType)}get repoPath(){return this.uri.repoPath}async getChildren(){if("same"===this.upstreamType||"none"===this.upstreamType)return[];const e=await this.getLog();if(null==e)return[];let t;if("ahead"===this.upstreamType){t=[...e.commits.values()];const i=t[t.length-1];if(null==await i.getPreviousSha()){const e=await this.view.container.git.getLog(this.uri.repoPath,{limit:2,ref:i.sha});null!=e&&(t[t.length-1]=(0,ye.Ps)(e.commits.values()))}}else t=e.commits.values();const i=[];let s=!0;return!this.options.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream&&this.status.state.ahead>0?(s=!1,i.push(...await new _n(this.view,this,this.branch,this.status,this.upstreamType,this.root).getChildren())):(i.push(...Wn((0,ye.UI)(t,(e=>new Ao(this.view,this,e,"ahead"===this.upstreamType,this.branch))),this,1)),e.hasMore&&i.push(new LoadMoreNode(this.view,this,i[i.length-1]))),s&&i.splice(0,0,new _n(this.view,this,this.branch,this.status,this.upstreamType,this.root)),i}async getTreeItem(){let e,t,i,r,n,o,a=0;if("none"!==this.upstreamType){const e=this.view.container.git.getRepository(this.repoPath);a=await(e?.getLastFetched())??0}switch(this.upstreamType){case"ahead":{const a=await this.branch.getRemote();e=`Changes to push to ${a?.name??(0,p.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a?.provider.name}`:""}`,t=(0,C._6)("commit",this.status.state.ahead),o=`Branch $(git-branch) ${this.branch.name} is ${(0,C._6)("commit",this.status.state.ahead,{infix:"$(arrow-up) "})} ahead of $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=s.TreeItemCollapsibleState.Collapsed,r=this.root?$i.Td.StatusAheadOfUpstream:$i.Td.BranchStatusAheadOfUpstream,n=new s.ThemeIcon("cloud-upload",new s.ThemeColor(c.wL.UnpublishedChangesIconColor));break}case"behind":{const a=await this.branch.getRemote();e=`Changes to pull from ${a?.name??(0,p.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a.provider.name}`:""}`,t=(0,C._6)("commit",this.status.state.behind),o=`Branch $(git-branch) ${this.branch.name} is ${(0,C._6)("commit",this.status.state.behind,{infix:"$(arrow-down) "})} behind $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=s.TreeItemCollapsibleState.Collapsed,r=this.root?$i.Td.StatusBehindUpstream:$i.Td.BranchStatusBehindUpstream,n=new s.ThemeIcon("cloud-download",new s.ThemeColor(c.wL.UnpulledChangesIconColor));break}case"same":{const l=await this.branch.getRemote();e=`Up to date with ${l?.name??(0,p.Lo)(this.status.upstream)}${l?.provider?.name?` on ${l.provider.name}`:""}`,t=a?`Last fetched ${(0,ie.Zh)(new Date(a))}`:"",o=`Branch $(git-branch) ${this.branch.name} is up to date with $(git-branch) ${this.status.upstream}${l?.provider?.name?` on ${l.provider.name}`:""}`,i=s.TreeItemCollapsibleState.None,r=this.root?$i.Td.StatusSameAsUpstream:$i.Td.BranchStatusSameAsUpstream,n=new s.ThemeIcon("cloud");break}case"none":{const t=await this.view.container.git.getRemotesWithProviders(this.branch.repoPath),a=ot.ss.getHighlanderProviders(t),l=a?.length?a[0].name:void 0;e=`Publish ${this.branch.name} to ${l??"a remote"}`,o=`Branch $(git-branch) ${this.branch.name} hasn't been published to ${l??"a remote"}`,i=s.TreeItemCollapsibleState.None,r=this.root?$i.Td.StatusNoUpstream:$i.Td.BranchStatusNoUpstream,n=new s.ThemeIcon("cloud-upload",t.length?new s.ThemeColor(c.wL.UnpublishedChangesIconColor):void 0);break}}const l=new s.TreeItem(e,i);l.id=this.id,l.contextValue=r,l.description=t,a&&(o+=`\n\nLast fetched ${(0,ie.Zh)(new Date(a))}`),l.iconPath=n;const h=new s.MarkdownString(o,!0);return h.supportHtml=!0,h.isTrusted=!0,l.tooltip=h,l}refresh(e){e&&(this._log=void 0)}async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){const e="ahead"===this.upstreamType?(0,u.oI)(this.status.upstream,this.status.ref):(0,u.oI)(this.status.ref,this.status.upstream);this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};let Ro=ko;Ro.key=":status-branch:upstream",So([(0,Wt.H)(),(0,d.fF)()],Ro.prototype,"refresh",1),So([(0,Wt.H)()],Ro.prototype,"loadMore",1);class AutolinkedItemNode extends $i.Re{constructor(e,t,i,s){super(st.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=s}toClipboard(){return this.item.url}get id(){return`${this.parent.id}:item(${this.item.id})`}getChildren(){return[]}getTreeItem(){if(!function(e){return"closed"in e&&"boolean"==typeof e.closed}(this.item)){const{provider:e}=this.item,t=new s.TreeItem(`${this.item.prefix}${this.item.id}`,s.TreeItemCollapsibleState.None);return t.description=e?.name??"Custom",t.iconPath=new s.ThemeIcon(null==this.item.type?"link":this.item.type===te.fH.PullRequest?"git-pull-request":"issues"),t.contextValue=$i.Td.AutolinkedItem,t.tooltip=new s.MarkdownString(`${this.item.description?`Autolinked ${this.item.description}`:`${null==this.item.type?"Autolinked":this.item.type===te.fH.PullRequest?"Autolinked Pull Request":"Autolinked Issue"} ${this.item.prefix}${this.item.id}`} \\\n[${this.item.url}](${this.item.url}${null!=this.item.title?` "${this.item.title}"`:""})`),t}const e=(0,ie.Zh)(this.item.closedDate??this.item.date),t=new s.TreeItem(`${this.item.id}: ${this.item.title}`,s.TreeItemCollapsibleState.None);t.description=e,t.iconPath=(0,hi.xX)(this.item),t.contextValue=this.item.type===hi.mX.PullRequest?$i.Td.PullRequest:$i.Td.AutolinkedIssue;const i=` "Open ${this.item.type===hi.mX.PullRequest?"Pull Request":"Issue"} \\#${this.item.id} on ${this.item.provider.name}"`,r=new s.MarkdownString(`${(0,hi.sy)(this.item)} [**${this.item.title.trim()}**](${this.item.url}${i}) \\\n[#${this.item.id}](${this.item.url}${i}) was ${this.item.closed?"closed":"opened"} ${e}`,!0);return r.supportHtml=!0,r.isTrusted=!0,t.tooltip=r,t}}var Fo=Object.defineProperty,$o=Object.getOwnPropertyDescriptor;let To=0;class AutolinkedItemsNode extends $i.Re{constructor(e,t,i,s,r){super(st.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=s,this.expand=r,this._instanceId=To++}get id(){return`${this.parent.id}:results:autolinked:${this._instanceId}`}async getChildren(){if(null==this._children){const e=[...this.log.commits.values()];let t;if(e.length){const i=e.map((e=>e.message)).join("\n");let s;const r=this.view.container.autolinks.getAutolinks(i),n=await this.view.container.git.getBestRemoteWithProvider(this.repoPath);if(null!=n){const e=this.view.container.autolinks.getAutolinks(i,n);s=e;const[t]=await Promise.allSettled([this.view.container.autolinks.getLinkedIssuesAndPullRequests(i,n,{autolinks:e})]);if("fulfilled"===t.status&&null!=t.value)for(const[e,i]of t.value)s.set(e,i);s=new Map((0,ye.G0)(s,r))}else s=r;t=[...s.values()].map((e=>mn.i7.is(e)?new vo(this.view,this,e,this.log.repoPath):new AutolinkedItemNode(this.view,this,this.repoPath,e)))}null!=t&&0!==t.length||(t=[new MessageNode(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&t.push(new LoadMoreNode(this.view,this.parent,t[t.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this._children=t}return this._children}getTreeItem(){const e=new s.TreeItem("Autolinked Issues and Pull Requests",this.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.AutolinkedItems,e}refresh(e=!1){e&&(this._children=void 0)}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?$o(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Fo(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],AutolinkedItemsNode.prototype,"refresh",1);class ResultsFileNode extends $i.RW{constructor(e,t,i,s,r,n,o){super(st.YY.fromFile(s,i,r||n),e,t,s),this.ref1=r,this.ref2=n,this.direction=o}toClipboard(){return this.file.path}get ref(){return(0,u.xB)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=$i.Td.ResultsFile,e.description=this.description,e.tooltip=StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)}",this.file);const t=(0,D.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,b.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,b.RQ)("images","light",t))},e.command=this.getCommand(),e}get description(){return void 0===this._description&&(this._description=StatusFileFormatter.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}get folderName(){return void 0===this._folderName&&(this._folderName=(0,b.Fd)(this.uri.relativePath)),this._folderName}get label(){return void 0===this._label&&(this._label=StatusFileFormatter.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}get priority(){return 0}getCommand(){const e={lhs:{sha:this.ref1,uri:"R"!==this.file.status&&"C"!==this.file.status||"behind"!==this.direction?this.uri:st.YY.fromFile(this.file,this.uri.repoPath,this.ref2,!0)},rhs:{sha:this.ref2,uri:"R"!==this.file.status&&"C"!==this.file.status||"behind"===this.direction?this.uri:st.YY.fromFile(this.file,this.uri.repoPath,this.ref2,!0)},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:c.Gh.DiffWith,arguments:[e]}}}var xo=Object.defineProperty,Io=Object.getOwnPropertyDescriptor,_o=(e=>(e[e.Left=0]="Left",e[e.Right=1]="Right",e))(_o||{});class ResultsFilesNode extends $i.Re{constructor(e,t,i,s,r,n,o,a={}){super(st.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=s,this.ref2=r,this._filesQuery=n,this.direction=o,this._options=a,this._options={expand:!0,...a}}get id(){return`${this.parent.id}:results:files`}get filter(){return this.view.nodeState.getState(this.id,"filter")}set filter(e){this.filter!==e&&(this.view.nodeState.storeState(this.id,"filter",e),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){const e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,ye.UI)(t,(e=>new ResultsFileNode(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction)))];if(this.view.config.files.layout!==te.Vc.List){const e=(0,y.Mo)(i,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);i=new Rn(this.view,this,this.repoPath,"",e).getChildren()}else i.sort(((e,t)=>e.priority-t.priority||(0,C.dm)(e.label,t.label)));return i}async getTreeItem(){let e,t,i,r,n,o;const a=this.filter;try{const l=await(0,Nt.HO)(this.getFilesQueryResults(),100);e=l.label,null==a&&null!=l.stats&&(t=`${(0,C._6)("addition",l.stats.additions)} (+), ${(0,C._6)("deletion",l.stats.deletions)} (-)${l.stats.approximated?" *approximated":""}`,o=`${e}, ${t}`),null!=a?(t="Filtered",o=`${e} &mdash; ${t}`,r=l.filtered?.get(a),null==r&&(e="files changed",i=new s.ThemeIcon("ellipsis"),n=s.TreeItemCollapsibleState.Collapsed,this._filterResults?.then((()=>queueMicrotask((()=>this.triggerChange(!1))))))):r=l.files,void 0===n&&(n=null==r||0===r.length?s.TreeItemCollapsibleState.None:this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof Nt.PK&&t.promise.then((()=>queueMicrotask((()=>this.triggerChange(!1))))),e="files changed",i=new s.ThemeIcon("ellipsis"),n=s.TreeItemCollapsibleState.Collapsed}const l=new s.TreeItem(`${null!=a&&null!=r?`Showing ${r.length} of `:""}${e}`,n);return l.description=t,l.id=this.id,l.iconPath=i,l.contextValue=`${$i.Td.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,l.tooltip=o,l}refresh(e=!1){e&&(this.view.nodeState.deleteState(this.id,"filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());const e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&null==e.filtered?.get(this.filter)?(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults,e):e}async filterResults(e,t){let i;const s=0===this.filter?this.ref2:this.ref1,r=await this.view.container.git.getMergeBase(this.repoPath,this.ref1||"HEAD",this.ref2||"HEAD");if(null!=r){const e=await this.view.container.git.getDiffStatus(this.uri.repoPath,`${r}..${s}`);null!=e&&(i=new Set(e.map((e=>e.path))))}else{const e=await this.view.container.git.getCommit(this.uri.repoPath,s||"HEAD");null!=e?.files&&(i=new Set(e.files.map((e=>e.path))))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter((e=>i.has(e.path))))}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Io(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&xo(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],ResultsFilesNode.prototype,"refresh",1);var Oo=Object.defineProperty,Bo=Object.getOwnPropertyDescriptor;class ResultsCommitsNode extends $i.Re{constructor(e,t,i,s,r,n={},o){super(st.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=s,this._results=r,this._options=n,this._hasMore=!0,this._expandAutolinks=!1,this.limit=this.view.getNodeLastKnownLimit(this),null!=o&&(this.splatted=o),this._options={expand:!0,...n}}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}get id(){return`${this.parent.id}:results:commits${this._options.id?`:${this._options.id}`:""}`}async getChildren(){const{log:e}=await this.getCommitsQueryResults();if(null==e)return[];const[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath)]),i=[new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)];this._expandAutolinks=!1;const{files:s}=this._results;null!=s&&i.push(new ResultsFilesNode(this.view,this,this.uri.repoPath,s.ref1,s.ref2,s.query,this._results.direction,{expand:!1}));const r={expand:this._options.expand&&1===e.count};return i.push(...Wn((0,ye.UI)(e.commits.values(),(e=>new Ao(this.view,this,e,void 0,void 0,t,r))),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new LoadMoreNode(this.view,this,i[i.length-1])),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=s.TreeItemCollapsibleState.Collapsed;else try{let i;({label:e,log:i}=await(0,Nt.HO)(this.getCommitsQueryResults(),100)),t=null==i||0===i.count?s.TreeItemCollapsibleState.None:this._options.expand||1===i.count?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed}catch(e){e instanceof Nt.PK&&e.promise.then((()=>this.triggerChange(!1))),t=s.TreeItemCollapsibleState.Collapsed}const i=new s.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?$i.Td.CompareResultsCommits:$i.Td.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this.getCommitsQueryResults())}async getCommitsQueryResults(){if(null==this._commitsQueryResults){this._commitsQueryResults=this._results.query(this.limit??r.D.get("advanced.maxSearchItems"));const e=await this._commitsQueryResults;this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.triggerChange(!1))}return this._commitsQueryResults}get hasMore(){return this._hasMore}async loadMore(e,t){const i=await this.getCommitsQueryResults();null!=i&&i.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=Boolean(t.expandAutolinks)),await(i.more?.(e??this.view.config.pageItemLimit)),this.limit=i.log?.count,this.triggerChange(!1))}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Bo(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Oo(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],ResultsCommitsNode.prototype,"refresh",1);var Eo=Object.defineProperty,Mo=Object.getOwnPropertyDescriptor,Wo=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Mo(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Eo(t,i,n),n};const Lo=class extends $i.Re{constructor(e,t,i,s,r,n=!1){super(e,t,i),this.branch=s,this.showComparison=r,this.root=n,this.loadCompareWith()}static getId(e,t,i){return`${al.getId(e)}${this.key}(${t})${i?":root":""}`}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}get id(){return Lo.getId(this.branch.repoPath,this.branch.name,this.root)}get repoPath(){return this.branch.repoPath}async getChildren(){if(null==this._compareWith)return[];if(null==this._children){const e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.branch.repoPath,[(0,u.oI)(t.ref1,t.ref2,"...")]),s=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2);this._children=[new ResultsCommitsNode(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,u.oI)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{id:"behind",description:(0,C._6)("commit",i?.behind??0),expand:!1}),new ResultsCommitsNode(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,u.oI)(e.ref1,this.compareWithWorkingTree?"":e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{id:"ahead",description:(0,C._6)("commit",i?.ahead??0),expand:!1}),new ResultsFilesNode(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})]}return this._children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=s.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${(0,u.zL)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=s.TreeItemCollapsibleState.Collapsed);const r=new s.TreeItem(t,e);return r.id=this.id,r.contextValue=`${$i.Td.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}`,null==this._compareWith&&(r.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${c.NE.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),r.iconPath=new s.ThemeIcon("git-compare"),r.tooltip=i,r}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this._children=void 0,this.view.triggerNodeChange(this)}async edit(){await this.compareWith()}refresh(){this._children=void 0,this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e}):this.showComparison=e,this._children=void 0,this.view.triggerNodeChange(this)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return this.comparisonType===te.DH.Working}async compareWith(){const e=await Bn(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof CommandQuickPickItem||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this._children=void 0,this.view.triggerNodeChange(this))}async getAheadFilesQuery(){const e=(0,u.oI)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),[t,i,s,r]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]);let n=(0,Nt.Sb)(t)??[],o=(0,Nt.Sb)(s);if(this.compareWithWorkingTree){const e=(0,Nt.Sb)(i);if(null!=e)if(0===n.length)n=e;else for(const t of e){const e=n.findIndex((e=>e.path===t.path));-1!==e?n.splice(e,1,t):n.push(t)}const t=(0,Nt.Sb)(r);null!=t&&(o=null==o?t:{additions:o.additions+t.additions,deletions:o.deletions+t.deletions,changedFiles:n.length,approximated:!0})}return{label:`${(0,C._6)("file",n.length,{zero:"No"})} changed`,files:n,stats:o}}async getBehindFilesQuery(){const e=(0,u.oI)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),s=(0,Nt.Sb)(t)??[];return{label:`${(0,C._6)("file",s.length,{zero:"No"})} changed`,files:s,stats:(0,Nt.Sb)(i)}}getCommitsQuery(e){const t=this.repoPath;return async i=>{const s=await this.view.container.git.getLog(t,{limit:i,ref:e}),r={log:s,hasMore:s?.hasMore??!0};return r.hasMore&&(r.more=async e=>{r.log=await(r.log?.more?.(e))??r.log,r.hasMore=r.log?.hasMore??!0}),r}}async getFilesQuery(){let e;e=this._compareWith?.ref?this.compareWithWorkingTree?this._compareWith.ref:`${this._compareWith.ref}..${this.branch.ref}`:this.branch.ref;const[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),s=(0,Nt.Sb)(t)??[];return{label:`${(0,C._6)("file",s.length,{zero:"No"})} changed`,files:s,stats:(0,Nt.Sb)(i)}}loadCompareWith(){const e=this.view.container.storage.getWorkspace("branch:comparisons"),t=`${this.branch.id}${this.branch.current?"+current":""}`,i=e?.[t];this._compareWith=null!=i&&"string"==typeof i?{ref:i,notation:void 0,type:this.showComparison}:i}async updateCompareWith(e){this._compareWith=e;let t=this.view.container.storage.getWorkspace("branch:comparisons");if(null==t){if(null==e)return;t=Object.create(null)}const i=`${this.branch.id}${this.branch.current?"+current":""}`;if(null!=e)t[i]={...e};else{if(null==t[i])return;const{[i]:e,...s}=t;t=s}await this.view.container.storage.storeWorkspace("branch:comparisons",t)}};let Uo=Lo;Uo.key=":compare-branch",Wo([(0,d.cM)()],Uo.prototype,"clear",1),Wo([(0,d.cM)()],Uo.prototype,"edit",1),Wo([(0,Wt.H)(),(0,d.fF)()],Uo.prototype,"refresh",1),Wo([(0,d.cM)()],Uo.prototype,"setComparisonType",1);var No=Object.defineProperty,Go=Object.getOwnPropertyDescriptor,Ho=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Go(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&No(t,i,n),n};const Vo=class extends $i.Re{constructor(e,t,i,s,r){super(e,t,i),this.contributor=s,this._options=r,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t,i,s){return`${al.getId(e)}${this.key}(${t}|${i}|${s})`}toClipboard(){return`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`}get id(){return Vo.getId(this.contributor.repoPath,this.contributor.name,this.contributor.email,this.contributor.username)}get repoPath(){return this.contributor.repoPath}async getChildren(){const e=await this.getLog();if(null==e)return[new MessageNode(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),i=[...Wn((0,ye.UI)(e.commits.values(),(e=>new Ao(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new LoadMoreNode(this.view,this,i[i.length-1])),i}async getTreeItem(){const e=this._options?.presence?.get(this.contributor.email),t=new s.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,s.TreeItemCollapsibleState.Collapsed);let i,n;if(t.id=this.id,t.contextValue=this.contributor.current?`${$i.Td.Contributor}+current`:$i.Td.Contributor,t.description=`${null!=e&&"offline"!==e.status?`${e.statusText} ${c.NE.Space}${c.NE.Dot}${c.NE.Space} `:""}${null!=this.contributor.date?`${this.contributor.formatDateFromNow()}, `:""}${(0,C._6)("commit",this.contributor.count)}`,this.view.config.avatars){const t=r.D.get("hovers.avatarSize");if(i=await this.contributor.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle"),size:t}),null!=e){const s=`${this.contributor.count?"You are":`${this.contributor.label} is`} ${"dnd"===e.status?"in ":""}${e.statusText.toLocaleLowerCase()}`;n=`![${s}](${i.toString(!0)}|width=${t},height=${t} "${s}")![${s}](${(0,Ze.TU)(e.status)} "${s}")`}else n=`![${this.contributor.label}](${i.toString(!0)}|width=${t},height=${t} "${this.contributor.label}")`}const o=new Intl.NumberFormat,a=null!=this.contributor.stats?`\\\n${(0,C._6)("file",this.contributor.stats.files,{format:o.format})} changed, ${(0,C._6)("addition",this.contributor.stats.additions,{format:o.format})}, ${(0,C._6)("deletion",this.contributor.stats.deletions,{format:o.format})}`:"",l=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,h=null!=this.contributor.date?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\\n`:"",u=new s.MarkdownString(`${null!=n?n:""} &nbsp;${l} \n\n${h}${(0,C._6)("commit",this.contributor.count,{format:o.format})}${a}`);return u.supportHtml=!0,u.isTrusted=!0,t.tooltip=u,t.iconPath=i,t}refresh(e){e&&(this._log=void 0)}async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{all:this._options?.all,ref:this._options?.ref,limit:this.limit??this.view.config.defaultItemLimit,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};let Qo=Vo;Qo.key=":contributor",Ho([(0,Wt.H)(),(0,d.fF)()],Qo.prototype,"refresh",1),Ho([(0,Wt.H)()],Qo.prototype,"loadMore",1);class MergeConflictFileNode extends $i.Te{constructor(e,t,i,s){super(st.YY.fromFile(i,s.repoPath,s.HEAD.ref),e,t,i),this.status=s}toClipboard(){return this.fileName}get baseUri(){return st.YY.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new MergeConflictCurrentChangesNode(this.view,this,this.status,this.file),new MergeConflictIncomingChangesNode(this.view,this,this.status,this.file)]}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.Collapsed);e.description=this.description,e.contextValue=`${$i.Td.File}+conflicted`;const t=StatusFileFormatter.fromTemplate("${file}${ • changesDetail}${\\\\\ndirectory}${\n\nstatus}${ (originalPath)} in Index (staged)",this.file),i=new s.MarkdownString(t,!0);return i.isTrusted=!0,i.supportHtml=!0,e.tooltip=i,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=s.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}get description(){return null==this._description&&(this._description=StatusFileFormatter.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}get folderName(){return null==this._folderName&&(this._folderName=(0,b.Fd)(this.uri.relativePath)),this._folderName}get label(){return null==this._label&&(this._label=StatusFileFormatter.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return{title:"Open File",command:c.nA.Open,arguments:[this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0}]}}}class StashFileNode extends fo{constructor(e,t,i,s){super(e,t,i,s)}get contextValue(){return`${$i.Td.File}+stashed`}}const qo=class extends $i.bT{constructor(e,t,i){super(i.getGitUri(),e,t),this.commit=i}static getId(e,t){return`${al.getId(e)}${this.key}(${t})`}toClipboard(){return this.commit.stashName}get id(){return qo.getId(this.commit.repoPath,this.commit.sha)}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles()).map((e=>new StashFileNode(this.view,this,e.file,e)));if(this.view.config.files.layout!==te.Vc.List){const t=(0,y.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);e=new Rn(this.view,this,this.repoPath,"",t).getChildren()}else e.sort(((e,t)=>(0,C.dm)(e.label,t.label)));return e}getTreeItem(){const e=new s.TreeItem(CommitFormatter.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:r.D.get("defaultDateFormat")}),s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=CommitFormatter.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:r.D.get("defaultDateFormat")}),e.contextValue=$i.Td.Stash,e.tooltip=CommitFormatter.fromTemplate("${'On 'stashOnRef\n}${ago} (${date})\n\n${message}",this.commit,{dateFormat:r.D.get("defaultDateFormat")}),e}};let Yo=qo;Yo.key=":stash";class UncommittedFileNode extends $i.Te{constructor(e,t,i,s){super(st.YY.fromFile(s,i),e,t,s)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=$i.Td.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);const t=(0,D.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,b.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,b.RQ)("images","light",t))},e.tooltip=StatusFileFormatter.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)}",this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}get description(){return null==this._description&&(this._description=StatusFileFormatter.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}get folderName(){return null==this._folderName&&(this._folderName=(0,b.XX)(this.uri.relativePath)),this._folderName}get label(){return null==this._label&&(this._label=StatusFileFormatter.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){const e={uri:st.YY.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,e]}}}const jo=class extends $i.Re{constructor(e,t,i,s){super(st.YY.fromRepoPath(i.repoPath),e,t),this.status=i,this.range=s,this.repoPath=i.repoPath}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return jo.getId(this.repoPath)}getChildren(){const e=this.repoPath,t=[...(0,ye.VS)(this.status.files,(e=>{if(null!=e.workingTreeStatus&&null!=e.indexStatus){const t=new Date;return t.setMilliseconds(t.getMilliseconds()-1),[this.getFileWithPseudoCommit(e,P.CL,P.pw),this.getFileWithPseudoCommit(e,P.pw,"HEAD",t)]}return null!=e.indexStatus?[this.getFileWithPseudoCommit(e,P.pw,"HEAD")]:[this.getFileWithPseudoCommit(e,P.CL,"HEAD")]}))];t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,y.vM)(t,(e=>e.path));let s=Object.values(i).map((t=>new UncommittedFileNode(this.view,this,e,t[t.length-1])));if(this.view.config.files.layout!==te.Vc.List){const t=(0,y.Mo)(s,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);s=new Rn(this.view,this,e,"",t,!0).getChildren()}else s.sort(((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"})));return s}getTreeItem(){const e=new s.TreeItem("Uncommitted changes",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.UncommittedFiles,e.iconPath=new s.ThemeIcon("folder"),e}getFileWithPseudoCommit(e,t,i,s){return s=s??new Date,{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:new A.aM(this.view.container,e.repoPath,t,new A._j("You",void 0,s),new A._j("You",void 0,s),"Uncommitted changes",[i],"Uncommitted changes",new D.K8(e.repoPath,e.path,e.status,e.originalPath,i),void 0,[])}}};let zo=jo;zo.key=":uncommitted-files";var Ko=Object.defineProperty,Jo=Object.getOwnPropertyDescriptor,Zo=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Jo(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ko(t,i,n),n};const Xo=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.worktree=s,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t){return`${al.getId(e)}${this.key}(${t.path})`}toClipboard(){return this.worktree.uri.fsPath}get id(){return Xo.getId(this.worktree.repoPath,this.worktree.uri)}get repoPath(){return this.uri.repoPath}async getChildren(){if(null==this._children){const e=this._branch;let t,i;if(null!=e&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,Ci.fw)(c.zf.HasConnectedRemotes)&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,Nt.PQ)();const i=this.getAssociatedPullRequest(e,{include:[mn.o0.Open,mn.o0.Merged]});queueMicrotask((async()=>{await(t?.promise);let s=!1;const r=setTimeout((()=>{s=!0,this.view.triggerNodeChange(this)}),250),n=await i;clearTimeout(r),null!=n&&null!=this._children&&this._children.splice(this._children[0]instanceof Uo?1:0,0,new vo(this.view,this,n,e)),(s||null!=n)&&this.view.triggerNodeChange(this)}))}const[s,r,n,o]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),this.worktree.getStatus(),null==e||e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),a=(0,Nt.Sb)(s);if(null==a)return[new MessageNode(this.view,this,"No commits could be found.")];const l=[];null!=e&&!1!==this.view.config.showBranchComparison&&l.push(new Uo(this.uri,this.view,this,e,this.view.config.showBranchComparison,this.splatted)),null!=e&&null!=i&&l.push(new vo(this.view,this,i,e));const h=(0,Nt.Sb)(o),u=(0,Nt.Sb)(r);l.push(...Wn((0,ye.UI)(a.commits.values(),(t=>new Ao(this.view,this,t,h?.has(t.ref),e,u))),this)),a.hasMore&&l.push(new LoadMoreNode(this.view,this,l[l.length-1]));const d=(0,Nt.Sb)(n);d?.hasChanges&&l.splice(0,0,new zo(this.view,this,d,void 0)),this._children=l,t?.fulfill()}return this._children}async getTreeItem(){this.splatted=!1;let e="";const t=new s.MarkdownString("",!0);let i,r=!1;const n=this.worktree.main||this.worktree.opened?`${(0,C.vk)(c.NE.Dash,2,2)} ${this.worktree.main?"_Main"+(this.worktree.opened?", Active_":"_"):this.worktree.opened?"_Active_":""} `:"";switch(this.worktree.type){case"bare":i=new s.ThemeIcon("folder"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Bare Worktree${n}\\\n\`${this.worktree.friendlyPath}\``);break;case"branch":{const[o,a]=await Promise.all([this.worktree.getBranch(),this.worktree.getStatus()]);if(this._branch=o,t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Worktree for Branch $(git-branch) ${o?.getNameWithoutRemote()??this.worktree.branch}${n}\\\n\`${this.worktree.friendlyPath}\``),i=new s.ThemeIcon("git-branch"),null!=a&&(r=a.hasChanges,t.appendMarkdown(`\n\n${a.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`)),null!=o&&(t.appendMarkdown(`\n\nBranch $(git-branch) ${o.getNameWithoutRemote()}`),!o.remote))if(null!=o.upstream){let i=c.NE.Dash;const s=await o.getRemote();if(o.upstream.missing)i=c.NE.Warning;else if(null!=s){let e,t;for(const{type:i}of s.urls)if(i===ot.XG.Fetch){if(e=!0,t)break}else if(i===ot.XG.Push&&(t=!0,e))break;e&&t?i=c.NE.ArrowsRightLeft:t?i=c.NE.ArrowRight:e&&(i=c.NE.ArrowLeft)}e=`${o.getTrackingStatus({empty:(0,C.vk)(i,0,2),suffix:(0,C.vk)(i,2,2)})}${o.upstream.name}`,t.appendMarkdown(` is ${o.getTrackingStatus({empty:o.upstream.missing?`missing upstream $(git-branch) ${o.upstream.name}`:`up to date with $(git-branch)  ${o.upstream.name}${s?.provider?.name?` on ${s.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${o.upstream.name}${s?.provider?.name?` on ${s.provider.name}`:""}`})}`)}else{const e=ot.ss.getHighlanderProviderName(await this.view.container.git.getRemotesWithProviders(o.repoPath));t.appendMarkdown(` hasn't been published to ${e??"a remote"}`)}break}case"detached":{i=new s.ThemeIcon("git-commit"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,u.zL)(this.worktree.sha)}${n}\\\n\`${this.worktree.friendlyPath}\``);const e=await this.worktree.getStatus();null!=e&&(r=e.hasChanges,t.appendMarkdown(`\n\n${e.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`));break}}const o=this.getState("pendingPullRequest");null!=o&&t.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${c.NE.Ellipsis}`);const a=new s.TreeItem(this.worktree.name,s.TreeItemCollapsibleState.Collapsed);return a.id=this.id,a.description=e,a.contextValue=`${$i.Td.Worktree}${this.worktree.main?"+main":""}${this.worktree.opened?"+active":""}`,a.iconPath=null!=o?new s.ThemeIcon("loading~spin"):this.worktree.opened?new s.ThemeIcon("check"):i,a.tooltip=t,a.resourceUri=r?s.Uri.parse("gitlens-view://worktree/changes"):void 0,a}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let s=this.getState("pendingPullRequest");return s??(s=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",s),i=await s,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{ref:this.worktree.sha,limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}};let ea=Xo;ea.key=":worktree",Zo([(0,Wt.H)(),(0,d.fF)()],ea.prototype,"refresh",1),Zo([(0,Wt.H)()],ea.prototype,"loadMore",1);var ta=Object.defineProperty,ia=Object.getOwnPropertyDescriptor;const sa=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return sa.getId(this.repo.path)}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){if(!(await this.repo.access(et.x.Worktrees)).allowed)return[];const e=await this.repo.getWorktrees();if(0===e.length)return[new MessageNode(this.view,this,"No worktrees could be found.")];this._children=e.map((e=>new ea(this.uri,this.view,this,e)))}return this._children}async getTreeItem(){const e=await this.repo.access(et.x.Worktrees),t=new s.TreeItem("Worktrees",e.allowed?s.TreeItemCollapsibleState.Collapsed:s.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=$i.Td.Worktrees,t.description=e.allowed?void 0:` ${c.NE.Warning}  Requires GitLens Pro to access Worktrees on private repos`,t.iconPath=new s.ThemeIcon("folder-opened"),t}refresh(){this._children=void 0}};let ra=sa;ra.key=":worktrees",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?ia(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&ta(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],ra.prototype,"refresh",1);var na=Object.defineProperty,oa=Object.getOwnPropertyDescriptor,aa=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?oa(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&na(t,i,n),n};function la(e,t,i,s=1){return(0,ki.xR)(e,((...e)=>{if(0!==s){let[r,n,...o]=e;if(r instanceof $i.Re&&Array.isArray(n)&&n[0]instanceof $i.Re)return n=n.filter((e=>e?.constructor===r.constructor)),2===s?t.apply(i,[r,n,...o]):(0,Lt.df)(t,n.map((e=>[e,...o])),i)}return t.apply(i,e)}),i)}class ViewCommands{constructor(e){this.container=e,la("gitlens.views.clearNode",(e=>(0,$i.kr)(e)&&e.clear()),this),(0,ki.xR)(c.Gh.ViewsCopy,(async(e,t)=>{if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;const i=t.map((e=>e.toClipboard?.())).filter((e=>Boolean(e))).join("\n");await s.env.clipboard.writeText(i)}),this),la("gitlens.views.dismissNode",(e=>(0,$i.kP)(e.view)&&e.view.dismissNode(e)),this),la("gitlens.views.editNode",(e=>(0,$i.LD)(e)&&e.edit()),this),la("gitlens.views.expandNode",(e=>e.view.reveal(e,{select:!1,focus:!1,expand:3})),this),la("gitlens.views.loadMoreChildren",(e=>e.loadMore()),this),la("gitlens.views.loadAllChildren",(e=>e.loadAll()),this),la("gitlens.views.refreshNode",((e,t)=>(null==t&&(0,$i.On)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,t??!0))),this),la("gitlens.views.setShowRelativeDateMarkersOn",(()=>this.setShowRelativeDateMarkers(!0)),this),la("gitlens.views.setShowRelativeDateMarkersOff",(()=>this.setShowRelativeDateMarkers(!1)),this),la("gitlens.views.fetch",this.fetch,this),la("gitlens.views.publishBranch",this.publishBranch,this),la("gitlens.views.publishRepository",this.publishRepository,this),la("gitlens.views.pull",this.pull,this),la("gitlens.views.push",this.push,this),la("gitlens.views.pushWithForce",(e=>this.push(e,!0)),this),la("gitlens.views.closeRepository",this.closeRepository,this),la("gitlens.views.setAsDefault",this.setAsDefault,this),la("gitlens.views.unsetAsDefault",this.unsetAsDefault,this),la("gitlens.views.openInTerminal",this.openInTerminal,this),la("gitlens.views.star",this.star,this),la("gitlens.views.unstar",this.unstar,this),la("gitlens.views.browseRepoAtRevision",this.browseRepoAtRevision,this),la("gitlens.views.browseRepoAtRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{openInNewWindow:!0})),this),la("gitlens.views.browseRepoBeforeRevision",(e=>this.browseRepoAtRevision(e,{before:!0})),this),la("gitlens.views.browseRepoBeforeRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{before:!0,openInNewWindow:!0})),this),la("gitlens.views.addAuthors",this.addAuthors,this),la("gitlens.views.addAuthor",this.addAuthor,this),la("gitlens.views.openChanges",this.openChanges,this),la("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),la("gitlens.views.openPreviousChangesWithWorking",this.openPreviousChangesWithWorking,this),la("gitlens.views.openFile",this.openFile,this),la("gitlens.views.openFileRevision",this.openRevision,this),la("gitlens.views.openChangedFiles",this.openFiles,this),la("gitlens.views.openChangedFileDiffs",this.openAllChanges,this),la("gitlens.views.openChangedFileDiffsWithWorking",this.openAllChangesWithWorking,this),la("gitlens.views.openChangedFileRevisions",this.openRevisions,this),la("gitlens.views.applyChanges",this.applyChanges,this),la("gitlens.views.highlightChanges",this.highlightChanges,this),la("gitlens.views.highlightRevisionChanges",this.highlightRevisionChanges,this),la("gitlens.views.restore",this.restore,this),la("gitlens.views.switchToAnotherBranch",this.switch,this),la("gitlens.views.switchToBranch",this.switchTo,this),la("gitlens.views.switchToCommit",this.switchTo,this),la("gitlens.views.switchToTag",this.switchTo,this),la("gitlens.views.addRemote",this.addRemote,this),la("gitlens.views.pruneRemote",this.pruneRemote,this),la("gitlens.views.removeRemote",this.removeRemote,this),la("gitlens.views.stageDirectory",this.stageDirectory,this),la("gitlens.views.stageFile",this.stageFile,this),la("gitlens.views.unstageDirectory",this.unstageDirectory,this),la("gitlens.views.unstageFile",this.unstageFile,this),la("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),la("gitlens.views.compareWithHead",this.compareHeadWith,this),la("gitlens.views.compareWithUpstream",this.compareWithUpstream,this),la("gitlens.views.compareWithSelected",this.compareWithSelected,this),la("gitlens.views.selectForCompare",this.selectForCompare,this),la("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),la("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),la("gitlens.views.compareWithWorking",this.compareWorkingWith,this),la("gitlens.views.setBranchComparisonToWorking",(e=>this.setBranchComparison(e,te.DH.Working)),this),la("gitlens.views.setBranchComparisonToBranch",(e=>this.setBranchComparison(e,te.DH.Branch)),this),la("gitlens.views.cherryPick",this.cherryPick,this,2),la("gitlens.views.title.createBranch",(()=>this.createBranch())),la("gitlens.views.createBranch",this.createBranch,this),la("gitlens.views.deleteBranch",this.deleteBranch,this),la("gitlens.views.renameBranch",this.renameBranch,this),la("gitlens.views.title.applyStash",(()=>this.applyStash())),la("gitlens.views.deleteStash",this.deleteStash,this,2),la("gitlens.views.title.createTag",(()=>this.createTag())),la("gitlens.views.createTag",this.createTag,this),la("gitlens.views.deleteTag",this.deleteTag,this),la("gitlens.views.mergeBranchInto",this.merge,this),la("gitlens.views.pushToCommit",this.pushToCommit,this),la("gitlens.views.rebaseOntoBranch",this.rebase,this),la("gitlens.views.rebaseOntoUpstream",this.rebaseToRemote,this),la("gitlens.views.rebaseOntoCommit",this.rebase,this),la("gitlens.views.resetCommit",this.resetCommit,this),la("gitlens.views.resetToCommit",this.resetToCommit,this),la("gitlens.views.revert",this.revert,this),la("gitlens.views.undoCommit",this.undoCommit,this),la("gitlens.views.createPullRequest",this.createPullRequest,this),la("gitlens.views.openPullRequest",this.openPullRequest,this),la("gitlens.views.title.createWorktree",(()=>this.createWorktree())),la("gitlens.views.createWorktree",this.createWorktree,this),la("gitlens.views.deleteWorktree",this.deleteWorktree,this),la("gitlens.views.openWorktree",this.openWorktree,this),la("gitlens.views.revealWorktreeInExplorer",this.revealWorktreeInExplorer,this),la("gitlens.views.openWorktreeInNewWindow",(e=>this.openWorktree(e,{location:Pi.Tc.NewWindow})),this)}addAuthors(e){return Bs((0,$i.pp)(e))}addAuthor(e){return e instanceof Qo?Bs(e.repoPath,e.contributor.current?void 0:e.contributor):Promise.resolve()}addRemote(e){return Ms((0,$i.pp)(e))}applyChanges(e){return e instanceof $i.RW?e instanceof ResultsFileNode?ys(e.file,(0,u.xB)(e.ref1,e.repoPath),(0,u.xB)(e.ref2,e.repoPath)):null==e.ref||"HEAD"===e.ref.ref?Promise.resolve():ys(e.file,e.ref):Promise.resolve()}applyStash(){return zs()}browseRepoAtRevision(e,t){return e instanceof $i.bT?Fi(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){return e instanceof Ao?null!=t&&0!==t.length?Ls(e.repoPath,t.map((e=>e.ref))):Ls(e.repoPath,e.ref):Promise.resolve()}closeRepository(e){(e instanceof al||e instanceof $i.vb)&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof $i.bT?e?.ref:e instanceof Ro?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return gs(e?.repoPath,t)}async createPullRequest(e){if(!(e instanceof ba||e instanceof Ro))return Promise.resolve();const t=await e.branch.getRemote();return(0,ki.SI)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof $i.bT?e?.ref:e instanceof Ro?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return er(e?.repoPath,t)}async createWorktree(e){if(e instanceof ra&&(e=void 0),null==e||e instanceof ba)return sr(e?.repoPath,void 0,e?.ref)}deleteBranch(e){return e instanceof ba?fs(e.repoPath,e.branch):Promise.resolve()}deleteStash(e,t){if(!(e instanceof Yo))return Promise.resolve();if(null!=t&&0!==t.length){const e=t.sort(((e,t)=>parseInt(t.commit.number,10)-parseInt(e.commit.number,10)));return(0,Lt.df)(Ks,e.map((e=>[e.repoPath,e.commit])),this)}return Ks(e.repoPath,e.commit)}deleteTag(e){return e instanceof oo?tr(e.repoPath,e.tag):Promise.resolve()}async deleteWorktree(e){var t,i;if(e instanceof ea)return t=e.repoPath,i=e.worktree.uri,Ri({command:"worktree",state:{subcommand:"delete",repo:t,uris:(0,y.zx)(i)}})}fetch(e){return e instanceof al||e instanceof $i.vb?Us(e.repo):e instanceof vn?async function(e,t){if("string"==typeof e){const t=gv.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}(e.remote.repoPath,e.remote.name):e instanceof ba||e instanceof Ro?Us(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){(e instanceof fo||e instanceof StashFileNode||e instanceof FileRevisionAsCommitNode||e instanceof ResultsFileNode)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(s.window.activeTextEditor,te.VP.Changes,{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){(e instanceof fo||e instanceof StashFileNode||e instanceof FileRevisionAsCommitNode||e instanceof ResultsFileNode)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(s.window.activeTextEditor,te.VP.Changes,{sha:e.ref.ref,only:!0},!0))}merge(e){return e instanceof ba||e instanceof oo?Ns(e.repoPath,e instanceof ba?e.branch:e.tag):Promise.resolve()}openInTerminal(e){return e instanceof al||e instanceof $i.vb?(0,ki.dO)(c.nA.OpenInTerminal,s.Uri.file(e.repo.path)):Promise.resolve()}openPullRequest(e){return e instanceof vo?(0,ki.SI)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}openWorktree(e,t){if(e instanceof ea)return(0,Pi.ic)(e.worktree.uri,t)}pruneRemote(e){return e instanceof vn?async function(e,t){return Ri({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}(e.repo,e.remote.name):Promise.resolve()}async removeRemote(e){return e instanceof vn?async function(e,t){return Ri({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}(e.repo,e.remote.name):Promise.resolve()}publishBranch(e){return e instanceof ba||e instanceof Ro?Hs(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e instanceof ba||e instanceof Ro?(0,ki.Zv)(c.S8.Publish,s.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e instanceof al||e instanceof $i.vb?Gs(e.repo):e instanceof ba||e instanceof Ro?Gs(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e instanceof al||e instanceof $i.vb?Hs(e.repo,t):e instanceof ba||e instanceof Ro?Hs(e.repoPath,t,e.root?void 0:e.branch):e instanceof Ao||e instanceof FileRevisionAsCommitNode?e.isTip?Hs(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e instanceof Ao||e instanceof FileRevisionAsCommitNode?Hs(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e instanceof ba||e instanceof Ao||e instanceof FileRevisionAsCommitNode||e instanceof oo?Vs(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!(e instanceof ba||e instanceof Ro))return Promise.resolve();const t=e instanceof ba?e.branch.upstream?.name:e.status.upstream;return null==t?Promise.resolve():Vs(e.repoPath,(0,u.xB)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e instanceof ba?ws(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e instanceof Ao||e instanceof FileRevisionAsCommitNode?Qs(e.repoPath,(0,u.xB)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e instanceof Ao||e instanceof FileRevisionAsCommitNode?Qs(e.repoPath,e.ref):Promise.resolve()}restore(e){return e instanceof $i.RW?xs(e.file,e.ref):Promise.resolve()}revealWorktreeInExplorer(e){if(e instanceof ea)return nr(e.worktree)}revert(e){return e instanceof Ao||e instanceof FileRevisionAsCommitNode?qs(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e instanceof vn?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e instanceof Uo)return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return r.D.updateEffective("views.showRelativeDateMarkers",e)}async stageFile(e){(e instanceof fo||e instanceof FileRevisionAsCommitNode||e instanceof StatusFileNode)&&(await this.container.git.stageFile(e.repoPath,e.file.path),e.triggerChange())}async stageDirectory(e){e instanceof Rn&&e.relativePath&&(await this.container.git.stageDirectory(e.repoPath,e.relativePath),e.triggerChange())}star(e){return e instanceof ba||e instanceof al||e instanceof $i.vb?e.star():Promise.resolve()}switch(e){return Ys((0,$i.pp)(e))}switchTo(e){return e instanceof $i.bT?Ys(e.repoPath,e instanceof ba&&e.branch.current?void 0:e.ref):Ys((0,$i.pp)(e))}async undoCommit(e){if(!(e instanceof Ao||e instanceof FileRevisionAsCommitNode))return;const t=await this.container.git.getOrOpenScmRepository(e.repoPath),i=await(t?.getCommit("HEAD"));i?.hash===e.ref.ref?await(0,ki.Zv)(c.S8.UndoCommit,e.repoPath):s.window.showWarningMessage(`Commit ${(0,u.Wh)(e.ref,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`)}unsetAsDefault(e){return e instanceof vn?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){(e instanceof fo||e instanceof FileRevisionAsCommitNode||e instanceof StatusFileNode)&&(await this.container.git.unStageFile(e.repoPath,e.file.path),e.triggerChange())}async unstageDirectory(e){e instanceof Rn&&e.relativePath&&(await this.container.git.unStageDirectory(e.repoPath,e.relativePath),e.triggerChange())}unstar(e){return e instanceof ba||e instanceof al||e instanceof $i.vb?e.unstar():Promise.resolve()}compareHeadWith(e){return e instanceof $i.bT?this.container.searchAndCompareView.compare(e.repoPath,"HEAD",e.ref):Promise.resolve()}compareWithUpstream(e){return e instanceof ba?null==e.branch.upstream?Promise.resolve():this.container.searchAndCompareView.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof $i.bT?this.container.searchAndCompareView.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!(e instanceof ba))return;const t=await this.container.git.getBranch(e.repoPath);if(null==t)return;const i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);return null!=i?this.container.searchAndCompareView.compare(e.repoPath,{ref:i,label:`ancestry with ${e.ref.ref} (${(0,u.zL)(i)})`},""):void 0}compareWithSelected(e){e instanceof $i.bT&&this.container.searchAndCompareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){e instanceof $i.bT&&this.container.searchAndCompareView.selectForCompare(e.repoPath,e.ref)}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof $i.RW)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();const t=this._selectedFile;return this._selectedFile=void 0,(0,Ci.v)(c.zf.ViewsCanCompareFile,!1),(0,ki.P0)(c.Gh.DiffWith,{repoPath:t.repoPath,lhs:{sha:t.ref,uri:t.uri},rhs:{sha:e.ref.ref,uri:e.uri}})}selectFileForCompare(e){e instanceof $i.RW&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,Ci.v)(c.zf.ViewsCanCompareFile,!0))}async openAllChanges(e,t){if(e instanceof Ao||e instanceof Yo||e instanceof ResultsFilesNode){if(e instanceof ResultsFilesNode){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return Cs(i,{repoPath:e.repoPath,ref1:e.ref1,ref2:e.ref2},t)}return Cs(e.commit,t)}}openChanges(e){if(!(e instanceof $i.RW||e instanceof MergeConflictFileNode||e instanceof StatusFileNode))return;if(e instanceof MergeConflictFileNode)return void(0,ki.P0)(c.Gh.DiffWith,{lhs:{sha:e.status.HEAD.ref,uri:st.YY.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:st.YY.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});const t=e.getCommand();if(null!=t?.arguments)switch(t.command){case c.Gh.DiffWith:{const[e]=t.arguments;e.showOptions.preview=!1,(0,ki.P0)(t.command,e);break}case c.Gh.DiffWithPrevious:{const[,e]=t.arguments;e.showOptions.preview=!1,(0,ki.b2)(t.command,void 0,e);break}default:throw new Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t){if(e instanceof Ao||e instanceof Yo||e instanceof ResultsFilesNode){if(e instanceof ResultsFilesNode){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return As(i,{repoPath:e.repoPath,ref:e.ref1||e.ref2},t)}return As(e.commit,t)}}async openChangesWithWorking(e){if(!(e instanceof $i.RW||e instanceof MergeConflictFileNode||e instanceof StatusFileNode))return Promise.resolve();if(e instanceof StatusFileNode)return(0,ki.b2)(c.Gh.DiffWithWorking,void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof MergeConflictFileNode)return(0,ki.b2)(c.Gh.DiffWithWorking,void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof FileRevisionAsCommitNode&&e.commit.file?.hasConflicts){const t=await e.getConflictBaseUri();if(null!=t)return(0,ki.b2)(c.Gh.DiffWithWorking,void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return Ss(e.file,{repoPath:e.repoPath,ref:e.ref.ref})}async openPreviousChangesWithWorking(e){return e instanceof $i.RW?Ss(e.file,{repoPath:e.repoPath,ref:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof $i.RW||e instanceof MergeConflictFileNode||e instanceof StatusFileNode||e instanceof Hn||e instanceof Jn?Rs(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e instanceof Ao||e instanceof Yo||e instanceof ResultsFilesNode){if(e instanceof ResultsFilesNode){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return $s(t,e.repoPath,e.ref1||e.ref2)}return $s(e.commit)}}async openRevision(e,t){if(!(e instanceof fo||e instanceof FileRevisionAsCommitNode||e instanceof ResultsFileNode||e instanceof StashFileNode||e instanceof MergeConflictFileNode||e instanceof StatusFileNode))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e instanceof ResultsFileNode||e instanceof MergeConflictFileNode?this.container.git.getRevisionUri(e.uri):"D"===e.commit.file?.status?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??P.Ii,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),Fs(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e instanceof Ao||e instanceof Yo||e instanceof ResultsFilesNode){if(e instanceof ResultsFilesNode){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return Ts(t,e.repoPath,e.ref1,e.ref2)}return Ts(e.commit)}}}aa([(0,d.fF)()],ViewCommands.prototype,"addAuthors",1),aa([(0,d.fF)()],ViewCommands.prototype,"addAuthor",1),aa([(0,d.fF)()],ViewCommands.prototype,"addRemote",1),aa([(0,d.fF)()],ViewCommands.prototype,"applyChanges",1),aa([(0,d.fF)()],ViewCommands.prototype,"applyStash",1),aa([(0,d.fF)()],ViewCommands.prototype,"browseRepoAtRevision",1),aa([(0,d.fF)()],ViewCommands.prototype,"cherryPick",1),aa([(0,d.fF)()],ViewCommands.prototype,"closeRepository",1),aa([(0,d.fF)()],ViewCommands.prototype,"createBranch",1),aa([(0,d.fF)()],ViewCommands.prototype,"createPullRequest",1),aa([(0,d.fF)()],ViewCommands.prototype,"createTag",1),aa([(0,d.fF)()],ViewCommands.prototype,"createWorktree",1),aa([(0,d.fF)()],ViewCommands.prototype,"deleteBranch",1),aa([(0,d.fF)()],ViewCommands.prototype,"deleteStash",1),aa([(0,d.fF)()],ViewCommands.prototype,"deleteTag",1),aa([(0,d.fF)()],ViewCommands.prototype,"deleteWorktree",1),aa([(0,d.fF)()],ViewCommands.prototype,"fetch",1),aa([(0,d.fF)()],ViewCommands.prototype,"highlightChanges",1),aa([(0,d.fF)()],ViewCommands.prototype,"highlightRevisionChanges",1),aa([(0,d.fF)()],ViewCommands.prototype,"merge",1),aa([(0,d.fF)()],ViewCommands.prototype,"openInTerminal",1),aa([(0,d.fF)()],ViewCommands.prototype,"openPullRequest",1),aa([(0,d.fF)()],ViewCommands.prototype,"openWorktree",1),aa([(0,d.fF)()],ViewCommands.prototype,"pruneRemote",1),aa([(0,d.fF)()],ViewCommands.prototype,"removeRemote",1),aa([(0,d.fF)()],ViewCommands.prototype,"publishBranch",1),aa([(0,d.fF)()],ViewCommands.prototype,"publishRepository",1),aa([(0,d.fF)()],ViewCommands.prototype,"pull",1),aa([(0,d.fF)()],ViewCommands.prototype,"push",1),aa([(0,d.fF)()],ViewCommands.prototype,"pushToCommit",1),aa([(0,d.fF)()],ViewCommands.prototype,"rebase",1),aa([(0,d.fF)()],ViewCommands.prototype,"rebaseToRemote",1),aa([(0,d.fF)()],ViewCommands.prototype,"renameBranch",1),aa([(0,d.fF)()],ViewCommands.prototype,"resetCommit",1),aa([(0,d.fF)()],ViewCommands.prototype,"resetToCommit",1),aa([(0,d.fF)()],ViewCommands.prototype,"restore",1),aa([(0,d.fF)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),aa([(0,d.fF)()],ViewCommands.prototype,"revert",1),aa([(0,d.fF)()],ViewCommands.prototype,"setAsDefault",1),aa([(0,d.fF)()],ViewCommands.prototype,"setBranchComparison",1),aa([(0,d.fF)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),aa([(0,d.fF)()],ViewCommands.prototype,"stageFile",1),aa([(0,d.fF)()],ViewCommands.prototype,"stageDirectory",1),aa([(0,d.fF)()],ViewCommands.prototype,"star",1),aa([(0,d.fF)()],ViewCommands.prototype,"switch",1),aa([(0,d.fF)()],ViewCommands.prototype,"switchTo",1),aa([(0,d.fF)()],ViewCommands.prototype,"undoCommit",1),aa([(0,d.fF)()],ViewCommands.prototype,"unsetAsDefault",1),aa([(0,d.fF)()],ViewCommands.prototype,"unstageFile",1),aa([(0,d.fF)()],ViewCommands.prototype,"unstageDirectory",1),aa([(0,d.fF)()],ViewCommands.prototype,"unstar",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareHeadWith",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareWithUpstream",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareWorkingWith",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareAncestryWithWorking",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareWithSelected",1),aa([(0,d.fF)()],ViewCommands.prototype,"selectForCompare",1),aa([(0,d.fF)()],ViewCommands.prototype,"compareFileWithSelected",1),aa([(0,d.fF)()],ViewCommands.prototype,"selectFileForCompare",1),aa([(0,d.fF)()],ViewCommands.prototype,"openAllChanges",1),aa([(0,d.fF)()],ViewCommands.prototype,"openChanges",1),aa([(0,d.fF)()],ViewCommands.prototype,"openAllChangesWithWorking",1),aa([(0,d.fF)()],ViewCommands.prototype,"openChangesWithWorking",1),aa([(0,d.fF)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),aa([(0,d.fF)()],ViewCommands.prototype,"openFile",1),aa([(0,d.fF)()],ViewCommands.prototype,"openFiles",1),aa([(0,d.fF)()],ViewCommands.prototype,"openRevision",1),aa([(0,d.fF)()],ViewCommands.prototype,"openRevisions",1);var ca=Object.defineProperty,ha=Object.getOwnPropertyDescriptor,ua=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?ha(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ca(t,i,n),n};class RemotesRepositoryNode extends $i.vb{async getChildren(){return null==this.child&&(this.child=new An(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(lt.I6.Config,lt.I6.Remotes,lt.I6.RemoteProviders,lt.I6.Unknown,lt.du.Any)}}class RemotesViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No remotes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new RemotesRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",this.view.title="Remotes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Remotes (${t.length})`,e.getChildren())}return this.view.title="Remotes",this.children}getTreeItem(){return new s.TreeItem("Remotes",s.TreeItemCollapsibleState.Expanded)}}class RemotesView extends ViewBase{constructor(e){super(e,"gitlens.views.remotes","Remotes","remotesView"),this.configKey="remotes"}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showRemotes")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0))),this),la(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout(te.CZ.List)),this),la(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout(te.CZ.Tree)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"integrations.enabled")||r.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(!e.remote)return;const i=al.getId(e.repoPath);return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.id.startsWith(i):t instanceof vn&&(!!t.id.startsWith(i)&&t.remote.name===(0,p.Lo)(e.name))),token:t})}async findCommit(e,t){const i=al.getId(e.repoPath),s=await this.container.git.getCommitBranches(e.repoPath,e.ref,(0,A.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===s.length)return;const r=s.map((e=>e.split("/",1)[0]));return this.findNode((t=>void 0!==t.commit&&t.commit.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.id.startsWith(i):e instanceof vn?e.id.startsWith(i)&&r.includes(e.remote.name):e instanceof ba?e.id.startsWith(i)&&s.includes(e.branch.name):(e instanceof al||e instanceof An||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i)),token:t})}findRemote(e,t){const i=al.getId(e.repoPath);return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.id.startsWith(i),token:t})}revealBranch(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findBranch(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealCommit(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findCommit(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}revealRemote(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findRemote(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return r.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await r.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await r.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}ua([(0,Wt.H)((()=>""))],RemotesView.prototype,"revealBranch",1),ua([(0,Wt.H)((()=>""))],RemotesView.prototype,"revealCommit",1),ua([(0,Wt.H)((()=>""))],RemotesView.prototype,"revealRemote",1),ua([(0,Wt.H)((()=>""))],RemotesView.prototype,"revealRepository",1);const da=class extends $i.Re{constructor(e,t,i,s,r,n){super(st.YY.fromRepoPath(s.repoPath),e,t),this.branch=i,this.mergeStatus=s,this.status=r,this.root=n}static getId(e,t,i){return`${ba.getId(e,t,i)}${this.key}`}get id(){return da.getId(this.mergeStatus.repoPath,this.mergeStatus.current.name,this.root)}get repoPath(){return this.uri.repoPath}getChildren(){if(!0!==this.status?.hasConflicts)return[];let e=this.status.conflicts.map((e=>new MergeConflictFileNode(this.view,this,e,this.mergeStatus)));if(this.view.config.files.layout!==te.Vc.List){const t=(0,y.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);e=new Rn(this.view,this,this.repoPath,"",t).getChildren()}else e.sort(((e,t)=>(0,C.dm)(e.label,t.label)));return e}getTreeItem(){const e=new s.TreeItem(`${this.status?.hasConflicts?"Resolve conflicts before merging":"Merging"} ${null!=this.mergeStatus.incoming?`${(0,u.Wh)(this.mergeStatus.incoming,{expand:!1,icon:!1})} `:""}into ${(0,u.Wh)(this.mergeStatus.current,{expand:!1,icon:!1})}`,s.TreeItemCollapsibleState.Expanded);e.id=this.id,e.contextValue=$i.Td.Merge,e.description=this.status?.hasConflicts?(0,C._6)("conflict",this.status.conflicts.length):void 0,e.iconPath=this.status?.hasConflicts?new s.ThemeIcon("warning",new s.ThemeColor("list.warningForeground")):new s.ThemeIcon("debug-pause",new s.ThemeColor("list.foreground"));const t=new s.MarkdownString(`Merging ${null!=this.mergeStatus.incoming?(0,u.Wh)(this.mergeStatus.incoming):""}into ${(0,u.Wh)(this.mergeStatus.current)}${this.status?.hasConflicts?`\n\n${(0,C._6)("conflicted file",this.status.conflicts.length)}`:""}`,!0);return t.supportHtml=!0,t.isTrusted=!0,e.tooltip=t,e}};let pa=da;pa.key=":merge";const ma=class extends $i.Re{constructor(e,t,i,s,r,n){super(st.YY.fromRepoPath(s.repoPath),e,t),this.branch=i,this.rebaseStatus=s,this.status=r,this.root=n}static getId(e,t,i){return`${ba.getId(e,t,i)}${this.key}`}get id(){return ma.getId(this.rebaseStatus.repoPath,this.rebaseStatus.incoming.name,this.root)}get repoPath(){return this.uri.repoPath}async getChildren(){let e=this.status?.conflicts.map((e=>new MergeConflictFileNode(this.view,this,e,this.rebaseStatus)))??[];if(this.view.config.files.layout!==te.Vc.List){const t=(0,y.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);e=new Rn(this.view,this,this.repoPath,"",t).getChildren()}else e.sort(((e,t)=>(0,C.dm)(e.label,t.label)));const t=await this.view.container.git.getCommit(this.rebaseStatus.repoPath,this.rebaseStatus.steps.current.commit.ref);return null!=t&&e.splice(0,0,new RebaseCommitNode(this.view,this,t)),e}getTreeItem(){const e=new s.TreeItem(`${this.status?.hasConflicts?"Resolve conflicts to continue rebasing":"Rebasing"} ${null!=this.rebaseStatus.incoming?`${(0,u.Wh)(this.rebaseStatus.incoming,{expand:!1,icon:!1})}`:""} (${this.rebaseStatus.steps.current.number}/${this.rebaseStatus.steps.total})`,s.TreeItemCollapsibleState.Expanded);e.id=this.id,e.contextValue=$i.Td.Rebase,e.description=this.status?.hasConflicts?(0,C._6)("conflict",this.status.conflicts.length):void 0,e.iconPath=this.status?.hasConflicts?new s.ThemeIcon("warning",new s.ThemeColor("list.warningForeground")):new s.ThemeIcon("debug-pause",new s.ThemeColor("list.foreground"));const t=new s.MarkdownString(`Rebasing ${null!=this.rebaseStatus.incoming?(0,u.Wh)(this.rebaseStatus.incoming):""}onto ${(0,u.Wh)(this.rebaseStatus.current)}\n\nStep ${this.rebaseStatus.steps.current.number} of ${this.rebaseStatus.steps.total}\\\nPaused at ${(0,u.Wh)(this.rebaseStatus.steps.current.commit,{icon:!0})}${this.status?.hasConflicts?`\n\n${(0,C._6)("conflicted file",this.status.conflicts.length)}`:""}`,!0);return t.supportHtml=!0,t.isTrusted=!0,e.tooltip=t,e}async openEditor(){const e=s.Uri.joinPath(this.uri,".git","rebase-merge","git-rebase-todo");await(0,ki.dO)(c.nA.OpenWith,e,"gitlens.rebase",{preview:!1})}};let ga=ma;ga.key=":rebase";class RebaseCommitNode extends $i.bT{constructor(e,t,i){super(i.getGitUri(),e,t),this.commit=i}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get ref(){return this.commit}async getChildren(){const e=this.commit;let t=(await e.getCommitsForFiles()).map((e=>new fo(this.view,this,e.file,e)));if(this.view.config.files.layout!==te.Vc.List){const e=(0,y.Mo)(t,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);t=new Rn(this.view,this,this.repoPath,"",e).getChildren()}else t.sort(((e,t)=>(0,C.dm)(e.label,t.label)));return t}getTreeItem(){const e=new s.TreeItem(`Paused at commit ${this.commit.shortSha}`,s.TreeItemCollapsibleState.Collapsed);return e.description=CommitFormatter.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new s.ThemeIcon("git-commit"),e}getCommand(){const e={commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:c.Gh.DiffWithPrevious,arguments:[void 0,e]}}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getTooltip(){const e=await this.view.container.git.getRemotesWithProviders(this.commit.repoPath),t=await this.view.container.git.getBestRemoteWithRichProvider(e);let i,n;if(null==this.commit.message&&await this.commit.ensureFullDetails(),null!=t?.provider){const[e,s]=await Promise.allSettled([this.view.container.autolinks.getLinkedIssuesAndPullRequests(this.commit.message??this.commit.summary,t),this.commit.getAssociatedPullRequest({remote:t})]);i=(0,Nt.Sb)(e),n=(0,Nt.Sb)(s),null!=n&&i?.delete(n.id)}const o=await CommitFormatter.fromTemplateAsync(`Rebase paused at ${this.view.config.formats.commits.tooltip}`,this.commit,{autolinkedIssuesOrPullRequests:i,dateFormat:r.D.get("defaultDateFormat"),messageAutolinks:!0,messageIndent:4,pullRequestOrRemote:n,outputFormat:"markdown",remotes:e}),a=new s.MarkdownString(o,!0);return a.supportHtml=!0,a.isTrusted=!0,a}}var fa=Object.defineProperty,wa=Object.getOwnPropertyDescriptor,va=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?wa(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&fa(t,i,n),n};const ya=class extends $i.bT{constructor(e,t,i,s,r,n){super(e,t,i),this.branch=s,this.root=r,this.splatted=!0,this.compacted=!1,this.limit=this.view.getNodeLastKnownLimit(this),this.options={expanded:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showCurrent:!this.root,showStatus:!0,showTracking:!this.root,...n}}static getId(e,t,i){return`${al.getId(e)}${this.key}(${t})${i?":root":""}`}toClipboard(){return this.branch.name}get id(){return ya.getId(this.branch.repoPath,this.branch.name,this.root)}get current(){return this.branch.current}get label(){if(this.options.showAsCommits)return"Commits";const e=this.branch.getNameWithoutRemote();return`${this.view.config.branches?.layout!==te.CZ.Tree||this.compacted||this.root||this.current||this.branch.detached||this.branch.starred?e:this.branch.getBasename()}${this.branch.rebasing?" (Rebasing)":""}`}get ref(){return this.branch}get treeHierarchy(){return this.root||this.current||this.branch.detached||this.branch.starred?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}async getChildren(){if(null==this._children){const e=this.branch;let t,i;if(this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,Ci.fw)(c.zf.HasConnectedRemotes)&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,Nt.PQ)();const i=this.getAssociatedPullRequest(e,this.root?{include:[mn.o0.Open,mn.o0.Merged]}:void 0);queueMicrotask((async()=>{await(t?.promise);let s=!1;const r=setTimeout((()=>{s=!0,this.view.triggerNodeChange(this)}),250),n=await i;clearTimeout(r),null!=n&&null!=this._children&&this._children.splice(this._children[0]instanceof Uo?1:0,0,new vo(this.view,this,n,e)),(s||null!=n)&&this.view.triggerNodeChange(this.root?this.parent??this:this)}))}const[s,r,n,o,a,l]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,e.name),this.options.showStatus&&e.current?this.view.container.git.getStatusForRepo(this.uri.repoPath):void 0,this.options.showStatus&&e.current?this.view.container.git.getMergeStatus(this.uri.repoPath):void 0,this.options.showStatus?this.view.container.git.getRebaseStatus(this.uri.repoPath):void 0,e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),h=(0,Nt.Sb)(s);if(null==h)return[new MessageNode(this.view,this,"No commits could be found.")];const u=[];!1===this.options.showComparison||this.view instanceof RemotesView||u.push(new Uo(this.uri,this.view,this,e,this.options.showComparison,this.splatted)),null!=i&&u.push(new vo(this.view,this,i,e));const d=(0,Nt.Sb)(n),p=(0,Nt.Sb)(o),m=(0,Nt.Sb)(a);if(this.options.showStatus&&null!=p)u.push(new pa(this.view,this,e,p,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showStatus&&null!=m&&(e.current||e.name===m.incoming.name))u.push(new ga(this.view,this,e,m,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showTracking){const t={ref:e.ref,repoPath:e.repoPath,state:e.state,upstream:e.upstream?.name};null!=e.upstream?!this.root||t.state.behind||t.state.ahead?(t.state.behind&&u.push(new Ro(this.view,this,e,t,"behind",this.root)),t.state.ahead&&u.push(new Ro(this.view,this,e,t,"ahead",this.root))):u.push(new Ro(this.view,this,e,t,"same",this.root)):u.push(new Ro(this.view,this,e,t,"none",this.root))}0!==u.length&&u.push(new MessageNode(this.view,this,"",c.NE.Dash.repeat(2),""));const g=(0,Nt.Sb)(l),f=(0,Nt.Sb)(r);u.push(...Wn((0,ye.UI)(h.commits.values(),(t=>new Ao(this.view,this,t,g?.has(t.ref),e,f))),this)),h.hasMore&&u.push(new LoadMoreNode(this.view,this,u[u.length-1],{getCount:()=>this.view.container.git.getCommitCount(e.repoPath,e.name)})),this._children=u,setTimeout((()=>t?.fulfill()),1)}return this._children}async getTreeItem(){this.splatted=!1;let e,t,i=`${this.current?"Current branch":"Branch"} $(git-branch) ${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}`,r=$i.Td.Branch;this.current&&(r+="+current"),this.branch.remote&&(r+="+remote"),this.branch.starred&&(r+="+starred"),null==this.branch.upstream||this.branch.upstream.missing||(r+="+tracking"),this.options.showAsCommits&&(r+="+commits");let n="";if(!this.branch.remote)if(null!=this.branch.upstream){let o=c.NE.Dash;const a=await this.branch.getRemote();if(this.branch.upstream.missing)o=c.NE.Warning;else if(null!=a){let e,t;for(const{type:i}of a.urls)if(i===ot.XG.Fetch){if(e=!0,t)break}else if(i===ot.XG.Push&&(t=!0,e))break;e&&t?o=c.NE.ArrowsRightLeft:t?o=c.NE.ArrowRight:e&&(o=c.NE.ArrowLeft)}t=this.options.showAsCommits?`${this.branch.getTrackingStatus({suffix:(0,C.vk)(c.NE.Dot,1,1)})}${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}${(0,C.vk)(o,2,2)}${this.branch.upstream.name}`:`${this.branch.getTrackingStatus({suffix:`${c.NE.Space} `})}${o}${c.NE.Space} ${this.branch.upstream.name}`,i+=` is ${this.branch.getTrackingStatus({empty:this.branch.upstream.missing?`missing upstream $(git-branch) ${this.branch.upstream.name}`:`up to date with $(git-branch)  ${this.branch.upstream.name}${a?.provider?.name?` on ${a.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${this.branch.upstream.name}${a?.provider?.name?` on ${a.provider.name}`:""}`})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.ahead&&(r+="+ahead",e=new s.ThemeColor(c.wL.UnpublishedChangesIconColor),n="-green"),this.branch.state.behind&&(r+="+behind",e=new s.ThemeColor(c.wL.UnpulledChangesIconColor),n=this.branch.state.ahead?"-yellow":"-red"))}else{const e=ot.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(this.branch.repoPath));i+=` hasn't been published to ${(e?.length?e[0].name:void 0)??"a remote"}`}null!=this.branch.date&&(t=`${t?`${t}${(0,C.vk)(c.NE.Dot,2,2)}`:""}${this.branch.formattedDate}`,i+=`\n\nLast commit ${this.branch.formatDateFromNow()} (${this.branch.formatDate(this.view.container.BranchDateFormatting.dateFormat)})`),i=new s.MarkdownString(i,!0),i.supportHtml=!0,i.isTrusted=!0,this.branch.starred&&i.appendMarkdown("\\\n$(star-full) Favorited");const o=this.getState("pendingPullRequest");null!=o&&i.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${c.NE.Ellipsis}`);const a=new s.TreeItem(this.label,this.options.expanded?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);return a.id=this.id,a.contextValue=r,a.description=t,a.iconPath=null!=o?new s.ThemeIcon("loading~spin"):this.options.showAsCommits?new s.ThemeIcon("git-commit",e):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-branch${n}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-branch${n}.svg`)},a.tooltip=i,a.resourceUri=s.Uri.parse(`gitlens-view://branch/status/${await this.branch.getStatus()}${this.options.showCurrent&&this.current?"/current":""}`),a}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let s=this.getState("pendingPullRequest");return s??(s=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",s),i=await s,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit);0!==e&&this.branch.state.ahead>e&&(e=Math.min(this.branch.state.ahead+1,2*e)),this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:e,ref:this.ref.ref,authors:this.options?.authors})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}};let ba=ya;function Ca(e,t){let i,s=!1;return"boolean"==typeof e?s=e:i=e,(e,r,n)=>{let o;if("function"==typeof n.value&&(o=n.value),null==o)throw new Error("Not supported");n.value=function(...e){if(s){const s=e[e.length-1];i=null!=s&&"number"==typeof s?s:t}const r=o?.apply(this,e);return null==i||i<1||!(0,Nt.tI)(r)?r:(0,Nt.HO)(r,i,{onDidCancel:e=>e(void 0)})}}}ba.key=":branch",va([(0,d.cM)()],ba.prototype,"star",1),va([(0,d.cM)()],ba.prototype,"unstar",1),va([(0,Wt.H)(),(0,d.fF)()],ba.prototype,"refresh",1),va([(0,Wt.H)()],ba.prototype,"loadMore",1);var Aa=Object.defineProperty,Pa=Object.getOwnPropertyDescriptor,Da=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Pa(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Aa(t,i,n),n};const Sa=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s,this.splatted=!0}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return Sa.getId(this.repo.path)}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){const e=r.D.get("views.contributors.showAllBranches");let t;if(!e)try{const e=await this.view.container.git.getBranch(this.uri.repoPath);null==e?.upstream?.name||e.upstream.missing||(t="@{u}")}catch{}const i=r.D.get("views.contributors.showStatistics"),s=await this.repo.getContributors({all:e,ref:t,stats:i});if(0===s.length)return[new MessageNode(this.view,this,"No contributors could be found.")];rt.V.sort(s);const n=await this.maybeGetPresenceMap(s);this._children=s.map((i=>new Qo(this.uri,this.view,this,i,{all:e,ref:t,presence:n})))}return this._children}getTreeItem(){this.splatted=!1;const e=new s.TreeItem("Contributors",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Contributors,e.iconPath=new s.ThemeIcon("organization"),e}updateAvatar(e){if(null!=this._children)for(const t of this._children)t.contributor.email===e&&t.triggerChange()}refresh(){this._children=void 0}async maybeGetPresenceMap(e){const t=e.find((e=>e.current))?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}};let ka=Sa;ka.key=":contributors",Da([(0,Wt.H)(),(0,d.fF)()],ka.prototype,"refresh",1),Da([(0,d.fF)({args:!1}),Ca(250)],ka.prototype,"maybeGetPresenceMap",1);var Ra=Object.defineProperty,Fa=Object.getOwnPropertyDescriptor,$a=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Fa(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ra(t,i,n),n};const Ta=class extends $i.Re{constructor(e,t,i){super(st.YY.fromRepoPath(i.repoPath),e,t),this.record=i,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e,t,i,s,r,n){return`${al.getId(e)}${this.key}(${t}|${i}|${s}|${r??""}|${n.getTime()})`}get id(){return Ta.getId(this.uri.repoPath,this.record.sha,this.record.selector,this.record.command,this.record.commandArgs,this.record.date)}async getChildren(){const e=await this.getLog();if(void 0===e)return[new MessageNode(this.view,this,"No commits could be found.")];const t=[...(0,ye.UI)(e.commits.values(),(e=>new Ao(this.view,this,e)))];return e.hasMore&&t.push(new LoadMoreNode(this.view,this,t[t.length-1])),t}getTreeItem(){const e=new s.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${c.NE.Space}${c.NE.Dot}${c.NE.Space} `}${this.record.formattedDate}`,e.contextValue=$i.Td.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}\n`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}\n${this.record.formatDateFromNow()} (${this.record.formatDate()})\n${this.record.previousShortSha} ${c.NE.Space}${c.NE.ArrowRight}${c.NE.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}async getLog(){if(void 0===this._log){const e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await s.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};let xa=Ta;xa.key=":reflog-record",$a([(0,Wt.H)(),(0,d.fF)()],xa.prototype,"refresh",1),$a([(0,Wt.H)()],xa.prototype,"loadMore",1);var Ia=Object.defineProperty,_a=Object.getOwnPropertyDescriptor;const Oa=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s,this.limit=this.view.getNodeLastKnownLimit(this)}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return Oa.getId(this.repo.path)}async getChildren(){if(void 0===this._children){const e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new MessageNode(this.view,this,"No activity could be found.")];e.push(...t.records.map((e=>new xa(this.view,this,e)))),t.hasMore&&e.push(new LoadMoreNode(this.view,this,e[e.length-1])),this._children=e}return this._children}getTreeItem(){const e=new s.TreeItem("Incoming Activity",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){this._children=void 0,e&&(this._reflog=void 0)}async getReflog(){return void 0===this._reflog&&(this._reflog=await this.view.container.git.getIncomingActivity(this.repo.path,{all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}};let Ba=Oa;Ba.key=":reflog",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?_a(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Ia(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],Ba.prototype,"refresh",1);var Ea=Object.defineProperty,Ma=Object.getOwnPropertyDescriptor,Wa=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ma(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ea(t,i,n),n};class RepositoriesNode extends $i.CF{constructor(e){super(st.Wj,e)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this._children){for(const e of this._children)e instanceof al&&e.dispose();this._children=void 0}}getChildren(){if(null==this._children){const e=this.view.container.git.openRepositories;if(0===e.length)return[new MessageNode(this.view,this,"No repositories could be found.")];this._children=e.map((e=>new al(st.YY.fromRepoPath(e.path),this.view,this,e)))}return this._children}getTreeItem(){const e=new s.TreeItem("Repositories",s.TreeItemCollapsibleState.Expanded);return e.contextValue=$i.Td.Repositories,e}async refresh(e=!1){if(null==this._children)return;if(e)return this.resetChildren(),await this.unsubscribe(),void this.ensureSubscription();const t=this.view.container.git.openRepositories;if(0===t.length&&(null==this._children||0===this._children.length))return;if(0===t.length)return void(this._children=[new MessageNode(this.view,this,"No repositories could be found.")]);const i=[];for(const e of t){const t=e.id,s=this._children.find((e=>e.repo.id===t));null!=s?(i.push(s),s.refresh()):i.push(new al(st.YY.fromRepoPath(e.path),this.view,this,e))}for(const e of this._children)i.includes(e)||e.dispose();this._children=i,this.ensureSubscription()}subscribe(){const e=[this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this)];return this.view.config.autoReveal&&e.push(s.window.onDidChangeActiveTextEditor((0,Lt.Ds)(this.onActiveEditorChanged,500),this)),s.Disposable.from(...e)}etag(){return(0,Lt.NX)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this._children&&1!==this._children.length)try{const t=e.document.uri,i=this._children.find((e=>e instanceof al&&e.repo.containsUri(t)));if(null==i)return;let s=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=s;){if(s===i)return;s=s.getParent()}this.view.reveal(i,{expand:!0})}catch(e){be.Yd.error(e)}}onRepositoriesChanged(e){this.triggerChange()}}Wa([(0,d.fF)()],RepositoriesNode.prototype,"resetChildren",1),Wa([(0,Wt.H)(),(0,d.fF)()],RepositoriesNode.prototype,"refresh",1),Wa([(0,d.fF)()],RepositoriesNode.prototype,"subscribe",1),Wa([(0,d.fF)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),Wa([(0,d.fF)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var La=Object.defineProperty,Ua=Object.getOwnPropertyDescriptor;const Na=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return Na.getId(this.repo.path)}async getChildren(){if(null==this._children){const e=await this.repo.getStash();if(null==e)return[new MessageNode(this.view,this,"No stashes could be found.")];this._children=[...(0,ye.UI)(e.commits.values(),(e=>new Yo(this.view,this,e)))]}return this._children}getTreeItem(){const e=new s.TreeItem("Stashes",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Stashes,e.iconPath=new s.ThemeIcon("gitlens-stashes"),e}refresh(){this._children=void 0}};let Ga=Na;Ga.key=":stashes",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ua(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&La(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],Ga.prototype,"refresh",1);var Ha=Object.defineProperty,Va=Object.getOwnPropertyDescriptor,Qa=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Va(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ha(t,i,n),n};class RepositoriesView extends ViewBase{constructor(e){super(e,"gitlens.views.repositories","Repositories","repositoriesView"),this.configKey="repositories",this._onDidChangeAutoRefresh=new s.EventEmitter}get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get canSelectMany(){return!1}getRoot(){return new RepositoriesNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0))),this),la(this.getQualifiedCommand("setBranchesLayoutToList"),(()=>this.setBranchesLayout(te.CZ.List)),this),la(this.getQualifiedCommand("setBranchesLayoutToTree"),(()=>this.setBranchesLayout(te.CZ.Tree)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setAutoRefreshToOn"),(()=>this.setAutoRefresh(r.D.get("views.repositories.autoRefresh"),!0)),this),la(this.getQualifiedCommand("setAutoRefreshToOff"),(()=>this.setAutoRefresh(r.D.get("views.repositories.autoRefresh"),!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),la(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),la(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),(()=>this.setBranchShowBranchComparison(!0)),this),la(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),(()=>this.setBranchShowBranchComparison(!1)),this),la(this.getQualifiedCommand("setShowBranchesOn"),(()=>this.toggleSection("showBranches",!0)),this),la(this.getQualifiedCommand("setShowBranchesOff"),(()=>this.toggleSection("showBranches",!1)),this),la(this.getQualifiedCommand("setShowCommitsOn"),(()=>this.toggleSection("showCommits",!0)),this),la(this.getQualifiedCommand("setShowCommitsOff"),(()=>this.toggleSection("showCommits",!1)),this),la(this.getQualifiedCommand("setShowContributorsOn"),(()=>this.toggleSection("showContributors",!0)),this),la(this.getQualifiedCommand("setShowContributorsOff"),(()=>this.toggleSection("showContributors",!1)),this),la(this.getQualifiedCommand("setShowRemotesOn"),(()=>this.toggleSection("showRemotes",!0)),this),la(this.getQualifiedCommand("setShowRemotesOff"),(()=>this.toggleSection("showRemotes",!1)),this),la(this.getQualifiedCommand("setShowStashesOn"),(()=>this.toggleSection("showStashes",!0)),this),la(this.getQualifiedCommand("setShowStashesOff"),(()=>this.toggleSection("showStashes",!1)),this),la(this.getQualifiedCommand("setShowTagsOn"),(()=>this.toggleSection("showTags",!0)),this),la(this.getQualifiedCommand("setShowTagsOff"),(()=>this.toggleSection("showTags",!1)),this),la(this.getQualifiedCommand("setShowWorktreesOn"),(()=>this.toggleSection("showWorktrees",!0)),this),la(this.getQualifiedCommand("setShowWorktreesOff"),(()=>this.toggleSection("showWorktrees",!1)),this),la(this.getQualifiedCommand("setShowUpstreamStatusOn"),(()=>this.toggleSection("showUpstreamStatus",!0)),this),la(this.getQualifiedCommand("setShowUpstreamStatusOff"),(()=>this.toggleSection("showUpstreamStatus",!1)),this),la(this.getQualifiedCommand("setShowSectionOff"),(e=>this.toggleSectionByNode(e,!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"sortBranchesBy")||r.D.changed(e,"sortContributorsBy")||r.D.changed(e,"sortTagsBy"))}onConfigurationChanged(e){r.D.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(r.D.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){const i=al.getId(e.repoPath);return e.remote?this.findNode((t=>void 0!==t.branch&&t.branch.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof vn?!!t.id.startsWith(i)&&(e.remote&&t.remote.name===(0,p.Lo)(e.name)):(t instanceof al||t instanceof za||t instanceof An||t instanceof BranchOrTagFolderNode)&&t.id.startsWith(i)),token:t}):this.findNode((t=>void 0!==t.branch&&t.branch.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof za||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i),token:t})}async findCommit(e,t){const i=al.getId(e.repoPath);let s=await this.container.git.getCommitBranches(e.repoPath,e.ref,(0,A.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==s.length)return this.findNode((t=>void 0!==t.commit&&t.commit.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof ba&&t.id.startsWith(i)&&s.includes(t.branch.name)?(await t.loadMore({until:e.ref}),!0):(t instanceof al||t instanceof za||t instanceof BranchOrTagFolderNode)&&t.id.startsWith(i)),token:t});if(s=await this.container.git.getCommitBranches(e.repoPath,e.ref,(0,A.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0}),0===s.length)return;const r=s.map((e=>e.split("/",1)[0]));return this.findNode((t=>void 0!==t.commit&&t.commit.ref===e.ref),{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof vn?e.id.startsWith(i)&&r.includes(e.remote.name):e instanceof ba?e.id.startsWith(i)&&s.includes(e.branch.name):(e instanceof al||e instanceof An||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i)),token:t})}findContributor(e,t){const i=al.getId(e.repoPath);return this.findNode(Qo.getId(e.repoPath,e.name,e.email,e.username),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof ka)&&e.id.startsWith(i),token:t})}findRemote(e,t){const i=al.getId(e.repoPath);return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof An)&&e.id.startsWith(i),token:t})}findStash(e,t){const i=al.getId(e.repoPath);return this.findNode(Yo.getId(e.repoPath,e.ref),{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof Ga)&&e.id.startsWith(i),token:t})}findTag(e,t){const i=al.getId(e.repoPath);return this.findNode((t=>void 0!==t.tag&&t.tag.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof ho||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i),token:t})}findWorktree(e,t){const i=al.getId(e.repoPath);return this.findNode(ea.getId(e.repoPath,e.uri),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof al||e instanceof ra)&&e.id.startsWith(i),token:t})}revealBranch(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,s)=>{const r=await this.findBranch(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealBranches(e,t){const i=al.getId(e),s=await this.findNode(za.getId(e),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||e instanceof al&&e.id.startsWith(i)});return void 0!==s&&await this.reveal(s,t),s}async revealCommit(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,s)=>{const r=await this.findCommit(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealContributor(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},(async(i,s)=>{const r=await this.findContributor(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}revealRemote(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findRemote(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealRepository(e,t){const i=al.getId(e),s=await this.findNode(i,{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==s&&await this.reveal(s,t),s}async revealStash(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,s)=>{const r=await this.findStash(e,s);return void 0!==r&&await this.reveal(r,t),r}))}async revealStashes(e,t){const i=al.getId(e),s=await this.findNode(Ga.getId(e),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||e instanceof al&&e.id.startsWith(i)});return void 0!==s&&await this.reveal(s,t),s}revealTag(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,s)=>{const r=await this.findTag(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealTags(e,t){const i=al.getId(e),s=await this.findNode(ho.getId(e),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||e instanceof al&&e.id.startsWith(i)});return void 0!==s&&await this.reveal(s,t),s}revealWorktree(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findWorktree(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealWorktrees(e,t){const i=al.getId(e),s=await this.findNode(ra.getId(e),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||e instanceof al&&e.id.startsWith(i)});return void 0!==s&&await this.reveal(s,t),s}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,Ci.v)(c.zf.ViewsRepositoriesAutoRefresh,e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return r.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return r.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&te.DH.Working)}setBranchShowBranchComparison(e){return r.D.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&te.DH.Branch)}toggleSection(e,t){return r.D.updateEffective(`views.${this.configKey}.${e}`,t)}toggleSectionByNode(e,t){return e instanceof za?r.D.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof ba?r.D.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof Ro?r.D.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof Uo?this.setShowBranchComparison(t):e instanceof ka?r.D.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof Ba?r.D.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof An?r.D.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof Ga?r.D.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof ho?r.D.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof ra?r.D.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}}Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealBranch",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealBranches",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealCommit",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealContributor",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealRemote",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealRepository",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealStash",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealStashes",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealTag",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealTags",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealWorktree",1),Qa([(0,Wt.H)((()=>""))],RepositoriesView.prototype,"revealWorktrees",1);var qa=Object.defineProperty,Ya=Object.getOwnPropertyDescriptor;const ja=class extends $i.Re{constructor(e,t,i,s){super(e,t,i),this.repo=s}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return ja.getId(this.repo.path)}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){const e=await this.repo.getBranches({filter:e=>!e.remote,sort:{current:!1}});if(0===e.values.length)return[new MessageNode(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new ba(st.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e,!1,{showComparison:this.view instanceof RepositoriesView?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison})));if(this.view.config.branches.layout===te.CZ.List)return t;const i=(0,y.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0))),s=new BranchOrTagFolderNode(this.view,this,"branch",this.repo.path,"",void 0,i,"branches");this._children=s.getChildren()}return this._children}async getTreeItem(){const e=new s.TreeItem("Branches",s.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=$i.Td.Branches,await this.repo.hasRemotes()&&(e.contextValue+="+remotes"),e.iconPath=new s.ThemeIcon("git-branch"),e}refresh(){this._children=void 0}};let za=ja;function Ka(){return(0,Ci.fw)(c.zf.PlusEnabled,r.D.get("plusFeatures.enabled",void 0,!0))}async function Ja(){if(Ka())return!0;const e={title:"Enable"};return await s.window.showInformationMessage("GitLens+ features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await r.D.updateEffective("plusFeatures.enabled",!0),!0)}za.key=":branches",((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ya(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&qa(t,i,n)})([(0,Wt.H)(),(0,d.fF)()],za.prototype,"refresh",1);var Za=Object.defineProperty,Xa=Object.getOwnPropertyDescriptor,el=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xa(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Za(t,i,n),n};class WorktreesRepositoryNode extends $i.vb{getChildren(){return null==this.child&&(this.child=new ra(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(lt.I6.Config,lt.I6.Worktrees,lt.I6.Unknown,lt.du.Any)}}class WorktreesViewNode extends $i.FZ{async getChildren(){if(!1===(await this.view.container.git.access(et.x.Worktrees)).allowed)return[];if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No worktrees could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new WorktreesRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return t.length<=1?(this.view.message=void 0,this.view.title="Worktrees",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Worktrees (${t.length})`,t)}return this.view.title="Worktrees",this.children}getTreeItem(){return new s.TreeItem("Worktrees",s.TreeItemCollapsibleState.Expanded)}}class WorktreesView extends ViewBase{constructor(e){super(e,"gitlens.views.worktrees","Worktrees","workspaceView"),this.configKey="worktrees",this.disposables.push(s.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme&&"worktree"===e.authority&&e.path.includes("/changes"))return{badge:"●",color:new s.ThemeColor("gitlens.decorations.worktreeView.hasUncommittedChangesForegroundColoSr"),tooltip:"Has Uncommitted Changes"}}}))}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showWorktrees")}async show(e){if(await Ja())return super.show(e)}onVisibilityChanged(e){e.visible?(this.updateDescription(),this._visibleDisposable?.dispose(),this._visibleDisposable=this.container.subscription.onDidChange((()=>{this.updateDescription()}))):(this._visibleDisposable?.dispose(),this._visibleDisposable=void 0),super.onVisibilityChanged(e)}async updateDescription(){const e=await this.container.subscription.getSubscription();switch(e.state){case lr.jc.Free:case lr.jc.FreePreviewTrialExpired:case lr.jc.FreePlusTrialExpired:this.description="✨ GitLens+ feature";break;case lr.jc.FreeInPreviewTrial:case lr.jc.FreePlusInTrial:{const t=(0,lr.PY)(e,"days");this.description=`✨ GitLens Pro (Trial), ${t<1?"<1 day":(0,C._6)("day",t)} left`;break}case lr.jc.VerificationRequired:this.description=`✨ ${e.plan.effective.name} (Unverified)`;break;case lr.jc.Paid:this.description=void 0}}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(async()=>this.refresh(!0)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),la(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat"))}findWorktree(e,t){const i=al.getId(e.repoPath);return this.findNode(ea.getId(e.repoPath,e.uri),{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.id.startsWith(i),token:t})}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findWorktree(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return r.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&te.DH.Branch)}async setShowBranchPullRequest(e){await r.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await r.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}el([(0,Wt.H)((()=>""))],WorktreesView.prototype,"revealRepository",1),el([(0,Wt.H)((()=>""))],WorktreesView.prototype,"revealWorktree",1);const tl=class extends $i.Re{constructor(e,t,i,s){super(st.YY.fromRepoPath(i.repoPath),e,t),this.status=i,this.range=s,this.repoPath=i.repoPath}static getId(e){return`${al.getId(e)}${this.key}`}get id(){return tl.getId(this.repoPath)}async getChildren(){let e=[];const t=this.repoPath;let i;null!=this.range&&(i=await this.view.container.git.getLog(t,{limit:0,ref:this.range}),null!=i&&(await Promise.allSettled((0,ye.UI)((0,ye.hX)(i.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),e=[...(0,ye.VS)(i.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))])),(this.view instanceof WorktreesView||this.view.config.includeWorkingTree)&&0!==this.status.files.length&&e.splice(0,0,...(0,ye.VS)(this.status.files,(e=>(0,ye.UI)(e.getPseudoCommits(this.view.container,void 0),(t=>this.getFileWithPseudoCommit(e,t)))))),e.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const s=(0,y.vM)(e,(e=>e.path));let r=Object.values(s).map((e=>new StatusFileNode(this.view,this,e[e.length-1],t,e.map((e=>e.commit)))));if(this.view.config.files.layout!==te.Vc.List){const e=(0,y.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,b.AH)((0,b.RQ)(...e))),this.view.config.files.compact);r=new Rn(this.view,this,t,"",e,!0).getChildren()}else r.sort(((e,t)=>e.priority-t.priority||(0,C.dm)(e.label,t.label)));return r}async getTreeItem(){let e=this.view instanceof WorktreesView||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&null!=this.status.upstream&&this.status.state.ahead>0)if(e>0){const t=await this.view.container.git.getDiffStatus(this.repoPath,`${this.status.upstream}...`);if(null!=t){const i=new Set;for(const e of this.status.files)i.add(e.path);for(const e of t)i.add(e.path);e=i.size}}else{const t=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);null!=t?e+=t.changedFiles:e=-1}const t=-1===e?"?? files changed":`${(0,C._6)("file",e)} changed`,i=new s.TreeItem(t,s.TreeItemCollapsibleState.Collapsed);return i.id=this.id,i.contextValue=$i.Td.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}};let il=tl;il.key=":status-files";var sl=Object.defineProperty,rl=Object.getOwnPropertyDescriptor,nl=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?rl(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&sl(t,i,n),n};const ol=class extends $i.CF{constructor(e,t,i,s){super(e,t,i),this.repo=s,this._status=this.repo.getStatus()}static getId(e){return`gitlens${this.key}(${e})`}toClipboard(){return this.repo.path}get id(){return ol.getId(this.repo.path)}async getChildren(){if(void 0===this._children){const e=[],t=await this._status;if(null!=t){const i=new p.XI(t.repoPath,t.branch,!1,!0,void 0,t.sha,t.upstream?{name:t.upstream,missing:!1}:void 0,t.state.ahead,t.state.behind,t.detached,t.rebasing);!1!==this.view.config.showBranchComparison&&e.push(new Uo(this.uri,this.view,this,i,this.view.config.showBranchComparison,!0));const[s,r]=await Promise.all([this.view.container.git.getMergeStatus(t.repoPath),this.view.container.git.getRebaseStatus(t.repoPath)]);if(null!=s?e.push(new pa(this.view,this,i,s,t,!0)):null!=r?e.push(new ga(this.view,this,i,r,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.state.behind||t.state.ahead?(t.state.behind&&e.push(new Ro(this.view,this,i,t,"behind",!0)),t.state.ahead&&e.push(new Ro(this.view,this,i,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new Ro(this.view,this,i,t,"same",!0)):e.push(new Ro(this.view,this,i,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length){const i=void 0;e.push(new il(this.view,this,t,i))}0===e.length||this.view.config.compact||e.push(new MessageNode(this.view,this,"",c.NE.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new ba(this.uri,this.view,this,i,!0,{showAsCommits:!0,showComparison:!1,showCurrent:!1,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new za(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new An(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.supports(et.A.Stashes)&&e.push(new Ga(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new ho(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.supports(et.A.Worktrees)&&e.push(new ra(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new ka(this.uri,this.view,this,this.repo)),this.view.config.showIncomingActivity&&e.push(new Ba(this.uri,this.view,this,this.repo)),this._children=e}return this._children}async getTreeItem(){const e=this.repo.formattedName??this.uri.repoPath??"",t=await(this.repo?.getLastFetched())??0;let i,r=`${this.repo.formattedName??this.uri.repoPath??""}${t?`${(0,C.vk)(c.NE.Dash,2,2)}Last fetched ${lt._j.formatLastFetched(t,!1)}`:""}${this.repo.formattedName?`\n${this.uri.repoPath}`:""}`,n="",o="",a=$i.Td.Repository;this.repo.starred&&(a+="+starred");const l=await this._status;if(null!=l){r+=`\n\nCurrent branch $(git-branch) ${l.branch}${l.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==l.files.length&&(o=l.getFormattedDiffStatus({compact:!0,prefix:(0,C.vk)(c.NE.Dot,1,1)}));let e;if(i=`${l.getUpstreamStatus({suffix:(0,C.vk)(c.NE.Dot,1,1)})}${l.branch}${l.rebasing?" (Rebasing)":""}${o}`,null!=l.upstream){const t=ot.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(l.repoPath));e=t?.length?t[0].name:void 0}else{const t=await l.getRemote();e=t?.provider?.name}n=o?"-blue":"",null!=l.upstream&&(r+=` is ${l.getUpstreamStatus({empty:`up to date with $(git-branch) ${l.upstream}${e?` on ${e}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${l.upstream}${e?` on ${e}`:""}`})}`,l.state.behind&&(a+="+behind",n="-red"),l.state.ahead&&(n=l.state.behind?"-yellow":"-green",a+="+ahead")),o&&(r+=`\n\nWorking tree has uncommitted changes${l.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`)}const h=new s.TreeItem(e,s.TreeItemCollapsibleState.Expanded);h.id=this.id,h.contextValue=a,h.description=`${i??""}${t?`${(0,C.vk)(c.NE.Dot,1,1)}Last fetched ${lt._j.formatLastFetched(t)}`:""}`,h.iconPath={dark:this.view.container.context.asAbsolutePath(`images/dark/icon-repo${n}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-repo${n}.svg`)};const u=new s.MarkdownString(r,!0);return u.supportHtml=!0,u.isTrusted=!0,h.tooltip=u,h}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(e=!1){e&&(this._status=this.repo.getStatus(),this._children=void 0),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=[this.repo.onDidChange(this.onRepositoryChanged,this)],i=lt._j.getLastFetchedUpdateInterval(e);return 0!==e&&i>0&&t.push((0,Lt.DH)((()=>{i!==lt._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),i)),this.view.config.includeWorkingTree&&t.push(this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),this.repo.startWatchingFileSystem()),s.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.getStatus(),void 0!==this._children){const e=await this._status;let t=this._children.findIndex((e=>e instanceof il));if(void 0===e||!e.state.ahead&&0===e.files.length)-1!==t&&this._children.splice(t,1);else{let i=1;-1===t&&(t=(0,y.qr)(this._children,(e=>e instanceof Ro||e instanceof ba)),i=0,t++);const s=void 0;this._children.splice(t,i,new il(this.view,this,e,s))}}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(lt.I6.Closed,lt.du.Any))this.dispose();else if(null==this._children||e.changed(lt.I6.Config,lt.I6.Index,lt.I6.Heads,lt.I6.Status,lt.I6.Unknown,lt.du.Any))this.triggerChange(!0);else{if(e.changed(lt.I6.Remotes,lt.I6.RemoteProviders,lt.du.Any)){const e=this._children.find((e=>e instanceof An));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(lt.I6.Stash,lt.du.Any)){const e=this._children.find((e=>e instanceof Ga));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(lt.I6.Tags,lt.du.Any)){const e=this._children.find((e=>e instanceof ho));null!=e&&this.view.triggerNodeChange(e)}}}};let al=ol;al.key=":repository",nl([(0,d.cM)()],al.prototype,"fetch",1),nl([(0,d.cM)()],al.prototype,"pull",1),nl([(0,d.cM)()],al.prototype,"push",1),nl([(0,Wt.H)(),(0,d.fF)()],al.prototype,"refresh",1),nl([(0,d.cM)()],al.prototype,"star",1),nl([(0,d.cM)()],al.prototype,"unstar",1),nl([(0,d.fF)()],al.prototype,"subscribe",1),nl([(0,d.fF)({args:{0:e=>`{ repository: ${e.repository?.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map((e=>e.fsPath)).join(", ")}${e.uris.length>1?", ...":""}] }`}})],al.prototype,"onFileSystemChanged",1),nl([(0,d.fF)({args:{0:e=>e.toString()}})],al.prototype,"onRepositoryChanged",1);var ll=Object.defineProperty,cl=Object.getOwnPropertyDescriptor,hl=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?cl(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ll(t,i,n),n};let ul=0;const dl=class extends $i.Re{constructor(e,t,i,s,r,n,o=0){super(st.YY.fromRepoPath(i),e,t),this.repoPath=i,this._labels=r,this._searchQueryOrLog=n,this._pinned=o,this._order=Date.now(),this._search=s,this._instanceId=ul++,this._order=Date.now()}static getId(e,t,i){return`${al.getId(e)}${this.key}(${null==t?"?":(0,Et.FL)(t)}):${i}`}static getPinnableId(e,t){return(0,ze.FB)(`${e}|${(0,Et.FL)(t)}`,"base64")}get id(){return dl.getId(this.repoPath,this.search,this._instanceId)}get canDismiss(){return!this.pinned}get order(){return this._pinned||this._order}get pinned(){return 0!==this._pinned}get search(){return this._search}ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new ResultsCommitsNode(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!this.pinned},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){const e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=`${$i.Td.SearchResults}${this._pinned?"+pinned":""}`,this.view.container.git.repositoryCount>1){const t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return this._pinned&&(e.iconPath=new s.ThemeIcon("pinned")),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e)return void await Ri({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});const t=this.getPinnableId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,this.pinned&&(await this.view.updatePinned(t),await this.updatePinned()),this.triggerChange(!1),queueMicrotask((()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0})))}refresh(e=!1){this._resultsNode?.refresh(e)}async pin(){this.pinned||(this._pinned=Date.now(),await this.updatePinned(),queueMicrotask((()=>this.view.reveal(this,{focus:!0,select:!0}))))}async unpin(){this.pinned&&(this._pinned=0,await this.view.updatePinned(this.getPinnableId()),queueMicrotask((()=>this.view.reveal(this,{focus:!0,select:!0}))))}getPinnableId(){return dl.getPinnableId(this.repoPath,this.search)}getSearchLabel(e,t){if("string"==typeof e)return e;const i=t?.count??0,s=void 0===e.resultsType?{singular:"result",plural:"results"}:e.resultsType;return`${(0,C._6)(s.singular,i,{format:e=>t?.hasMore?`${e}+`:void 0,plural:s.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async s=>{t=await(t??this.view.container.git.richSearchCommits(this.repoPath,this.search)),i||null==t||null==t.query||(t=await t.query(s)),i=!1;const r={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return r.hasMore&&(r.more=async t=>{r.log=await(r.log?.more?.(t))??r.log,r.label=this.getSearchLabel(e.label,r.log),r.hasMore=r.log?.hasMore??!0}),r}}updatePinned(){return this.view.updatePinned(this.getPinnableId(),{type:"search",timestamp:this._pinned,path:this.repoPath,labels:this._labels,search:(0,Et.KQ)(this.search)})}};let pl=dl;pl.key=":search-results",hl([(0,Wt.H)(),(0,d.fF)()],pl.prototype,"refresh",1),hl([(0,d.cM)()],pl.prototype,"pin",1),hl([(0,d.cM)()],pl.prototype,"unpin",1);const ml=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"]]);class SearchGitCommand extends QuickCommand{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.query||t.prefillOnly||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.searchAndCompareView,commit:void 0,hasVirtualFolders:(0,Ci.fw)(c.zf.HasVirtualFolders,!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=r.D.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let s=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(s=!1,1===t.repos.length)s=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(e.counter<2||null==e.query){const i=yield*this.pickSearchOperatorStep(e,t);if(i===Qr){s&&e.counter--,e.query=void 0;continue}e.query=i}const i={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},r=(0,Et.FL)(i);if(null!=t.resultsPromise&&t.resultsKey===r||(t.resultsPromise=e.repo.richSearchCommits(i),t.resultsKey=r),e.showResultsInSideBar){this.container.searchAndCompareView.search(e.repo.path,i,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof pl?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){const s=e.repo.path,r=yield*Dr(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,C._6)("result",i.count,{format:e=>i.hasMore?`${e}+`:void 0})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new ActionQuickPickItem("$(link-external)  Show Results in Side Bar",(()=>{this.container.searchAndCompareView.search(s,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)})),showInSideBarButton:{button:us,onDidClick:()=>{this.container.searchAndCompareView.search(s,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}}});if(r===Qr){e.counter--;continue}t.commit=r}let n;e.openPickInView?(Os(t.commit,{pin:!1,preserveFocus:!1}),n=Qr):n=yield*Sl(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,n===Qr&&Zr(e)}return e.counter<0?Qr:void 0}*pickSearchOperatorStep(e,t){const i=[{label:ml.get(""),description:`pattern or message: pattern or =: pattern ${c.NE.Dash} use quotes to search for phrases`,item:"message:"},{label:ml.get("author:"),description:"author: pattern or @: pattern",item:"author:"},{label:ml.get("commit:"),description:"commit: sha or #: sha",item:"commit:"},t.hasVirtualFolders?void 0:{label:ml.get("file:"),description:"file: glob or ?: glob",item:"file:"},t.hasVirtualFolders?void 0:{label:ml.get("change:"),description:"change: pattern or ~: pattern",item:"change:"}].filter((e=>null!=e)),s=new is(e.matchCase),r=new ss(e.matchAll),n=new rs(e.matchRegex),o={title:hr(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[s,r,n],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:e=>{const t=e.selectedItems[0];if(!Et.WY.has(t.item))return!0;const i=e.value.trim();return 0===i.length||Et.WY.has(i)?e.value=t.item:e.value=`${i} ${t.item}`,o.onDidChangeValue(e),!1},onDidClickButton:(t,i)=>{i===s?(e.matchCase=!e.matchCase,s.on=e.matchCase):i===r?(e.matchAll=!e.matchAll,r.on=e.matchAll):i===n&&(e.matchRegex=!e.matchRegex,n.on=e.matchRegex)},onDidChangeValue:s=>{const r=s.value.trim();e.counter=r?3:2;const n=(0,Et.pD)({query:r,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return s.title=hr(0===n.size||n.size>1?t.title:`Commit ${ml.get(n.keys().next().value)}`,e,t),0===s.value.length?s.items=i:(s.ignoreFocusOut=!0,o.ignoreFocusOut=!0,s.items=[{label:"Search for",description:s.value,item:s.value}]),!0}},a=yield o;return jr(o,e,a)?(e.counter--,a[0].item.trim()):(e.counter--,Qr)}}function gl(e){if(!(e.repo instanceof lt._j))throw new Error("Missing repository")}function fl(e){if(!(0,A.f_)(e.reference))throw new Error("Missing reference")}function wl(e){if(!e.fileName)throw new Error("Missing filename")}class ShowGitCommand extends QuickCommand{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,null!=t?.state?.fileName&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){const t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(gl(e),(e.counter<2||null==e.reference||!(0,A.f_)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,A.f_)(e.reference)||(e.reference=await this.container.git.getCommit(e.reference.repoPath,e.reference.ref)),e.counter<2||null==e.reference)){const s=yield*Dr(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(s===Qr){i&&e.counter--;continue}e.reference=s}if(fl(e),e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();const i=yield*Or(e,t);if(i===Qr)continue;if(i instanceof GitCommandQuickPickItem){const t=yield*i.executeSteps(this.pickedVia);e.counter--,t===Qr&&Zr(e);continue}if(i instanceof CommandQuickPickItem&&!(i instanceof CommitFilesQuickPickItem)){Zr(e),i.execute();break}}if(e.counter<4||null==e.fileName){const i=yield*Er(e,t,{picked:e.fileName});if(i===Qr)continue;if(i instanceof CommitFilesQuickPickItem){e.counter-=2;continue}e.fileName=i.file.path}wl(e);const s=yield*Mr(e,t);if(s!==Qr)if(s instanceof CommitFilesQuickPickItem)e.counter-=2;else if(s instanceof GitCommandQuickPickItem)yield*s.executeSteps(this.pickedVia),e.counter--;else if(s instanceof CommandQuickPickItem){Zr(e),s.execute();break}}return e.counter<0?Qr:void 0}}const vl=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"]]);function yl(e,t){return null==t?e:`${vl.get(t)} ${e}`}class StashGitCommand extends QuickCommand{constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"apply":case"drop":case"pop":null!=t.state.reference&&i++;break;case"push":null!=t.state.message&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.stashesView,readonly:(0,Ci.fw)(c.zf.Readonly,!1)||(0,Ci.fw)(c.zf.Untrusted,!1)||(0,Ci.fw)(c.zf.HasVirtualFolders,!1),title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===Qr)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=yl(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)continue;e.repo=i}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;default:Zr(e)}i&&e.counter--}return e.counter<0?Qr:void 0}*pickSubcommandStep(e){const t={title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stash",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"}],buttons:[s.QuickInputButtons.Back]},i=yield t;return jr(t,e,i)?i[0].item:Qr}async*applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Tr(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===Qr)break;e.reference=i}if(this.confirm(e.confirm)){const i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===Qr)continue;e.subcommand=i}Zr(e);try{if(await e.repo.stashApply("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){const t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){be.Yd.error(e,t.title),tt.ef.is(e,tt.bk.WorkingChanges)?s.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,Mt.W8)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,u.Wh)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,u.Wh)(e.reference)} to the working tree`,item:e.subcommand},{label:yl(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,u.Wh)(e.reference)} to the working tree`:`Will delete ${(0,u.Wh)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[hs,ls],onDidClickButton:(t,i)=>{i===hs?Xs(e.reference,{pin:!1,preserveFocus:!0}):i===ls&&Zs(e.reference,{select:!0,expand:!0})}}),s=yield i;return jr(i,e,s)?s[0].item:Qr}async*dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Tr(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to delete",picked:e.reference?.ref});if(i===Qr)break;e.reference=i}if((yield*this.dropCommandConfirmStep(e,t))!==Qr){Zr(e);try{await e.repo.stashDelete(`stash@{${e.reference.number}}`,e.reference.ref)}catch(e){return be.Yd.error(e,t.title),void(0,Mt.W8)("Unable to delete stash")}}}}*dropCommandConfirmStep(e,t){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,u.Wh)(e.reference)}`}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[hs,ls],onDidClickButton:(t,i)=>{i===hs?Xs(e.reference,{pin:!1,preserveFocus:!0}):i===ls&&Zs(e.reference,{select:!0,expand:!0})}}),s=yield i;return jr(i,e,s)?void 0:Qr}async*listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Tr(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===Qr)break;e.reference=i}const i=yield*Sl(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===Qr&&Zr(e)}}async*pushCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){const t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}const i=yield*this.pushCommandInputMessageStep(e,t);if(i===Qr)break;e.message=i}if(this.confirm(e.confirm)){const i=yield*this.pushCommandConfirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e);try{await e.repo.stashSave(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")})}catch(e){be.Yd.error(e,t.title);const i=e?.message??e?.toString()??"";return i.includes("newer version of Git")?void s.window.showErrorMessage(`Unable to stash changes. ${i}`):void(0,Mt.W8)("Unable to stash changes")}}}async*pushCommandInputMessageStep(e,t){const i=Jr({title:hr(t.title,e,t,null!=e.uris?`${(0,C.vk)(c.NE.Dot,2,2)}${1===e.uris.length?(0,cr.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message"}),s=yield i;return zr(0,e,s)&&await Yr(i,e,s)?s:Qr}*pushCommandConfirmStep(e,t){const i=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),null==e.uris||0===e.uris.length?[ji(e.flags,[],{label:t.title,detail:"Will stash uncommitted changes"}),ji(e.flags,["--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"}),ji(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:"Will stash uncommitted changes, but will keep staged files intact"})]:[ji(e.flags,[],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,cr.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`}),ji(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,cr.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`})],void 0,{placeholder:`Confirm ${t.title}`}),s=yield i;return jr(i,e,s)?s[0].item:Qr}}class StatusGitCommand extends QuickCommand{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,status:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)break;e.repo=i}if(t.status=await e.repo.getStatus(),null==t.status)return;t.title=`${this.title}${(0,C.vk)(c.NE.Dot,2,2)}${(0,u.Wh)((0,u.xB)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:null!=t.status.upstream?{name:t.status.upstream,missing:!1}:void 0}),{icon:!1})}`;const s=yield*Lr(e,t);if(s!==Qr){if(s instanceof GitCommandQuickPickItem){const t=yield*s.executeSteps(this.pickedVia);e.counter--,t===Qr&&Zr(e)}else if(s instanceof CommandQuickPickItem){Zr(e),s.execute();break}}else i&&e.counter--}}}class SwitchGitCommand extends QuickCommand{constructor(e,t){super(e,"switch","switch","Switch",{description:"aka checkout, switches the current branch to a specified branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:`Switching ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`} to ${e.reference.name}`},(()=>Promise.all(e.repos.map((t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,showTags:!1,switchToLocalFrom:void 0,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,y.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repos=[t.repos[0]];else{const i=yield*$r(e,t,{skipIfPossible:e.counter>=1});if(i===Qr)break;e.repos=i}if(e.counter<2||null==e.reference){const s=yield*Pr(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`});if(s===Qr){i&&e.counter--;continue}e.reference=s}if((0,u.UR)(e.reference)&&e.reference.remote){t.title=`Create Branch and ${this.title}`;const{values:i}=await this.container.git.getBranches(e.reference.repoPath,{filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:te.Vz.DateDesc}});if(0===i.length){const i=yield*fr(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` based on ${(0,u.Wh)(e.reference,{icon:!1})}`,value:e.createBranch??(0,u.Av)(e.reference)});if(i===Qr)continue;e.createBranch=i}else t.title=`${this.title} to Local Branch`,t.switchToLocalFrom=e.reference,e.reference=i[0],e.createBranch=void 0}else e.createBranch=void 0;if(this.confirm(e.confirm||null!=t.switchToLocalFrom)){const i=yield*this.confirmStep(e,t);if(i===Qr)continue;"switch+fast-forward"===i&&(e.fastForwardTo=t.switchToLocalFrom)}Zr(e),this.execute(e)}return e.counter<0?Qr:void 0}*confirmStep(e,t){let i;i=null!=t.switchToLocalFrom&&1===e.repos.length?[{label:`${t.title} and Fast-Forward`,description:"",detail:`Will switch to and fast-forward local ${(0,u.Wh)(e.reference)} in $(repo) ${e.repos[0].formattedName}`,item:"switch+fast-forward"}]:[];const s=this.createConfirmStep(hr(`Confirm ${t.title}`,e,t),[{label:t.title,description:e.createBranch?"-b":"",detail:`Will ${e.createBranch?`create and switch to a new branch named ${e.createBranch} from ${(0,u.Wh)(e.reference)}`:`switch to ${null!=t.switchToLocalFrom?"local ":""}${(0,u.Wh)(e.reference)}`} in ${1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`}`,item:"switch"},...i],void 0,{placeholder:`Confirm ${t.title}`}),r=yield s;return jr(s,e,r)?r[0].item:Qr}}const bl=new Map([["create","Create"],["delete","Delete"]]);function Cl(e,t){return null==t?e:`${bl.get(t)} ${e}`}class TagGitCommand extends QuickCommand{constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.tagsView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===Qr)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)continue;e.repo=i}switch(t.title=Cl("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:Zr(e)}i&&e.counter--}return e.counter<0?Qr:void 0}*pickSubcommandStep(e){const t={title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]},i=yield t;return jr(t,e,i)?i[0].item:Qr}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Ar(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,u.FT)(e.reference)?e.reference.ref:void 0});if(i===Qr)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*yr(e,t,{placeholder:"Please provide a name for the new tag",titleContext:` at ${(0,u.Wh)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??(0,u.Av)(e.reference)});if(i===Qr)continue;e.name=i}if(e.counter<5||null==e.message){const i=yield*this.createCommandInputMessageStep(e,t);if(i===Qr)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===Qr)continue;e.flags=i}Zr(e),e.repo.tag(...e.flags,...0!==e.message.length?[`"${e.message}"`]:[],e.name,e.reference.ref)}}async*createCommandInputMessageStep(e,t){const i=Jr({title:hr(`${t.title} at ${(0,u.Wh)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),s=yield i;return zr(0,e,s)&&await Yr(i,e,s)?s:Qr}*createCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,u.Wh)(e.reference)}`}),ji(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:"--force"+(0!==e.message.length?" -m":""),detail:`Will forcibly create a new tag named ${e.name} at ${(0,u.Wh)(e.reference)}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}async*deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=Cl("Tags",e.subcommand);const i=yield*xr(e,t,{picked:e.references?.map((e=>e.ref)),placeholder:"Choose tags to delete"});if(i===Qr)break;e.references=i}t.title=Cl((0,C._6)("Tag",e.references.length,{only:!0}),e.subcommand);(yield*this.deleteCommandConfirmStep(e,t))!==Qr&&(Zr(e),e.repo.tagDelete(e.references))}}*deleteCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,u.Wh)(e.references)}`}],t);return jr(i,e,yield i)?void 0:Qr}}function Al(e){if(null==e.repo||"string"==typeof e.repo)throw new Error("Missing repository")}const Pl=new Map([["create","Create"],["delete","Delete"],["open","Open"]]);function Dl(e,t){return null==t?e:`${Pl.get(t)} ${e}`}class WorktreeGitCommand extends QuickCommand{constructor(e,t){super(e,"worktree","worktree","Worktree",{description:"open, create, or delete worktrees"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null==t.state.uris||Array.isArray(t.state.uris)&&0===t.state.uris.length||i++;break;case"open":null!=t.state.uri&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return this.canSkipConfirmOverride??!1}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.worktreesView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===Qr)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,e.counter++,e.repo=t.repos[0];else{const i=yield*Fr(e,t);if(i===Qr)continue;e.repo=i}e.repo=await e.repo.getMainRepository()??e.repo,Al(e);if((yield*Nr(e,t,et.x.Worktrees))===Qr)break;switch(t.title=Dl("delete"===e.subcommand?"Worktrees":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;default:Zr(e)}i&&e.counter--}return e.counter<0?Qr:void 0}*pickSubcommandStep(e){const t={title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]},i=yield t;return jr(t,e,i)?i[0].item:Qr}async*createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedUri=void 0,e.confirm=!0,this.canSkipConfirmOverride=void 0;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*Ar(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree for`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" for",value:(0,u.FT)(e.reference)?e.reference.ref:void 0});if(i===Qr)break;e.reference=i}if(e.counter<4||null==e.uri)if(null==e.reference||r.D.get("worktrees.promptForLocation",e.repo.folder)||null==t.defaultUri){const i=yield*this.createCommandChoosePathStep(e,t,{titleContext:` for ${(0,u.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,defaultUri:t.defaultUri});if(i===Qr)continue;e.uri=i,t.pickedUri=e.uri}else e.uri=t.defaultUri;if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===Qr)continue;[e.uri,e.flags]=i}e.confirm=!0,this.canSkipConfirmOverride=void 0;if("branch"===e.reference?.refType&&e.reference?.remote&&!e.flags.includes("-b")){e.flags.push("-b"),e.createBranch=(0,u.Av)(e.reference);null!=await e.repo.getBranch(e.createBranch)&&(e.createBranch=e.reference.name)}if(e.flags.includes("-b")&&null==e.createBranch){const i=yield*fr(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,u.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.createBranch??(0,u.Av)(e.reference)});if(i===Qr){e.flags=[];continue}e.createBranch=i}const i=e.flags.includes("--direct")?e.uri:s.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));let n;try{n=await e.repo.createWorktree(i,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),!1!==e.reveal&&rr(void 0,{select:!0,focus:!0})}catch(t){if(tt.P6.is(t,tt.hK.AlreadyCheckedOut)&&!e.flags.includes("--force")){const t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},n=await s.window.showWarningMessage(`Unable to create the new worktree because ${(0,u.Wh)(e.reference,{icon:!1,quoted:!0})} is already checked out.\n\nWould you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(n===t){e.flags.push("-b"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}if(n===i){e.flags.push("--force"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}}else tt.P6.is(t,tt.hK.AlreadyExists)?s.window.showErrorMessage(`Unable to create a new worktree in '${It.getFriendlyPath(i)}' because the folder already exists and is not empty.`,"OK"):(0,Mt.W8)(`Unable to create a new worktree in '${It.getFriendlyPath(i)}.`)}if(Zr(e),null==n)break;const o=r.D.get("worktrees.openAfterCreate");if("never"===o)break;if("prompt"===o){yield*this.openCommandSteps({subcommand:"open",repo:e.repo,uri:n.uri,counter:3,confirm:!0},t);break}queueMicrotask((()=>{switch(o){case"always":(0,Pi.ic)(n.uri,{location:Pi.Tc.CurrentWindow});break;case"alwaysNewWindow":(0,Pi.ic)(n.uri,{location:Pi.Tc.NewWindow});break;case"onlyWhenEmpty":(0,Pi.ic)(n.uri,{location:s.workspace.workspaceFolders?.length?Pi.Tc.CurrentWindow:Pi.Tc.NewWindow})}}))}}async*createCommandChoosePathStep(e,t,i){const r={show:async r=>{const n=null!=i?.defaultUri,o=await s.window.showInformationMessage(`Choose a location in which to create the worktree${i.titleContext}.`,{modal:!0},{title:"Choose Location"},...n?[{title:"Use Default Location"}]:[]);if(null==o)return Ki.Back;if("Use Default Location"===o.title)return i.defaultUri;const a=await s.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:t.pickedUri??e.uri??t.defaultUri,openLabel:"Select Worktree Location",title:`${hr(`Choose a Worktree Location${i.titleContext}`,e,t)}`});return null==a||0===a.length?Ki.Back:a[0]}},n=yield r;return zr(0,e,n)&&await Yr(r,e,n)?n:Qr}*createCommandConfirmStep(e,t){const i=t.pickedUri??e.uri,r=(0,C.AO)(It.getFriendlyPath(i),60);let n,o=!0;const a=e.repo.uri,l=`${(0,b.EZ)(a.path)}.worktrees`;a.toString()!==i.toString()?n=(0,b.$d)(i,a)?s.Uri.joinPath(a,"..",l):(0,b.EZ)(i.path)===l?i:s.Uri.joinPath(i,l):(n=s.Uri.joinPath(a,"..",l),o=!1);const c=e.createBranch??(null!=e.reference?(0,u.Av)(e.reference):void 0),h=c?s.Uri.joinPath(n,...c.replace(/\\/g,"/").split("/")):n,d=(0,C.AO)(It.getFriendlyPath(h),65),p=(0,C.AO)(It.getFriendlyPath(s.Uri.joinPath(n,"<new-branch-name>")),60),m="branch"===e.reference?.refType&&e.reference?.remote,g=Kr(hr(`Confirm ${t.title} • ${(0,u.Wh)(e.reference,{icon:!1,label:!1})}`,e,t),[ji(e.flags,m?["-b"]:[],{label:m?"Create Local Branch and Worktree":t.title,description:" in subfolder",detail:`Will create worktree in $(folder) ${d}`},n),ji(e.flags,["-b"],{label:m?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" in subfolder",detail:`Will create worktree in $(folder) ${p}`},n),...o?[Yi(),ji(e.flags,["--direct"],{label:m?"Create Local Branch and Worktree":t.title,description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i),ji(e.flags,["-b","--direct"],{label:m?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i)]:[]],t),f=yield g;return jr(g,e,f)?[f[0].context,f[0].item]:Qr}async*deleteCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=Dl("Worktrees",e.subcommand);const i=yield*_r(e,t,{filter:e=>e.main||!e.opened,includeStatus:!0,picked:e.uris?.map((e=>e.toString())),placeholder:"Choose worktrees to delete"});if(i===Qr)break;e.uris=i.map((e=>e.uri))}t.title=Dl((0,C._6)("Worktree",e.uris.length,{only:!0}),e.subcommand);const i=yield*this.deleteCommandConfirmStep(e,t);if(i!==Qr){e.flags=i,Zr(e);for(const i of e.uris){let r=!1;do{r=!1;const n=e.flags.includes("--force");try{if(n){const e=t.worktrees.find((e=>e.uri.toString()===i.toString())),r=await(e?.getStatus());if(r?.hasChanges){const e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`The worktree in '${i.fsPath}' has uncommitted changes.\n\nDeleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nAre you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.deleteWorktree(i,{force:n})}catch(t){if(tt.Nk.is(t)){if(t.reason===tt.xe.MainWorkingTree)s.window.showErrorMessage("Unable to delete the main worktree");else if(!n){const n={title:"Force Delete"},o={title:"Cancel",isCloseAffordance:!0};await s.window.showErrorMessage(t.reason===tt.xe.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${i.fsPath}'.\n\nForcibly deleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nWould you like to forcibly delete it?`:`Unable to delete worktree in '${i.fsPath}'.\n\nWould you like to try to forcibly delete it?`,{modal:!0},n,o)===n&&(e.flags.push("--force"),r=!0)}}else(0,Mt.W8)(`Unable to delete worktree in '${i.fsPath}.`)}}while(r)}}}}*deleteCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:t.title,detail:`Will delete ${(0,C._6)("worktree",e.uris.length,{only:1===e.uris.length})}${1===e.uris.length?` in $(folder) ${It.getFriendlyPath(e.uris[0])}`:""}`}),ji(e.flags,["--force"],{label:`Force ${t.title}`,description:"including ANY UNCOMMITTED changes",detail:`Will forcibly delete ${(0,C._6)("worktree",e.uris.length,{only:1===e.uris.length})} ${1===e.uris.length?` in $(folder) ${It.getFriendlyPath(e.uris[0])}`:""}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}async*openCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uri){t.title=Dl("Worktree",e.subcommand);const i=yield*Ir(e,t,{includeStatus:!0,picked:e.uri?.toString(),placeholder:"Choose worktree to open"});if(i===Qr)break;e.uri=i.uri}t.title=Dl("Worktree",e.subcommand);const i=yield*this.openCommandConfirmStep(e,t);if(i===Qr)continue;e.flags=i,Zr(e);const s=t.worktrees.find((t=>t.uri.toString()===e.uri.toString()));if(null==s)break;e.flags.includes("--reveal-explorer")?nr(s):(0,Pi.ic)(s.uri,{location:ar(e.flags)})}}*openCommandConfirmStep(e,t){const i=Kr(hr(`Confirm ${t.title}`,e,t),[ji(e.flags,[],{label:t.title,detail:`Will open in the current window, the worktree in $(folder) ${It.getFriendlyPath(e.uri)}`}),ji(e.flags,["--new-window"],{label:`${t.title} in a New Window`,detail:`Will open in a new window, the worktree in $(folder) ${It.getFriendlyPath(e.uri)}`}),ji(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:`Will add into the current workspace, the worktree in $(folder) ${It.getFriendlyPath(e.uri)}`}),ji(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",detail:`Will open in the File Explorer, the worktree in $(folder) ${It.getFriendlyPath(e.uri)}`})],t),s=yield i;return jr(i,e,s)?s[0].item:Qr}}function Sl(e,t,i){const s=new PickCommandStep(e,t),r=s.find(t.command);return null==r?function*(){}():(s.setCommand(r,i),r.executeSteps())}class PickCommandStep{constructor(e,t){this.container=e,this.buttons=[],this.ignoreFocusOut=!1,this.matchOnDescription=!0,this.placeholder="Choose a git command",this.title="GitLens";const i=(0,Ci.fw)(c.zf.HasVirtualFolders,!1),s=i||(0,Ci.fw)(c.zf.Readonly,!1)||(0,Ci.fw)(c.zf.Untrusted,!1);if(this.items=[s?void 0:new BranchGitCommand(e,"branch"===t?.command?t:void 0),s?void 0:new CherryPickGitCommand(e,"cherry-pick"===t?.command?t:void 0),i?void 0:new CoAuthorsGitCommand(e,"co-authors"===t?.command?t:void 0),s?void 0:new FetchGitCommand(e,"fetch"===t?.command?t:void 0),new LogGitCommand(e,"log"===t?.command?t:void 0),s?void 0:new MergeGitCommand(e,"merge"===t?.command?t:void 0),s?void 0:new PullGitCommand(e,"pull"===t?.command?t:void 0),s?void 0:new PushGitCommand(e,"push"===t?.command?t:void 0),s?void 0:new RebaseGitCommand(e,"rebase"===t?.command?t:void 0),s?void 0:new RemoteGitCommand(e,"remote"===t?.command?t:void 0),s?void 0:new ResetGitCommand(e,"reset"===t?.command?t:void 0),s?void 0:new RevertGitCommand(e,"revert"===t?.command?t:void 0),new SearchGitCommand(e,"search"===t?.command||"grep"===t?.command?t:void 0),new ShowGitCommand(e,"show"===t?.command?t:void 0),i?void 0:new StashGitCommand(e,"stash"===t?.command?t:void 0),i?void 0:new StatusGitCommand(e,"status"===t?.command?t:void 0),s?void 0:new SwitchGitCommand(e,"switch"===t?.command||"checkout"===t?.command?t:void 0),s?void 0:new TagGitCommand(e,"tag"===t?.command?t:void 0),i?void 0:new WorktreeGitCommand(e,"worktree"===t?.command?t:void 0)].filter((e=>null!=e)),r.D.get("gitCommands.sortBy")===te.zL.Usage){const e=this.container.storage.getWorkspace("gitComandPalette:usage");null!=e&&this.items.sort(((t,i)=>(e[i.key]??0)-(e[t.key]??0)))}this.hiddenItems=[]}get command(){return this._command}find(e,t=!1){if(t){const t=e.toLowerCase();return this.items.find((e=>e.isFuzzyMatch(t)))??this.hiddenItems.find((e=>e.isFuzzyMatch(t)))}return this.items.find((t=>t.isMatch(e)))??this.hiddenItems.find((t=>t.isMatch(e)))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}class GitCommandQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,c.Gh.GitCommands,[t],{suppressKeyPress:!0})}executeSteps(e){return Sl(gv.instance,this.args[0],e)}}async function kl(e,t,i){let s="";if(!0===i?.type?s=!0===i.current&&e.current?"current branch":"branch":"remote"===i?.type?e.remote&&(s="remote branch"):!0===i?.current&&e.current&&(s="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=c.NE.Dash;if(e.upstream.missing)t=c.NE.Warning;else{const i=await e.getRemote();if(null!=i){let e,s;for(const{type:t}of i.urls)if(t===ot.XG.Fetch){if(e=!0,s)break}else if(t===ot.XG.Push&&(s=!0,e))break;e&&s?t=c.NE.ArrowsRightLeft:s?t=c.NE.ArrowRight:e&&(t=c.NE.ArrowLeft)}}const i=`${e.getTrackingStatus({suffix:`${c.NE.Space} `})}${t}${c.NE.Space} ${e.upstream.name}`;s=`${s?`${s}${c.NE.Space.repeat(2)}${i}`:i}`}i?.ref&&(e.sha&&(s=s?`${s} $(git-commit)${c.NE.Space}${(0,u.zL)(e.sha)}`:`$(git-commit)${c.NE.Space}${(0,u.zL)(e.sha)}`),void 0!==e.date&&(s=s?`${s}${(0,C.vk)(c.NE.Dot,2,2)}${e.formattedDate}`:e.formattedDate));const r=i?.checked||null==i?.checked&&"checkmark"===i?.current&&e.current;return{label:`$(git-branch)${c.NE.Space}${e.starred?`$(star-full)${c.NE.Space}`:""}${e.name}${r?(0,C.vk)("$(check)",2):""}`,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote}}function Rl(e,t,i){if((0,A.G2)(e)){const s=null==e.number?"":`${e.number}: `;if(i?.compact){return{label:`${i.icon?`$(archive)${c.NE.Space}`:""}${s}${e.summary}`,description:`${e.formattedDate}${(0,C.vk)(c.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e}}return{label:`${i?.icon?`$(archive)${c.NE.Space}`:""}${s}${e.summary}`,description:"",detail:`${c.NE.Space.repeat(2)}${e.formattedDate}${(0,C.vk)(c.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}if(i?.compact){return{label:`${i.icon?`$(git-commit)${c.NE.Space}`:""}${e.summary}`,description:`${e.author.name}, ${e.formattedDate}${(0,C.vk)("$(git-commit)",2,1)}${e.shortSha}${(0,C.vk)(c.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e}}return{label:`${i?.icon?`$(git-commit)${c.NE.Space}`:""}${e.summary}`,description:"",detail:`${c.NE.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,C.vk)("$(git-commit)",2,1)}${e.shortSha}${(0,C.vk)(c.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}function Fl(e,t,i,s){if(""===e)return{label:(s?.icon?`$(file-directory)${c.NE.Space}`:"")+"Working Tree",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,u.xB)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1};if("HEAD"===e)return{label:(s?.icon?`$(git-branch)${c.NE.Space}`:"")+"HEAD",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,u.xB)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1};let r;if("string"==typeof e?r=(0,u.xB)(e,t):(r=e,e=r.ref),(0,u.yk)(e))return{label:`Range ${r.name}`,description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:r,current:!1,ref:e,remote:!1};return{label:`Commit ${r.name}`,description:s?.ref?`$(git-commit)${c.NE.Space}${e}`:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:r,current:!1,ref:e,remote:!1}}function $l(e,t,i){let s="";if(i?.type&&(s="remote"),i?.upstream){const t=(0,ot.jv)(e);s=s?`${s}${(0,C.vk)(c.NE.Dot,2,2)}${t}`:t}return{label:`$(cloud)${c.NE.Space}${e.name}${i?.checked?(0,C.vk)("$(check)",2):""}`,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}async function Tl(e,t,i){let s;(i?.branch||i?.status)&&(s=await e.getStatus());let r="";if(i?.branch&&null!=s&&(r=s.branch),i?.status&&null!=s){let e="";0!==s.files.length&&(e=s.getFormattedDiffStatus({compact:!0,prefix:(0,C.vk)(c.NE.Dot,2,2)}));const t=`${s.getUpstreamStatus({prefix:r?`${c.NE.Space} `:""})}${e}`;t&&(r=`${r?`${r}${t}`:t}`)}if(i?.fetched){const t=await e.getLastFetched();if(0!==t){const e=`Last fetched ${(0,ie.Zh)(new Date(t))}`;r=`${r?`${r}${(0,C.vk)(c.NE.Dot,2,2)}${e}`:e}`}}return{label:e.formattedName,description:r,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function xl(e,t,i){let s="";if(i?.type&&(s="tag"),i?.ref&&(s=`${s}${(0,C.vk)("$(git-commit)",s?2:0,1)}${(0,u.zL)(e.sha)}`,s=`${s?`${s}${(0,C.vk)(c.NE.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){const t=(0,Xe.X)(e.message);s=s?`${s}${(0,C.vk)(c.NE.Dot,2,2)}${t}`:t}return{label:`$(tag)${c.NE.Space}${e.name}${i?.checked?(0,C.vk)("$(check)",2):""}`,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1}}async function Il(e,t,i){const s=gv.instance.git.getBestRepository(e,t);if(null!=s)return s;const r=await Ol(i);if(!(r instanceof CommandQuickPickItem))return r?.item;await r.execute()}async function _l(e,t){let i;if(i=null==t?gv.instance.git.highlander:await gv.instance.git.getOrOpenRepository(t),null!=i)return i;const s=await Ol(e);if(!(s instanceof CommandQuickPickItem))return s?.item;await s.execute()}async function Ol(e,t="Choose a repository",i){const r=await Promise.all([...(0,ye.UI)(i??gv.instance.git.openRepositories,(e=>Tl(e,void 0,{branch:!0,status:!0})))]),n=s.window.createQuickPick();n.ignoreFocusOut=(0,Pi.hE)();const o=[];try{const i=await new Promise((i=>{o.push(n.onDidHide((()=>i(void 0))),n.onDidAccept((()=>{0!==n.activeItems.length&&i(n.activeItems[0])}))),n.title=e,n.placeholder=t,n.matchOnDescription=!0,n.matchOnDetail=!0,n.items=r,n.show()}));if(null==i)return;return i}finally{n.dispose(),o.forEach((e=>{e.dispose()}))}}var Bl=Object.defineProperty,El=Object.getOwnPropertyDescriptor;let Ml=class extends Command{constructor(e){super(c.Gh.CloseUnchangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){const t=await _l("Close All Unchanged Files");if(null==t)return;const i=await this.container.git.getStatusForRepo(t.uri);if(null==i)return void s.window.showWarningMessage("Unable to close unchanged files");e.uris=i.files.map((e=>e.uri))}const t=0===e.uris.length;for(const i of s.window.tabGroups.all)for(const r of i.tabs)if(r.input instanceof s.TabInputText||r.input instanceof s.TabInputCustom||r.input instanceof s.TabInputNotebook){const i=r.input.uri;!t&&e.uris.some((e=>En.n.equals(e,i)))||s.window.tabGroups.close(r,!0)}else if(r.input instanceof s.TabInputTextDiff||r.input instanceof s.TabInputNotebookDiff){const i=r.input.modified;!t&&e.uris.some((e=>En.n.equals(e,i)))||s.window.tabGroups.close(r,!0)}}catch(e){be.Yd.error(e,"CloseUnchangedFilesCommand"),(0,Mt.W8)("Unable to close all unchanged files")}}};Ml=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?El(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Bl(t,i,n),n})([(0,ki.WD)()],Ml);var Wl=Object.defineProperty,Ll=Object.getOwnPropertyDescriptor;let Ul=class extends ActiveEditorCommand{constructor(e){super([c.Gh.CompareWith,c.Gh.CompareHeadWith,c.Gh.CompareWorkingWith,c.Gh.Deprecated_DiffHeadWith,c.Gh.Deprecated_DiffWorkingWith]),this.container=e}preExecute(e,t){switch(e.command){case c.Gh.CompareWith:t={...t};break;case c.Gh.CompareHeadWith:case c.Gh.Deprecated_DiffHeadWith:(t={...t}).ref1="HEAD";break;case c.Gh.CompareWorkingWith:case c.Gh.Deprecated_DiffWorkingWith:(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=Ti(t,e),i={...i};try{let s;switch(i.ref1){case null:s="Compare";break;case"":s="Compare Working Tree with";break;case"HEAD":s="Compare HEAD with";break;default:s=`Compare ${i.ref1} with`}const r=(await Il(t,e,s))?.path;if(!r)return;null!=i.ref1&&null!=i.ref2?await this.container.searchAndCompareView.compare(r,i.ref1,i.ref2):this.container.searchAndCompareView.selectForCompare(r,i.ref1,{prompt:!0})}catch(e){be.Yd.error(e,"CompareWithCommmand"),(0,Mt.W8)("Unable to open comparison")}}};Ul=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ll(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Wl(t,i,n),n})([(0,ki.WD)()],Ul);var Nl=Object.defineProperty,Gl=Object.getOwnPropertyDescriptor;let Hl=class extends ActiveEditorCommand{constructor(e){super(c.Gh.CopyCurrentBranch),this.container=e}async execute(e,t){const i=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,r=await Il(i,e,"Copy Current Branch Name");if(null!=r)try{const e=await r.getBranch();e?.name&&await s.env.clipboard.writeText(e.name)}catch(e){be.Yd.error(e,"CopyCurrentBranchCommand"),(0,Mt.W8)("Unable to copy current branch name")}}};Hl=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Gl(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Nl(t,i,n),n})([(0,ki.WD)()],Hl);var Vl=(e=>(e.DeepLink="link",e))(Vl||{}),Ql=(e=>(e.Branch="b",e.Commit="c",e.Repository="r",e.Tag="t",e))(Ql||{});function ql(e){switch(e){case"b":return"Branch";case"c":return"Commit";case"r":return"Repository";case"t":return"Tag";default:return"Unknown"}}function Yl(e){const[,t,i,s,r,...n]=e.path.split("/");if("link"!==t||"r"!==i)return;const o=new URLSearchParams(e.query).get("url");return o?null==r?{type:"r",repoId:s,remoteUrl:o}:{type:r,repoId:s,remoteUrl:o,targetId:n.join("/")}:void 0}var jl=(e=>(e[e.Idle=0]="Idle",e[e.RepoMatch=1]="RepoMatch",e[e.CloneOrAddRepo=2]="CloneOrAddRepo",e[e.OpeningRepo=3]="OpeningRepo",e[e.AddedRepoMatch=4]="AddedRepoMatch",e[e.RemoteMatch=5]="RemoteMatch",e[e.AddRemote=6]="AddRemote",e[e.TargetMatch=7]="TargetMatch",e[e.Fetch=8]="Fetch",e[e.FetchedTargetMatch=9]="FetchedTargetMatch",e[e.OpenGraph=10]="OpenGraph",e))(jl||{}),zl=(e=>(e[e.DeepLinkEventFired=0]="DeepLinkEventFired",e[e.DeepLinkCancelled=1]="DeepLinkCancelled",e[e.DeepLinkResolved=2]="DeepLinkResolved",e[e.DeepLinkStored=3]="DeepLinkStored",e[e.DeepLinkErrored=4]="DeepLinkErrored",e[e.OpenRepo=5]="OpenRepo",e[e.RepoMatchedWithId=6]="RepoMatchedWithId",e[e.RepoMatchedWithRemoteUrl=7]="RepoMatchedWithRemoteUrl",e[e.RepoMatchFailed=8]="RepoMatchFailed",e[e.RepoAdded=9]="RepoAdded",e[e.RepoOpened=10]="RepoOpened",e[e.RemoteMatched=11]="RemoteMatched",e[e.RemoteMatchFailed=12]="RemoteMatchFailed",e[e.RemoteAdded=13]="RemoteAdded",e[e.TargetIsRemote=14]="TargetIsRemote",e[e.TargetMatched=15]="TargetMatched",e[e.TargetMatchFailed=16]="TargetMatchFailed",e[e.TargetFetched=17]="TargetFetched",e))(zl||{}),Kl=(e=>(e.Folder="folder",e.Workspace="workspace",e))(Kl||{});const Jl={0:{0:1},1:{6:5,7:7,8:2},2:{5:3,10:5,4:0,1:0,3:0},3:{9:4,4:0,1:0},4:{6:5,7:7,4:0},5:{11:7,12:6},6:{13:10,4:0,1:0},7:{14:10,15:10,16:8},8:{17:9,4:0,1:0},9:{15:10,4:0},10:{2:0,4:0}};var Zl=Object.defineProperty,Xl=Object.getOwnPropertyDescriptor;let ec=class extends ActiveEditorCommand{constructor(e){super([c.Gh.CopyDeepLinkToBranch,c.Gh.CopyDeepLinkToCommit,c.Gh.CopyDeepLinkToRepo,c.Gh.CopyDeepLinkToTag]),this.container=e}preExecute(e,t){return null==t&&(Ii(e)?t={refOrRepoPath:e.node.commit}:xi(e)?t={refOrRepoPath:e.node.branch}:Ei(e)?t={refOrRepoPath:e.node.tag}:Oi(e)&&(t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name})),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,n;if(i={...i},null==i?.refOrRepoPath){const i=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0;r=Ql.Repository,n=(await Il(i,e,`Copy Link to ${ql(r)}`))?.path}else"string"==typeof i.refOrRepoPath?(r=Ql.Repository,n=i.refOrRepoPath,i.refOrRepoPath=void 0):(r=function(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}(i.refOrRepoPath.refType),n=i.refOrRepoPath.repoPath);if(n){if(!i.remote&&"branch"===i.refOrRepoPath?.refType&&(i.refOrRepoPath.remote||null!=i.refOrRepoPath.upstream?.name)){const[e,t]=(0,p.g2)(i.refOrRepoPath.remote?i.refOrRepoPath.name:i.refOrRepoPath.upstream.name);null!=e&&(i.remote=t,i.prePickRemote=!0)}try{let e;const t=await this.container.git.getRemotes(n,{sort:!0});if(i.remote&&!i.prePickRemote)e=t.find((e=>e.name===i?.remote));else{const n=await async function(e,t="Choose a remote",i,r){const n=[];let o;if(0===i.length)t="No remotes found";else{if("default"===r?.autoPick&&i.length>1){const e=i.find((e=>e.default));null!=e&&(i=[e])}const e={upstream:!0,buttons:r?.setDefault?[cs]:void 0};for(const t of i)n.push($l(t,void 0,e)),t.name===r?.picked&&(o=n[n.length-1])}if(r?.autoPick&&1===i.length)return n[0];const a=s.window.createQuickPick();a.ignoreFocusOut=(0,Pi.hE)();const l=[];try{const i=await new Promise((i=>{l.push(a.onDidHide((()=>i(void 0))),a.onDidAccept((()=>{0!==a.activeItems.length&&i(a.activeItems[0])})),a.onDidTriggerItemButton((async e=>{e.button===cs&&(await e.item.item.setAsDefault(),i(e.item))}))),a.title=e,a.placeholder=t,a.matchOnDetail=!0,a.items=n,null!=o&&(a.activeItems=[o]),a.show()}));if(null==i)return;return i}finally{a.dispose(),l.forEach((e=>{e.dispose()}))}}(`Copy Link to ${ql(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==n)return;e=n.item}if(null==e)return;null==i.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(n,e.url):await this.container.deepLinks.copyDeepLinkUrl(i.refOrRepoPath,e.url)}catch(e){be.Yd.error(e,"CopyDeepLinkCommand"),(0,Mt.W8)("Unable to copy link")}}}};ec=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xl(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Zl(t,i,n),n})([(0,ki.WD)()],ec);var tc=Object.defineProperty,ic=Object.getOwnPropertyDescriptor;let sc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.CopyMessageToClipboard),this.container=e}async preExecute(e,t){return Ii(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):xi(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):Ei(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=Ti(t,e),i={...i};try{if(!i.message){if(null!=i.repoPath&&null!=i.sha)return void await bs({ref:i.sha,repoPath:i.repoPath});let s;if(null==t){if(s=this.container.git.getBestRepository(e)?.path,!s)return;const t=await this.container.git.getLog(s,{limit:1});if(null==t)return;const r=(0,ye.Ps)(t.commits.values());if(null==r?.message)return;i.message=r.message}else if(null==i.message){const r=await st.YY.fromUri(t);if(s=r.repoPath,null!=i.sha)return void await bs({ref:i.sha,repoPath:s});{const t=e?.selection.active.line??0;if(t<0)return;try{const i=await this.container.git.getBlameForLine(r,t,e?.document);if(null==i||i.commit.isUncommitted)return;return void await bs(i.commit)}catch(e){return be.Yd.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),void(0,Mt.W8)("Unable to copy message")}}}}await s.env.clipboard.writeText(i.message)}catch(e){be.Yd.error(e,"CopyMessageToClipboardCommand"),(0,Mt.W8)("Unable to copy message")}}};sc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?ic(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&tc(t,i,n),n})([(0,ki.WD)()],sc);var rc=Object.defineProperty,nc=Object.getOwnPropertyDescriptor;let oc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.CopyShaToClipboard),this.container=e}preExecute(e,t){return Ii(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):xi(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):Ei(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=Ti(t,e),i={...i};try{if(!i.sha)if(null==t){const t=this.container.git.getBestRepository(e)?.path;if(!t)return;const s=await this.container.git.getLog(t,{limit:1});if(null==s)return;if(i.sha=(0,ye.Ps)(s.commits.values())?.sha,null==i.sha)return}else if(null==i.sha){const s=e?.selection.active.line??0;if(s<0)return;try{const r=await st.YY.fromUri(t),n=await this.container.git.getBlameForLine(r,s,e?.document);if(null==n)return;i.sha=n.commit.sha}catch(e){return be.Yd.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${s})`),void(0,Mt.W8)("Unable to copy commit SHA")}}await s.env.clipboard.writeText(r.D.get("advanced.abbreviateShaOnCopy")?(0,u.zL)(i.sha):i.sha)}catch(e){be.Yd.error(e,"CopyShaToClipboardCommand"),(0,Mt.W8)("Unable to copy commit SHA")}}};oc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?nc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&rc(t,i,n),n})([(0,ki.WD)()],oc);var ac=Object.defineProperty,lc=Object.getOwnPropertyDescriptor;let cc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.CopyRelativePathToClipboard),this.container=e}preExecute(e){return _i(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(e,t){let i="";if(null!=(t=Ti(t,e))){const s=this.container.git.getBestRepository(e)?.uri;null!=s&&(i=this.container.git.getRelativePath(t,s))}await s.env.clipboard.writeText(i)}};cc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?lc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ac(t,i,n),n})([(0,ki.WD)()],cc);var hc=Object.defineProperty,uc=Object.getOwnPropertyDescriptor;let dc=class extends Command{constructor(e){super(c.Gh.CreatePullRequestOnRemote),this.container=e}async execute(e){if(null==e?.repoPath)return;const t=this.container.git.getRepository(e.repoPath);if(null==t)return;const i=await t.getRemote(e.remote);if(null==i?.provider)return;const s=i.provider.id,r=await t.getRemotes({filter:e=>e.provider?.id===s}),n={type:at.J.CreatePullRequest,base:{branch:e.base,remote:void 0},compare:{branch:e.compare,remote:{path:i.path,url:i.url}}};await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:n,remotes:r})}};dc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?uc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&hc(t,i,n),n})([(0,ki.WD)()],dc);var pc=Object.defineProperty,mc=Object.getOwnPropertyDescriptor,gc=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?mc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&pc(t,i,n),n};let fc=0;const wc=class extends $i.Re{constructor(e,t,i,s,r,n=0){super(st.YY.fromRepoPath(i),e,t),this.repoPath=i,this._ref=s,this._compareWith=r,this._pinned=n,this._order=Date.now(),this._instanceId=fc++}static getId(e,t,i,s){return`${al.getId(e)}${this.key}(${t}|${i}):${s}`}static getPinnableId(e,t,i){return(0,ze.FB)(`${e}|${t}|${i}`,"base64")}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get id(){return wc.getId(this.repoPath,this._ref.ref,this._compareWith.ref,this._instanceId)}get canDismiss(){return!this.pinned}get order(){return this._pinned||this._order}get pinned(){return 0!==this._pinned}async getChildren(){if(null==this._children){const e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.repoPath,[(0,u.oI)(t.ref1||"HEAD",t.ref2,"...")]),s=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2);this._children=[new ResultsCommitsNode(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,u.oI)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{id:"behind",description:(0,C._6)("commit",i?.behind??0),expand:!1}),new ResultsCommitsNode(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,u.oI)(e.ref1,e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{id:"ahead",description:(0,C._6)("commit",i?.ahead??0),expand:!1}),new ResultsFilesNode(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})]}return this._children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){const t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}const t=new s.TreeItem(`Comparing ${this._ref.label??(0,u.zL)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,u.zL)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,s.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${$i.Td.CompareResults}${this._pinned?"+pinned":""}${""===this._ref.ref?"+working":""}`,t.description=e,this._pinned&&(t.iconPath=new s.ThemeIcon("pinned")),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}async pin(){this.pinned||(this._pinned=Date.now(),await this.updatePinned(),queueMicrotask((()=>this.view.reveal(this,{focus:!0,select:!0}))))}refresh(e=!1){e&&(this._children=void 0)}async swap(){if(""===this._ref.ref)return void s.window.showErrorMessage("Cannot swap comparisons with the working tree");const e=this.getPinnableId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,this.pinned&&(await this.view.updatePinned(e),await this.updatePinned()),this._children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask((()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0})))}async unpin(){this.pinned&&(this._pinned=0,await this.view.updatePinned(this.getPinnableId()),queueMicrotask((()=>this.view.reveal(this,{focus:!0,select:!0}))))}getPinnableId(){return wc.getPinnableId(this.repoPath,this._ref.ref,this._compareWith.ref)}async getAheadFilesQuery(){return this.getAheadBehindFilesQuery((0,u.oI)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return this.getAheadBehindFilesQuery((0,u.oI)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}async getAheadBehindFilesQuery(e,t){const[i,s,r,n]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),t?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),t?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]);let o=(0,Nt.Sb)(i)??[],a=(0,Nt.Sb)(r);if(t){const e=(0,Nt.Sb)(s);if(null!=e)if(0===o.length)o=e??[];else for(const t of e){const e=o.findIndex((e=>e.path===t.path));-1!==e?o.splice(e,1,t):o.push(t)}const t=(0,Nt.Sb)(n);null!=t&&(a=null==a?t:{additions:a.additions+t.additions,deletions:a.deletions+t.deletions,changedFiles:o.length,approximated:!0})}return{label:`${(0,C._6)("file",o.length,{zero:"No"})} changed`,files:o,stats:a}}getCommitsQuery(e){const t=this.repoPath;return async i=>{const s=await this.view.container.git.getLog(t,{limit:i,ref:e}),r={log:s,hasMore:s?.hasMore??!0};return r.hasMore&&(r.more=async e=>{r.log=await(r.log?.more?.(e))??r.log,r.hasMore=r.log?.hasMore??!0}),r}}async getFilesQuery(){let e;if(""===this._compareWith.ref)throw new Error("Cannot get files for comparisons of a ref with working tree");e=""===this._ref.ref?this._compareWith.ref:`${this._compareWith.ref}..${this._ref.ref}`;const[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),s=(0,Nt.Sb)(t)??[];return{label:`${(0,C._6)("file",s.length,{zero:"No"})} changed`,files:s,stats:(0,Nt.Sb)(i)}}updatePinned(){return this.view.updatePinned(this.getPinnableId(),{type:"comparison",timestamp:this._pinned,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref}})}};let vc=wc;vc.key=":compare-results",gc([(0,Wt.H)(),(0,d.fF)()],vc.prototype,"getDiffRefs",1),gc([(0,d.cM)()],vc.prototype,"pin",1),gc([(0,Wt.H)(),(0,d.fF)()],vc.prototype,"refresh",1),gc([(0,d.cM)()],vc.prototype,"swap",1),gc([(0,d.cM)()],vc.prototype,"unpin",1);var yc=Object.defineProperty,bc=Object.getOwnPropertyDescriptor;let Cc=class extends ActiveEditorCommand{constructor(e){super([c.Gh.DiffDirectory,c.Gh.DiffDirectoryWithHead,c.Gh.ViewsOpenDirectoryDiff,c.Gh.ViewsOpenDirectoryDiffWithWorking]),this.container=e}async preExecute(e,t){switch(e.command){case c.Gh.DiffDirectoryWithHead:(t={...t}).ref1="HEAD",t.ref2=void 0;break;case c.Gh.ViewsOpenDirectoryDiff:"viewItem"===e.type&&e.node instanceof vc&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case c.Gh.ViewsOpenDirectoryDiffWithWorking:(function(e){return"viewItem"===e.type&&e.node instanceof $i.bT})(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=Ti(t,e),i={...i};try{const s=(await Il(t,e,"Directory Compare Working Tree With"))?.path;if(!s)return;if(!i.ref1){const e=await Bn(s,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowEnteringRefs:!0});if(null==e)return;if(i.ref1=e.ref,null==i.ref1)return}ks(s,i.ref1,i.ref2)}catch(e){be.Yd.error(e,"OpenDirectoryCompareCommand"),(0,Mt.W8)("Unable to open directory compare")}}};Cc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?bc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&yc(t,i,n),n})([(0,ki.WD)()],Cc);var Ac=Object.defineProperty,Pc=Object.getOwnPropertyDescriptor;let Dc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.DiffLineWithPrevious),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const s=i.commit?.getGitUri()??await st.YY.fromUri(t);try{const e=await this.container.git.getPreviousComparisonUrisForLine(s.repoPath,s,i.line,s.sha);if(null==e||null==e.previous)return void(0,Mt.RR)();await(0,ki.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){be.Yd.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${s.repoPath}, ${s.fsPath}, ${s.sha})`),(0,Mt.W8)("Unable to open compare")}}};Dc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Pc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ac(t,i,n),n})([(0,ki.WD)()],Dc);var Sc=Object.defineProperty,kc=Object.getOwnPropertyDescriptor;let Rc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.DiffLineWithWorking),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const r=await st.YY.fromUri(t);let n,o;if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.commit||i.commit.isUncommitted){const t=i.line;if(t<0)return;try{const s=await this.container.git.getBlameForLine(r,t,e?.document);if(null==s)return void(0,Mt.zk)("Unable to open compare");if(i.commit=s.commit,i.commit.isUncommitted){const e=await this.container.git.getStatusForFile(r.repoPath,r);null!=e?.indexStatus?(n=P.pw,o=this.container.git.getAbsoluteUri(e.originalPath||e.path,i.commit.repoPath)):(n=i.commit.unresolvedPreviousSha,o=i.commit.file.originalUri??i.commit.file.uri)}else n=i.commit.sha,o=i.commit.file.uri;i.line=s.line.line-1}catch(e){return be.Yd.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),void(0,Mt.W8)("Unable to open compare")}}else n=i.commit.sha,o=i.commit.file?.uri??r;const a=await(i.commit.file?.getWorkingUri());null!=a?await(0,ki.P0)(c.Gh.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:n,uri:o},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions}):s.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree")}};Rc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?kc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Sc(t,i,n),n})([(0,ki.WD)()],Rc);var Fc=Object.defineProperty,$c=Object.getOwnPropertyDescriptor;let Tc=class extends Command{constructor(e){super(c.Gh.DiffWith),this.container=e}static getMarkdownCommandArgs(e,t){let i;if((0,A.f_)(e)){const s=e;if(null==s.file||null==s.unresolvedPreviousSha)throw new Error("Commit has no file");i=s.isUncommitted?{repoPath:s.repoPath,lhs:{sha:"HEAD",uri:s.file.uri},rhs:{sha:"",uri:s.file.uri},line:t}:{repoPath:s.repoPath,lhs:{sha:s.unresolvedPreviousSha,uri:s.file.originalUri??s.file.uri},rhs:{sha:s.sha,uri:s.file.uri},line:t}}else i=e;return super.getMarkdownCommandArgsCore(c.Gh.DiffWith,i)}async execute(e){if(null!=e?.lhs&&null!=e?.rhs&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.resolveReference(e.repoPath,e.lhs.sha,e.lhs.uri,{timeout:(0,u.yo)(e.lhs.sha)?100:void 0}),await this.container.git.resolveReference(e.repoPath,e.rhs.sha,e.rhs.uri,{timeout:(0,u.yo)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==P.Ii&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==P.Ii){const t=await this.container.git.getFileStatusForCommit(e.repoPath,e.rhs.uri,e.rhs.sha);"D"===t?.status?e.rhs.sha=P.Ii:i=e.rhs.sha,"A"===t?.status&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=P.Ii)}const[r,n]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]);let o=(0,u.zL)(i,{strings:{uncommitted:"Working Tree"}});null==n?o=(0,u.l3)(e.rhs.sha)?"deleted":0===o.length&&e.rhs.sha===P.Ii?"not in Working Tree":"deleted"+(0===o.length?"":` in ${o}`):null==r&&(o="added"+(0===o.length?"":` in ${o}`));let a=e.lhs.sha!==P.Ii?(0,u.zL)(t):"";null==r&&0===e.rhs.sha.length&&(null!=n?(a=0===a.length?"":`not in ${a}`,o=""):a="deleted"+(0===a.length?"":` in ${a}`)),null!=e.lhs.title||null==r&&0===a.length||(e.lhs.title=`${(0,b.EZ)(e.lhs.uri.fsPath)}${a?` (${a})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,b.EZ)(e.rhs.uri.fsPath)}${o?` (${o})`:""}`);const l=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${c.NE.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=s.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new s.Range(e.line,0,e.line,0)),await(0,ki.dO)(c.nA.Diff,r??this.container.git.getRevisionUri(P.Ii,e.lhs.uri.fsPath,e.repoPath),n??this.container.git.getRevisionUri(P.Ii,e.rhs.uri.fsPath,e.repoPath),l,e.showOptions)}catch(e){be.Yd.error(e,"DiffWithCommand","getVersionedFile"),(0,Mt.W8)("Unable to open compare")}}};Tc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?$c(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Fc(t,i,n),n})([(0,ki.WD)()],Tc);var xc=Object.defineProperty,Ic=Object.getOwnPropertyDescriptor;let _c=class extends ActiveEditorCommand{constructor(e){super([c.Gh.DiffWithNext,c.Gh.DiffWithNextInDiffLeft,c.Gh.DiffWithNextInDiffRight]),this.container=e}preExecute(e,t){return e.command===c.Gh.DiffWithNextInDiffLeft&&(t={...t,inDiffLeftEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=Ti(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const s=i.commit?.getGitUri()??await st.YY.fromUri(t);try{const e=await this.container.git.getNextComparisonUris(s.repoPath,s,s.sha,i.inDiffLeftEditor?1:0);if(null==e||null==e.next)return;await(0,ki.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){be.Yd.error(e,"DiffWithNextCommand",`getNextDiffUris(${s.repoPath}, ${s.fsPath}, ${s.sha})`),(0,Mt.W8)("Unable to open compare")}}};_c=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ic(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&xc(t,i,n),n})([(0,ki.WD)()],_c);var Oc=Object.defineProperty,Bc=Object.getOwnPropertyDescriptor;let Ec=class extends ActiveEditorCommand{constructor(e){super([c.Gh.DiffWithPrevious,c.Gh.DiffWithPreviousInDiffLeft,c.Gh.DiffWithPreviousInDiffRight]),this.container=e}preExecute(e,t){return e.command===c.Gh.DiffWithPreviousInDiffRight&&(t={...t,inDiffRightEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=Ti(t,e)))return}else t=i.uri;let s;if(null==i.line&&(i.line=e?.selection.active.line??0),null!=i.commit?.file){if(!i.commit.isUncommitted)return void await(0,ki.P0)(c.Gh.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});s=i.commit?.getGitUri()}else s=await st.YY.fromUri(t);try{const e=await this.container.git.getPreviousComparisonUris(s.repoPath,s,s.sha,i.inDiffRightEditor?1:0);if(null==e||null==e.previous){if(null==e)return void(0,Mt.RR)();if(null==e.current.sha)return void await(0,Pi.GR)(e.current,i.showOptions);if(!e.current.isUncommittedStaged)return void(0,Mt.RR)();e.previous=st.YY.fromFile(e.current.fileName,e.current.repoPath,P.Ii)}await(0,ki.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){be.Yd.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${s.repoPath}, ${s.fsPath}, ${s.sha})`),(0,Mt.W8)("Unable to open compare")}}};async function Mc(e,t,i,n){const o=s.window.createQuickPick();function a(e){return null==e?[Zi(Ki.Cancel)]:[...n?.showOtherReferences??[],...(0,ye.UI)(e.commits.values(),(e=>Rl(e,n?.picked===e.ref,{compact:!0,icon:!0}))),...e?.hasMore?[Zi(Ki.LoadMore)]:[]]}o.ignoreFocusOut=(0,Pi.hE)(),o.title=t,o.placeholder=i,o.matchOnDescription=!0,o.matchOnDetail=!0,(0,Nt.tI)(e)&&(o.busy=!0,o.show(),null==(e=await e)&&(o.placeholder="Unable to show commit history")),o.items=a(e),n?.picked&&(o.activeItems=o.items.filter((e=>!CommandQuickPickItem.is(e)&&e.picked)));const l=[];let c;null!=n?.keys&&0!==n.keys.length&&null!==n?.onDidPressKey&&(c=gv.instance.keyboard.createScope(Object.fromEntries(n.keys.map((e=>[e,{onDidPressKey:e=>{if(0!==o.activeItems.length){const[t]=o.activeItems;null==t||Xi(t)||CommandQuickPickItem.is(t)||n.onDidPressKey(e,t)}}}])))),c.start(),l.push(c));try{const t=await new Promise((t=>{l.push(o.onDidHide((()=>t(void 0))),o.onDidAccept((()=>{if(0!==o.activeItems.length){const[i]=o.activeItems;if(Xi(i))return i.directive===Ki.LoadMore?void async function(){o.busy=!0;try{const t=a(e=await((await e)?.more?.(r.D.get("advanced.maxListItems"))));let i=-1;if(0!==o.activeItems.length){const e=o.activeItems[0];i=o.items.indexOf(e),Xi(e)&&i--}o.items=t,i&&(o.activeItems=[o.items[i]])}finally{o.busy=!1}}():void t(void 0);t(i)}})),o.onDidChangeValue((async e=>{null!=c&&(0!==e.length?await c.pause(["left","right"]):await c.resume())}))),o.busy=!1,o.show()}));if(null==t||Xi(t))return;return t instanceof CommandQuickPickItem?void await t.execute():t.item}finally{o.dispose(),l.forEach((e=>{e.dispose()}))}}async function Wc(e,t,i,r){const n=s.window.createQuickPick();n.ignoreFocusOut=(0,Pi.hE)(),n.title=t,n.placeholder=i,n.matchOnDescription=!0,n.matchOnDetail=!0,(0,Nt.tI)(e)&&(n.busy=!0,n.show(),e=await e),null!=e&&(n.items=[...r?.showOtherReferences??[],...(0,ye.UI)(null!=r?.filter?(0,ye.hX)(e.commits.values(),r.filter):e.commits.values(),(e=>Rl(e,r?.picked===e.ref,{compact:!0,icon:!0})))]),(null==e||n.items.length<=(r?.showOtherReferences?.length??0))&&(n.placeholder=null==e?"No stashes found":r?.empty??"No matching stashes found",n.items=[Zi(Ki.Cancel)]),r?.picked&&(n.activeItems=n.items.filter((e=>!CommandQuickPickItem.is(e)&&e.picked)));const o=[];let a;null!=r?.keys&&0!==r.keys.length&&null!==r?.onDidPressKey&&(a=gv.instance.keyboard.createScope(Object.fromEntries(r.keys.map((e=>[e,{onDidPressKey:e=>{if(0!==n.activeItems.length){const[t]=n.activeItems;null==t||Xi(t)||CommandQuickPickItem.is(t)||r.onDidPressKey(e,t)}}}])))),a.start(),o.push(a));try{const e=await new Promise((e=>{o.push(n.onDidHide((()=>e(void 0))),n.onDidAccept((()=>{if(0!==n.activeItems.length){const[t]=n.activeItems;if(Xi(t))return void e(void 0);e(t)}})),n.onDidChangeValue((async e=>{null!=a&&(0!==e.length?await a.pause(["left","right"]):await a.resume())}))),n.busy=!1,n.show()}));if(null==e||Xi(e))return;return e instanceof CommandQuickPickItem?void await e.execute():e.item}finally{n.dispose(),o.forEach((e=>{e.dispose()}))}}Ec=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Bc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Oc(t,i,n),n})([(0,ki.WD)()],Ec);var Lc=Object.defineProperty,Uc=Object.getOwnPropertyDescriptor;let Nc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.DiffWithRevision),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{const e=this.container.git.getLogForFile(s.repoPath,s.fsPath).then((e=>e??(s.sha?this.container.git.getLogForFile(s.repoPath,s.fsPath,{ref:s.sha}):void 0))),t=`Open Changes with Revision${(0,C.vk)(c.NE.Dot,2,2)}`,r=await Mc(e,`${t}${s.getFormattedFileName({suffix:s.sha?`:${(0,u.zL)(s.sha)}`:void 0,truncateTo:c.d$-t.length})}`,"Choose a commit to compare with",{picked:s.sha,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await(0,ki.P0)(c.Gh.DiffWith,{repoPath:s.repoPath,lhs:{sha:t.item.ref,uri:s},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})},showOtherReferences:[CommandQuickPickItem.fromCommand("Choose a Branch or Tag...",c.Gh.DiffWithRevisionFrom),CommandQuickPickItem.fromCommand("Choose a Stash...",c.Gh.DiffWithRevisionFrom,{stash:!0})]});if(null==r)return;await(0,ki.P0)(c.Gh.DiffWith,{repoPath:s.repoPath,lhs:{sha:r.ref,uri:s},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})}catch(e){be.Yd.error(e,"DiffWithRevisionCommand"),(0,Mt.W8)("Unable to open compare")}}};Nc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Uc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Lc(t,i,n),n})([(0,ki.WD)()],Nc);var Gc=Object.defineProperty,Hc=Object.getOwnPropertyDescriptor;let Vc=class extends ActiveEditorCommand{constructor(e){super(c.Gh.DiffWithRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);if(!s.repoPath)return void(0,Mt.bi)("Unable to open file compare");null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const r=this.container.git.getRelativePath(s,s.repoPath);let n,o,a,l;if(i?.stash){const e=`Open Changes with Stash${(0,C.vk)(c.NE.Dot,2,2)}`,t=await Wc(this.container.git.getStash(s.repoPath),`${e}${s.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${s.getFormattedFileName()}' found`,filter:e=>e.files?.some((e=>e.path===r||e.originalPath===r))??!0});if(null==t)return;n=t.ref,o=n}else{const e=`Open Changes with Branch or Tag${(0,C.vk)(c.NE.Dot,2,2)}`,t=await Bn(s.repoPath,`${e}${s.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a branch or tag to compare with",{allowEnteringRefs:!0});if(null==t)return;n=t.ref,o=(0,u.UR)(t)&&t.remote?`remotes/${n}`:n}if(null==n)return;const h=await this.container.git.getDiffStatus(s.repoPath,"HEAD",n,{filters:["R","C"]});if(null!=h){const e=h.find((e=>e.path===r));null!=e?.originalPath&&(a=this.container.git.getAbsoluteUri(e.originalPath,s.repoPath),l=`${(0,b.EZ)(e.originalPath)} (${(0,u.zL)(n)})`)}await(0,ki.P0)(c.Gh.DiffWith,{repoPath:s.repoPath,lhs:{sha:o,uri:a??s,title:l??`${(0,b.EZ)(s.fsPath)} (${(0,u.zL)(n)})`},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})}};Vc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Hc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Gc(t,i,n),n})([(0,ki.WD)()],Vc);var Qc=Object.defineProperty,qc=Object.getOwnPropertyDescriptor;let Yc=class extends ActiveEditorCommand{constructor(e){super([c.Gh.DiffWithWorking,c.Gh.DiffWithWorkingInDiffLeft,c.Gh.DiffWithWorkingInDiffRight]),this.container=e}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=Ti(t,e)))return}else t=i.uri;let r=await st.YY.fromUri(t);if(null==i.line&&(i.line=e?.selection.active.line??0),i.inDiffRightEditor)try{const e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha);r=e?.previous??r}catch(e){return be.Yd.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),void(0,Mt.W8)("Unable to open compare")}if(null==r.sha)return void s.window.showInformationMessage("File matches the working tree");if(r.sha===P.Ii)return void s.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");if(r.isUncommittedStaged){const e=await this.container.git.getStatusForFile(r.repoPath,r);if(null!=e?.indexStatus)return void await(0,ki.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{sha:P.pw,uri:r.documentUri()},rhs:{sha:"",uri:r.documentUri()},line:i.line,showOptions:i.showOptions})}t=r.toFileUri();const n=await this.container.git.getWorkingUri(r.repoPath,t);null!=n?await(0,ki.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{sha:r.sha,uri:t},rhs:{sha:"",uri:n},line:i.line,showOptions:i.showOptions}):s.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree")}};Yc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?qc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Qc(t,i,n),n})([(0,ki.WD)()],Yc);var jc=i(5640),zc=(e=>(e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree",e))(zc||{}),Kc=Object.defineProperty,Jc=Object.getOwnPropertyDescriptor;let Zc=class extends Command{constructor(e){super([c.Gh.ExternalDiff,c.Gh.ExternalDiffAll]),this.container=e}async preExecute(e,t){if(t={...t},_i(e)){const i=await e.node.commit.getPreviousSha(),s=(0,u.l3)(i)?"":i,r=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:st.YY.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:e.node.commit.isUncommittedStaged||null!=e.node.file.indexStatus,ref1:s,ref2:r}],this.execute(t)}if(function(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}(e))return t.files=[{uri:st.YY.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:null!=e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(null==t.files&&("scm-states"===e.type?t.files=e.scmResourceStates.map((e=>({uri:e.resourceUri,staged:e.resourceGroupType===zc.Index}))):"scm-groups"===e.type&&(t.files=(0,y.DZ)(e.scmResourceGroups[0].resourceStates,(e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===zc.Index}:void 0)))),e.command===c.Gh.ExternalDiffAll&&null==t.files){const e=await _l("Open All Changes (difftool)");if(null==e)return;const i=await this.container.git.getStatusForRepo(e.uri);if(null==i)return s.window.showInformationMessage("The repository doesn't have any changes");t.files=[];for(const e of i.files)"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){const t=e.type;return t===jc.qb.BOTH_MODIFIED||t===jc.qb.INDEX_MODIFIED||t===jc.qb.MODIFIED}async execute(e){e={...e};try{let t;if(null==e.files){const i=s.window.activeTextEditor;if(null==i)return;if(t=this.container.git.getBestRepository(i)?.path,!t)return;const r=i.document.uri,n=await this.container.git.getStatusForFile(t,r);if(null==n)return void s.window.showInformationMessage("The current file doesn't have any changes");e.files=[],"M"===n.indexStatus&&e.files.push({uri:n.uri,staged:!0}),"M"===n.workingTreeStatus&&e.files.push({uri:n.uri,staged:!1})}else if(t=(await this.container.git.getOrOpenRepository(e.files[0].uri))?.path,!t)return;const i=r.D.get("advanced.externalDiffTool")||await this.container.git.getDiffTool(t);if(!i){const e="View Git Docs";return void(await s.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",e)===e&&s.env.openExternal(s.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}for(const s of e.files)this.container.git.openDiffTool(t,s.uri,{ref1:s.ref1,ref2:s.ref2,staged:s.staged,tool:i})}catch(e){be.Yd.error(e,"ExternalDiffCommand"),(0,Mt.W8)("Unable to open changes in diff tool")}}};Zc=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Jc(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Kc(t,i,n),n})([(0,ki.WD)()],Zc);var Xc=Object.defineProperty,eh=Object.getOwnPropertyDescriptor,th=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?eh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Xc(t,i,n),n};const ih=12e3;let sh=class extends ActiveEditorCommand{constructor(e){super(c.Gh.GenerateCommitMessage),this.container=e}async execute(e,t,i){let n;if(null!=(i={...i}).repoPath)n=this.container.git.getRepository(i.repoPath);else{const i=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0;n=await Il(i,e,"Generate Commit Message")}if(null==n)return;const o=await this.container.git.getScmRepository(n.path);if(null!=o)try{const e=await this.container.git.getDiff(n.uri,P.pw,void 0,{includeRawDiff:!0});if(null==e?.diff)return void s.window.showInformationMessage("No staged changes to generate a commit message from.");if(!await async function(e){const t=e.get("confirm:sendToOpenAI",!1)||e.getWorkspace("confirm:sendToOpenAI",!1);if(t)return!0;const i={title:"Yes"},r={title:"Always for this Workspace"},n={title:"Always"},o={title:"No",isCloseAffordance:!0},a=await s.window.showInformationMessage("To automatically generate commit messages, the diff of your staged changes is sent to OpenAI. This may contain sensitive information.\n\nDo you want to continue?",{modal:!0},i,r,n,o);if(a===i)return!0;if(a===r)return e.storeWorkspace("confirm:sendToOpenAI",!0),!0;if(a===n)return e.store("confirm:sendToOpenAI",!0),!0;return!1}(this.container.storage))return;let t=await this.container.storage.getSecret("gitlens.openai.key");if(!t){const e=s.window.createInputBox();e.ignoreFocusOut=!0;const i=[];try{const r={iconPath:new s.ThemeIcon("link-external"),tooltip:"Open OpenAI API key page"};t=await new Promise((t=>{i.push(e.onDidHide((()=>t(void 0))),e.onDidChangeValue((t=>{!t||/sk-[a-zA-Z0-9]{32}/.test(t)?e.validationMessage=void 0:e.validationMessage="Please enter a valid OpenAI API key"})),e.onDidAccept((()=>{const i=e.value.trim();i&&/sk-[a-zA-Z0-9]{32}/.test(i)?t(i):e.validationMessage="Please enter a valid OpenAI API key"})),e.onDidTriggerButton((e=>{e===r&&s.env.openExternal(s.Uri.parse("https://platform.openai.com/account/api-keys"))}))),e.password=!0,e.title="Connect to OpenAI",e.placeholder="Please enter your OpenAI API key to use this feature",e.prompt="Enter your OpenAI API key",e.buttons=[r],e.show()}))}finally{e.dispose(),i.forEach((e=>{e.dispose()}))}if(!t)return;this.container.storage.storeSecret("gitlens.openai.key",t)}const i=o.inputBox.value,a=e.diff.substring(0,ih);let l=r.D.get("experimental.generateCommitMessagePrompt");l.endsWith(".")||(l+=".");const h={model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are an AI programming assistant tasked with writing a meaningful commit message by summarizing code changes.\n\n- Follow the user's instructions carefully & to the letter!\n- Don't repeat yourself or make anything up!\n- Minimize any other prose."},{role:"user",content:`${l}\n- Avoid phrases like "this commit", "this change", etc.`}]};i&&h.messages.push({role:"user",content:`Use "${i}" to help craft the commit message.`}),h.messages.push({role:"user",content:`Write a meaningful commit message for the following code changes:\n\n${a}`}),await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Generating commit message..."},(async()=>{const e=await(0,Ke.he)("https://api.openai.com/v1/chat/completions",{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},method:"POST",body:JSON.stringify(h)});if(!e.ok)return void(0,Mt.W8)(`Unable to generate commit message: ${e.status}: ${e.statusText}`);const s=await e.json();(0,ki.dO)(c.nA.ShowSCM);const r=s.choices[0].message.content.trim();o.inputBox.value=`${i?`${i}\n\n`:""}${r}`})),e.diff.length>ih&&s.window.showWarningMessage("The diff of the staged changes had to be truncated to 12000 characters to fit within the OpenAI's limits.")}catch(e){be.Yd.error(e,"GenerateCommitMessageCommand"),(0,Mt.W8)("Unable to generate commit message")}}};sh=th([(0,ki.WD)()],sh);let rh=class extends Command{constructor(e){super(c.Gh.ResetOpenAIKey),this.container=e}execute(){this.container.storage.deleteSecret("gitlens.openai.key"),this.container.storage.delete("confirm:sendToOpenAI"),this.container.storage.deleteWorkspace("confirm:sendToOpenAI")}};rh=th([(0,ki.WD)()],rh);var nh=Object.defineProperty,oh=Object.getOwnPropertyDescriptor;let ah=class extends Command{constructor(e){super(c.Gh.OpenOrCreateWorktreeForGHPR),this.container=e}async execute(...e){const[t]=e;let i;i="pullRequestModel"in t?t.pullRequestModel:t;const{base:{repositoryCloneUrl:{owner:r,repositoryName:n}},githubRepository:{rootUri:o},head:{repositoryCloneUrl:{url:a,owner:l},ref:c},item:{number:h}}=i;let d=this.container.git.getRepository(o);if(null==d)return void s.window.showWarningMessage(`Unable to find repository(${o.toString()}) for PR #${h}`);if(d=await d.getMainRepository(),null==d)return void s.window.showWarningMessage(`Unable to find main repository(${o.toString()}) for PR #${h}`);const p=`${l}/${c}`,m=`pr/${p}`,g=(await d.getWorktrees()).find((e=>e.branch===p||e.branch===m));if(null!=g)return void function(e,t){Ri({command:"worktree",state:{subcommand:"open",repo:e.repoPath,uri:e.uri,flags:or(t?.location)}})}(g);const f=a.toString(),[,w,v]=(0,yt.Sk)(f);let y;if([y]=await d.getRemotes({filter:e=>e.matches(w,v)}),null==y){const e=await s.window.showInformationMessage(`Unable to find a remote for '${f}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});if("Yes"!==e?.title)return;if(await Ms(d,l,f,{confirm:!1,fetch:!0,reveal:!1}),[y]=await d.getRemotes({filter:e=>e.url===f}),null==y)return}else await this.container.git.fetch(d.path,{remote:y.name});await(0,Nt.ag)();try{await sr(d,void 0,(0,u.xB)(p,d.path,{refType:"branch",name:p,remote:!0}),{createBranch:m});if(null==await this.container.git.getWorktree(d.path,(e=>e.branch===m)))return;this.container.git.setConfig(d.path,`branch.${m}.github-pr-owner-number`,`${r}#${n}#${h}`)}catch(e){be.Yd.error(e,"CreateWorktreeCommand","Unable to create worktree"),s.window.showErrorMessage(`Unable to create worktree for ${l}:${c}`)}}};ah=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?oh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&nh(t,i,n),n})([(0,ki.WD)()],ah);var lh=Object.defineProperty,ch=Object.getOwnPropertyDescriptor,hh=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?ch(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&lh(t,i,n),n};const uh=/\$\(.+?\)|\s/g,dh=Symbol("ShowLoading");let ph=class extends Command{constructor(e){super([c.Gh.GitCommands,c.Gh.GitCommandsBranch,c.Gh.GitCommandsCherryPick,c.Gh.GitCommandsMerge,c.Gh.GitCommandsRebase,c.Gh.GitCommandsReset,c.Gh.GitCommandsRevert,c.Gh.GitCommandsSwitch,c.Gh.GitCommandsTag,c.Gh.GitCommandsWorktree,c.Gh.GitCommandsWorktreeOpen]),this.container=e,this.startedWith="menu"}preExecute(e,t){switch(e.command){case c.Gh.GitCommandsBranch:t={command:"branch"};break;case c.Gh.GitCommandsCherryPick:t={command:"cherry-pick"};break;case c.Gh.GitCommandsMerge:t={command:"merge"};break;case c.Gh.GitCommandsRebase:t={command:"rebase"};break;case c.Gh.GitCommandsReset:t={command:"reset"};break;case c.Gh.GitCommandsRevert:t={command:"revert"};break;case c.Gh.GitCommandsSwitch:t={command:"switch"};break;case c.Gh.GitCommandsTag:t={command:"tag"};break;case c.Gh.GitCommandsWorktree:t={command:"worktree"};break;case c.Gh.GitCommandsWorktreeOpen:t={command:"worktree",state:{subcommand:"open"}}}return this.execute(t)}async execute(e){const t=new PickCommandStep(this.container,e),i=null!=e?.command?t.find(e.command):void 0;let s,r;for(this.startedWith=null!=i?"command":"menu",r=null==i?t:await this.showLoadingIfNeeded(i,this.getCommandStep(i,t)),!0===r?.ignoreFocusOut&&(r.ignoreFocusOut=void 0);null!=r;)if(r!==t||null==i)if(s&&null==r.ignoreFocusOut&&(r.ignoreFocusOut=!0),Vr(r))r=await this.showPickStep(r,t),!0===r?.ignoreFocusOut&&(s=!0);else if(Hr(r))r=await this.showInputStep(r,t),!0===r?.ignoreFocusOut&&(s=!0);else{if(!Gr(r))break;r=await this.showCustomStep(r,t),!0===r?.ignoreFocusOut&&(s=!0)}else r=await this.getCommandStep(i,t);e?.completion?.fulfill()}async showLoadingIfNeeded(e,t){const i=await Promise.race([t,new Promise((e=>setTimeout(e,250,dh)))]);if(i!==dh)return i;const r=s.window.createQuickPick();r.ignoreFocusOut=!1;const n=[];let o;try{return await new Promise((async i=>{n.push(r.onDidHide((()=>i(o)))),r.title=e.title,r.placeholder="Loading...",r.busy=!0,r.enabled=!1,r.show(),o=await t,r.hide()}))}finally{r.dispose(),n.forEach((e=>{e.dispose()}))}}getButtons(e,t){const i=[];if(null!=e){if(null!=e.buttons)return i.push(...e.buttons),i;i.push(s.QuickInputButtons.Back),null!=e.additionalButtons&&i.push(...e.additionalButtons)}if(t?.canConfirm)if(t.canSkipConfirm){const e=new ms(t.confirm(),(async()=>{if(null==t?.skipConfirmKey)return;const e=r.D.get("gitCommands.skipConfirmations")??[],i=e.indexOf(t.skipConfirmKey);-1!==i?e.splice(i,1):e.push(t.skipConfirmKey),await r.D.updateEffective("gitCommands.skipConfirmations",e)}));i.push(e)}else i.push(ps);return i}async getCommandStep(e,t){t.setCommand(e,"command");const i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);const s=await e.next(t);if(!s.done)return null!=i&&(i.value=""),s.value}async showCustomStep(e,t){const i=await e.show(e);if(i!==Qr){if(!Ji(i))return this.nextStep(t.command,i);switch(i){case Ki.Back:return await(t?.command?.previous())??t;case Ki.Noop:return t.command?.retry();case Ki.Cancel:default:return}}}async showInputStep(e,t){const i=s.window.createInputBox();i.ignoreFocusOut=!r.D.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);const n=[];try{return await new Promise((async r=>{const o=async()=>{i.value="",null!=t.command&&(i.busy=!0,r(await t.command.previous()??t))},a={left:{onDidPressKey:o}};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(const t of e.keys)a[t]={onDidPressKey:t=>e.onDidPressKey(i,t)};const l=this.container.keyboard.createScope(a);if(l.start(),n.push(l,i.onDidHide((()=>r(void 0))),i.onDidTriggerButton((async n=>{if(n!==s.QuickInputButtons.Back){if(n!==ps){if(n instanceof ToggleQuickInputButton&&null!=n.onDidClick){const s=n.onDidClick(i);return i.buttons=this.getButtons(e,t.command),!0===await s?void r(t.command?.retry()):void((0,Nt.tI)(s)&&(i.buttons=this.getButtons(e,t.command)))}if(null!=e.onDidClickButton){const s=e.onDidClickButton(i,n);i.buttons=this.getButtons(e,t.command),!0===await s&&r(t.command?.retry())}}}else o()})),i.onDidChangeValue((async t=>{if(null!=l&&(0!==t.length?await l.pause(["left","right"]):await l.resume()),null==e.validate)return;const[,s]=await e.validate(t);i.validationMessage=s})),i.onDidAccept((async()=>{r(await this.nextStep(t.command,i.value,i))}))),i.buttons=this.getButtons(e,t.command),i.title=e.title,i.placeholder=e.placeholder,i.prompt=e.prompt,null!=e.value&&(i.value=e.value,null!=e.validate)){const[t,r]=await e.validate(e.value);t||null==r||(i.validationMessage={severity:s.InputBoxValidationSeverity.Error,message:r})}if(null!=t.command&&e===t&&t.setCommand(void 0,"menu"),i.show(),null!=e.value)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}}))}finally{i.dispose(),n.forEach((e=>{e.dispose()}))}}async showPickStep(e,t){const i=!r.D.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1),n=e.ignoreFocusOut,o=s.window.createQuickPick();o.ignoreFocusOut=i;const a=[];try{return await new Promise((r=>{async function l(){o.value="",null!=t.command&&(o.busy=!0,r(await t.command.previous()??t))}async function c(){if(null!=e.onDidLoadMore){o.busy=!0;try{const t=await(e.onDidLoadMore?.(o));let i=-1;if(0!==o.activeItems.length){const e=o.activeItems[0];i=o.items.indexOf(e),Xi(e)&&i--}o.items=e.items=t,i&&(o.activeItems=[o.items[i]])}finally{o.busy=!1}}}const h={left:{onDidPressKey:l}};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(const t of e.keys)h[t]={onDidPressKey:t=>e.onDidPressKey(o,t)};const u=this.container.keyboard.createScope(h);u.start();let d=!1;a.push(u,o.onDidHide((()=>r(void 0))),o.onDidTriggerItemButton((async i=>{!0===await(e.onDidClickItemButton?.(o,i.button,i.item))&&r(await this.nextStep(t.command,[i.item],o))})),o.onDidTriggerButton((async i=>{if(i!==s.QuickInputButtons.Back){if(i!==ps)if(i!==ts){if(i instanceof ToggleQuickInputButton&&null!=i.onDidClick){let s;if(null==t.command&&0!==o.activeItems.length){const e=o.activeItems[0];qr(e)&&(s=e)}const n=i.onDidClick(o);return o.buttons=this.getButtons(null!=s?s.value:e,s??t.command),!0===await n?void r(t.command?.retry()):void((0,Nt.tI)(n)&&(o.buttons=this.getButtons(null!=s?s.value:e,s??t.command)))}if(null!=e.onDidClickButton){const s=e.onDidClickButton(o,i);o.buttons=this.getButtons(e,t.command),!0===await s&&r(t.command?.retry())}}else c()}else l()})),o.onDidChangeValue((async s=>{if(null!=u&&(0!==s.length?await u.pause(["left","right"]):await u.resume()),null!=e.onDidChangeValue){if(await e.onDidChangeValue(o))return}if(0===s.length||o.ignoreFocusOut?0===s.length&&o.ignoreFocusOut&&!i&&(o.ignoreFocusOut=i,e.ignoreFocusOut=n):(o.ignoreFocusOut=!0,e.ignoreFocusOut=!0),!d){if(o.canSelectMany&&" "===s)return o.value="",void(o.selectedItems=o.selectedItems.length===o.items.length?[]:o.items);if(s.endsWith(" ")){if(o.canSelectMany&&0!==o.selectedItems.length)return;let i;if(null==t.command){const e=t.find(o.value.trim(),!0);if(null==e)return;t.setCommand(e,this.startedWith)}else{const t=o.value.trim().toLowerCase(),s=e.items.find((e=>e.label.replace(uh,"").toLowerCase()===t));if(null==s)return;i=[s]}return void r(await this.nextStep(t.command,i,o))}}if(o.canSelectMany||null==t.command||0===s.trim().length||!d&&0!==o.activeItems.length)d=!1;else{if(null==e.onValidateValue)return;d=await e.onValidateValue(o,s.trim(),e.items)}d||o.items.length===e.items.length||(o.items=e.items)})),o.onDidChangeActive((()=>{if(null!=t.command||0===o.activeItems.length)return;const e=o.activeItems[0];qr(e)&&(o.buttons=this.getButtons(void 0,e))})),o.onDidChangeSelection((t=>{o.canSelectMany&&(0===t.length||o.ignoreFocusOut?0===t?.length&&o.ignoreFocusOut&&!i&&(o.ignoreFocusOut=i,e.ignoreFocusOut=n):(o.ignoreFocusOut=!0,e.ignoreFocusOut=!0))})),o.onDidAccept((async()=>{let i=o.selectedItems;if(0===i.length){if(!o.canSelectMany||0===o.activeItems.length){const i=o.value.trim();if(0===i.length&&!e.allowEmpty)return;return null==e.onDidAccept?void(e.allowEmpty&&r(await this.nextStep(t.command,[],o))):(o.busy=!0,await e.onDidAccept(o)&&r(await this.nextStep(t.command,i,o)),void(o.busy=!1))}i=o.activeItems}if(1===i.length){const[e]=i;if(Xi(e))switch(e.directive){case Ki.Cancel:return void r(void 0);case Ki.Back:return void l();case Ki.LoadMore:return void c();case Ki.StartPreviewTrial:return gv.instance.subscription.startPreviewTrial(),void r(void 0);case Ki.RequiresVerification:return gv.instance.subscription.resendVerification(),void r(void 0);case Ki.ExtendTrial:return gv.instance.subscription.loginOrSignUp(),void r(void 0);case Ki.RequiresPaidSubscription:return gv.instance.subscription.purchase(),void r(void 0)}}if(null==t.command){const[e]=i;if(!qr(e))return;t.setCommand(e,this.startedWith)}if(!o.canSelectMany&&null!=e.onDidAccept){o.busy=!0;const t=await e.onDidAccept(o);if(o.busy=!1,!t)return}r(await this.nextStep(t.command,i,o))}))),o.title=e.title,o.placeholder=e.placeholder,o.matchOnDescription=Boolean(e.matchOnDescription),o.matchOnDetail=Boolean(e.matchOnDetail),o.canSelectMany=Boolean(e.multiselect),o.items=e.items,o.canSelectMany?(o.selectedItems=e.selectedItems??o.items.filter((e=>e.picked)),o.activeItems=o.selectedItems):o.activeItems=e.selectedItems??o.items.filter((e=>e.picked)),null!=t.command&&e===t&&t.setCommand(void 0,"menu"),o.buttons=this.getButtons(e,t.command);const p=e.selectValueWhenShown??!0;if(null!=e.value&&p&&(o.value=e.value),o.show(),null==e.value||p||(o.value=e.value),null!=e.value&&p)try{o._onDidChangeValueEmitter?.fire(o.value)}catch{}}))}finally{o.dispose(),a.forEach((e=>{e.dispose()}))}}};hh([(0,d.cM)({args:!1,scoped:!0,singleLine:!0,timed:!1})],ph.prototype,"execute",1),ph=hh([(0,ki.WD)()],ph);var mh=Object.defineProperty,gh=Object.getOwnPropertyDescriptor;let fh=class extends Command{constructor(e){super(c.Gh.InviteToLiveShare),this.container=e}static getMarkdownCommandArgs(e){const t=void 0===e||"string"==typeof e?{email:e}:e;return super.getMarkdownCommandArgsCore(c.Gh.InviteToLiveShare,t)}preExecute(e,t){return function(e){return"viewItem"===e.type&&rt.V.is(e.node.contributor)}(e)?((t={...t}).email=e.node.contributor.email,this.execute(t)):this.execute(t)}async execute(e){if(e?.email){const t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};fh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?gh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&mh(t,i,n),n})([(0,ki.WD)()],fh);var wh=Object.defineProperty,vh=Object.getOwnPropertyDescriptor,yh=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?vh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&wh(t,i,n),n};let bh=class extends Command{constructor(e){super(c.Gh.EnableDebugLogging),this.container=e}async execute(){await r.D.updateEffective("outputLevel",te.M7.Debug)}};bh=yh([(0,ki.WD)()],bh);let Ch=class extends Command{constructor(e){super(c.Gh.DisableDebugLogging),this.container=e}async execute(){await r.D.updateEffective("outputLevel",te.M7.Errors)}};Ch=yh([(0,ki.WD)()],Ch);var Ah=Object.defineProperty,Ph=Object.getOwnPropertyDescriptor;let Dh=class extends ActiveEditorCommand{constructor(e){super(c.Gh.OpenAssociatedPullRequestOnRemote),this.container=e}async execute(e,t){if(null==e)return;if(null==(t=Ti(t,e)))return;const i=await st.YY.fromUri(t),s=e.selection.active.line;if(!(s<0))try{const e=await this.container.git.getBlameForLine(i,s);if(null==e)return;await(0,ki.P0)(c.Gh.OpenPullRequestOnRemote,{clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath})}catch(e){be.Yd.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${s})`)}}};Dh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ph(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ah(t,i,n),n})([(0,ki.WD)()],Dh);var Sh=Object.defineProperty,kh=Object.getOwnPropertyDescriptor;let Rh=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenBranchesOnRemote,c.Gh.Deprecated_OpenBranchesInRemote,c.Gh.CopyRemoteBranchesUrl]),this.container=e}preExecute(e,t){return Oi(e)&&(t={...t,remote:e.node.remote.name}),e.command===c.Gh.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const s=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,r=(await Il(s,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(r)try{await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Branches},repoPath:r,remote:i?.remote,clipboard:i?.clipboard})}catch(e){be.Yd.error(e,"OpenBranchesOnRemoteCommand"),(0,Mt.W8)("Unable to open branches on remote provider")}}};Rh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?kh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Sh(t,i,n),n})([(0,ki.WD)()],Rh);var Fh=Object.defineProperty,$h=Object.getOwnPropertyDescriptor;let Th=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenBranchOnRemote,c.Gh.Deprecated_OpenBranchInRemote,c.Gh.CopyRemoteBranchUrl]),this.container=e}preExecute(e,t){return xi(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),e.command===c.Gh.CopyRemoteBranchUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const s=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,r=(await Il(s,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(r){i={...i};try{if(null==i.branch){const e=await Bn(r,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:On.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof CommandQuickPickItem)return;i.branch=e.ref}await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Branch,branch:i.branch||"HEAD"},repoPath:r,remote:i.remote,clipboard:i.clipboard})}catch(e){be.Yd.error(e,"OpenBranchOnRemoteCommand"),(0,Mt.W8)("Unable to open branch on remote provider")}}}};Th=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?$h(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Fh(t,i,n),n})([(0,ki.WD)()],Th);var xh=Object.defineProperty,Ih=Object.getOwnPropertyDescriptor;let _h=class extends ActiveEditorCommand{constructor(e){super(c.Gh.OpenCurrentBranchOnRemote),this.container=e}async execute(e,t){const i=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,s=await Il(i,e,"Open Current Branch Name");if(null!=s)try{const e=await s.getBranch();e?.name&&await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Branch,branch:e.name||"HEAD"},repoPath:s.path})}catch(e){be.Yd.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,Mt.W8)("Unable to open branch on remote provider")}}};_h=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ih(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&xh(t,i,n),n})([(0,ki.WD)()],_h);var Oh=Object.defineProperty,Bh=Object.getOwnPropertyDescriptor;let Eh=class extends Command{constructor(e){super(c.Gh.OpenChangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){const t=await _l("Open All Changed Files");if(null==t)return;const i=await this.container.git.getStatusForRepo(t.uri);if(null==i)return void s.window.showWarningMessage("Unable to open changed files");e.uris=(0,y.DZ)(i.files,(e=>"D"!==e.status?e.uri:void 0))}(0,Pi.$_)(e.uris)}catch(e){be.Yd.error(e,"OpenChangedFilesCommand"),(0,Mt.W8)("Unable to open all changed files")}}};Eh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Bh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Oh(t,i,n),n})([(0,ki.WD)()],Eh);var Mh=Object.defineProperty,Wh=Object.getOwnPropertyDescriptor;let Lh=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenCommitOnRemote,c.Gh.Deprecated_OpenCommitInRemote,c.Gh.CopyRemoteCommitUrl]),this.container=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(c.Gh.OpenCommitOnRemote,t)}preExecute(e,t){let i=e.uri;if(Ii(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return function(e){return"timeline-item:git"===e.type}(e)&&(t={sha:e.item.ref},i=e.uri),e.command===c.Gh.CopyRemoteCommitUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let s=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0;const r=(await Il(s,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(r){null==s&&(s=st.YY.fromRepoPath(r)),i={...i};try{if(null==i.sha){const t=null==e?0:e.selection.active.line;if(t<0)return;const r=await this.container.git.getBlameForLine(s,t,e?.document);if(null==r)return void(0,Mt.zk)("Unable to open commit on remote provider");i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??P.Ii:r.commit.sha}await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Commit,sha:i.sha},repoPath:r,clipboard:i.clipboard})}catch(e){be.Yd.error(e,"OpenCommitOnRemoteCommand"),(0,Mt.W8)("Unable to open commit on remote provider")}}}};Lh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Wh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Mh(t,i,n),n})([(0,ki.WD)()],Lh);var Uh=Object.defineProperty,Nh=Object.getOwnPropertyDescriptor;let Gh=class extends Command{constructor(e){super([c.Gh.OpenComparisonOnRemote,c.Gh.CopyRemoteComparisonUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof ResultsCommitsNode&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1,ref2:e.node.ref2}),e.command===c.Gh.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(null!=e?.repoPath&&null!=e.ref1&&null!=e.ref2)try{await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Comparison,base:e.ref1,compare:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){be.Yd.error(e,"OpenComparisonOnRemoteCommand"),(0,Mt.W8)("Unable to open comparison on remote provider")}}};Gh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Nh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Uh(t,i,n),n})([(0,ki.WD)()],Gh);var Hh=Object.defineProperty,Vh=Object.getOwnPropertyDescriptor;let Qh=class extends Command{constructor(e){super(c.Gh.OpenFileFromRemote),this.container=e}async execute(){let e=await s.env.clipboard.readText();try{s.Uri.parse(e,!0)}catch{e=void 0}const t=await s.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:e,ignoreFocusOut:!0});if(null==t||0===t.length)return;let i,r=await this.container.git.getLocalInfoFromRemoteUri(s.Uri.parse(t));if(null==r){if(r=await this.container.git.getLocalInfoFromRemoteUri(s.Uri.parse(t),{validate:!1}),null==r)return void s.window.showWarningMessage("Unable to parse the provided remote url.");const e="Open File...";if(await s.window.showWarningMessage("Unable to find a workspace folder that matches the provided remote url.",e)!==e)return}r.startLine&&(i=r.endLine?new s.Range(r.startLine-1,0,r.endLine,0):new s.Range(r.startLine-1,0,r.startLine-1,0));try{await(0,Pi.bM)(r.uri,{selection:i,rethrow:!0})}catch{const e=await s.window.showOpenDialog({title:"Open local file",defaultUri:r.uri,canSelectMany:!1,canSelectFolders:!1});if(null==e||0===e.length)return;await(0,Pi.bM)(e[0])}}};Qh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Vh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Hh(t,i,n),n})([(0,ki.WD)()],Qh);var qh=Object.defineProperty,Yh=Object.getOwnPropertyDescriptor;let jh=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenFileOnRemote,c.Gh.Deprecated_OpenFileInRemote,c.Gh.CopyRemoteFileUrl,c.Gh.CopyRemoteFileUrlWithoutRange,c.Gh.OpenFileOnRemoteFrom,c.Gh.CopyRemoteFileUrlFrom]),this.container=e}async preExecute(e,t){let i=e.uri;if(e.command===c.Gh.CopyRemoteFileUrlWithoutRange&&(t={...t,range:!1}),Ii(e)?(t={...t,range:!1},e.command===c.Gh.CopyRemoteFileUrl||e.command===c.Gh.CopyRemoteFileUrlWithoutRange||e.command===c.Gh.CopyRemoteFileUrlFrom?t.sha=e.node instanceof StatusFileNode?void 0:e.node.commit.sha:xi(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),(e.command===c.Gh.CopyRemoteFileUrl||e.command===c.Gh.CopyRemoteFileUrlWithoutRange||e.command===c.Gh.CopyRemoteFileUrlFrom)&&null==(t={...t,clipboard:!0}).sha){const i=Ti(e.uri,e.editor);if(null!=i){const e=await st.YY.fromUri(i);if(e.repoPath)if(null==e.sha){const i=await this.container.git.getCommitForFile(e.repoPath,e,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}return e.command!==c.Gh.OpenFileOnRemoteFrom&&e.command!==c.Gh.CopyRemoteFileUrlFrom||(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const r=await st.YY.fromUri(t);if(r.repoPath){i={range:!0,...i};try{let n=await this.container.git.getRemotesWithProviders(r.repoPath);const o=i.range&&null!=e&&En.n.equals(e.document.uri,t)?new s.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+(0===e.selection.end.character?0:1)})):void 0;let a=i.sha??r.sha;if(null==i.branchOrTag&&null!=a&&!(0,u.D3)(a)&&0!==n.length){const[e,t]=(0,C.pW)(a,"/");if(null!=t){const s=n.find((t=>t.name===e));null!=s&&(i.branchOrTag=t,a=void 0,n=[s])}}if(null==i.sha&&null==i.branchOrTag||i.pickBranchOrTag){let e;if(i.pickBranchOrTag||(e=await this.container.git.getBranch(r.repoPath)),null==e?.upstream){const e=await Bn(r.repoPath,i.clipboard?`Copy Remote File URL From${(0,C.vk)(c.NE.Dot,2,2)}${r.relativePath}`:`Open File on Remote From${(0,C.vk)(c.NE.Dot,2,2)}${r.relativePath}`,`Choose a branch or tag to ${i.clipboard?"copy":"open"} the file revision from`,{allowEnteringRefs:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:i.branchOrTag,sort:{branches:{current:!0,orderBy:te.Vz.DateDesc},tags:{orderBy:te.RV.DateDesc}}});if(null==e)return;if("branch"===e.refType){if(e.remote){i.branchOrTag=(0,p.S3)(e.name);const t=(0,p.Lo)(e.name),s=n.find((e=>e.name===t));null!=s&&(n=[s])}else i.branchOrTag=e.name;a=void 0}else"tag"===e.refType?(i.branchOrTag=e.ref,a=void 0):(i.branchOrTag=void 0,a=e.ref)}else i.branchOrTag=e.name}await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:null==a?at.J.File:at.J.Revision,branchOrTag:i.branchOrTag??"HEAD",fileName:r.relativePath,range:o,sha:a??void 0},repoPath:r.repoPath,remotes:n,clipboard:i.clipboard})}catch(e){be.Yd.error(e,"OpenFileOnRemoteCommand"),(0,Mt.W8)("Unable to open file on remote provider")}}}};jh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Yh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&qh(t,i,n),n})([(0,ki.WD)()],jh);var zh=Object.defineProperty,Kh=Object.getOwnPropertyDescriptor;let Jh=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenFileAtRevision,c.Gh.OpenBlamePriorToChange]),this.container=e}static getMarkdownCommandArgs(e,t,i){let r;if(e instanceof s.Uri){r={revisionUri:e,line:i,annotationType:t}}else r=e;return super.getMarkdownCommandArgsCore(c.Gh.OpenFileAtRevision,r)}async preExecute(e,t){if(e.command===c.Gh.OpenBlamePriorToChange){if(null==(t={...t,annotationType:te.VP.Blame}).revisionUri&&null!=e.editor){const i=e.editor.selection.active.line;if(i>=0)try{const s=await st.YY.fromUri(e.editor.document.uri),r=await this.container.git.getBlameForLine(s,i);if(null!=r)if(r.commit.isUncommitted){const e=await r.commit.getPreviousComparisonUrisForLine(i);if(null==e?.previous)return void(0,Mt.RR)(r.commit);t.revisionUri=this.container.git.getRevisionUri(e.previous)}else{if(null==(null!=r?await(r?.commit.getPreviousSha()):void 0))return void(0,Mt.RR)(r.commit);t.revisionUri=this.container.git.getRevisionUri(r.commit.getGitUri(!0))}}catch(e){be.Yd.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri)return void(0,Mt.W8)("Unable to open blame")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){const e=this.container.git.getLogForFile(s.repoPath,s.fsPath).then((e=>e??(s.sha?this.container.git.getLogForFile(s.repoPath,s.fsPath,{ref:s.sha}):void 0))),t=`Open ${i.annotationType===te.VP.Blame?"Blame":"File"} at Revision${(0,C.vk)(c.NE.Dot,2,2)}`,r=await Mc(e,`${t}${s.getFormattedFileName({suffix:s.sha?`:${(0,u.zL)(s.sha)}`:void 0,truncateTo:c.d$-t.length})}`,`Choose a commit to ${i.annotationType===te.VP.Blame?"blame":"open"} the file revision from`,{picked:s.sha,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await Fs(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!1})},showOtherReferences:[CommandQuickPickItem.fromCommand("Choose a Branch or Tag...",c.Gh.OpenFileAtRevisionFrom),CommandQuickPickItem.fromCommand("Choose a Stash...",c.Gh.OpenFileAtRevisionFrom,{stash:!0})]});if(null==r?.file)return;return void await Fs(r.file,r,{annotationType:i.annotationType,line:i.line,...i.showOptions})}await Fs(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){be.Yd.error(e,"OpenFileAtRevisionCommand"),(0,Mt.W8)("Unable to open file at revision")}}};Jh=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Kh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&zh(t,i,n),n})([(0,ki.WD)()],Jh);var Zh=Object.defineProperty,Xh=Object.getOwnPropertyDescriptor;let eu=class extends ActiveEditorCommand{constructor(e){super(c.Gh.OpenFileAtRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);if(s.repoPath){if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference)if(i?.stash){const e=this.container.git.getRelativePath(s,s.repoPath),t=`Open Changes with Stash${(0,C.vk)(c.NE.Dot,2,2)}`,r=await Wc(this.container.git.getStash(s.repoPath),`${t}${s.getFormattedFileName({truncateTo:c.d$-t.length})}`,"Choose a stash to compare with",{filter:t=>t.files?.some((t=>t.path===e||t.originalPath===e))??!0});if(null==r)return;i.reference=r}else{const e=`Open File at Branch or Tag${(0,C.vk)(c.NE.Dot,2,2)}`,t=await Bn(s.repoPath,`${e}${s.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a branch or tag to open the file revision from",{allowEnteringRefs:!0,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{const[r]=t.activeItems;null!=r&&await Fs(this.container.git.getRevisionUri(r.ref,s.fsPath,s.repoPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!1})}});if(null==t)return;i.reference=t}await Fs(this.container.git.getRevisionUri(i.reference.ref,s.fsPath,s.repoPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}else(0,Mt.bi)("Unable to open file revision")}};eu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xh(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Zh(t,i,n),n})([(0,ki.WD)()],eu);var tu=Object.defineProperty,iu=Object.getOwnPropertyDescriptor;let su=class extends Command{constructor(e){super([c.Gh.OpenOnRemote,c.Gh.Deprecated_OpenInRemote]),this.container=e}async execute(e){if(null==e?.resource)return;let t="remotes"in e?e.remotes:await this.container.git.getRemotesWithProviders(e.repoPath);if(null!=e.remote){const i=t.filter((t=>t.name===e.remote));t.length>0&&(t=i)}try{let i=function(t){return e?.clipboard?`Copy Link to ${t} for ${n}`:`Open Branch on ${n}`};if(e.resource.type===at.J.Branch){const[i,s]=(0,C.pW)(e.resource.branch,"/");if(null!=s){const r=t.find((e=>e.name===i));null!=r&&(e.resource.branch=s,t=[r])}}else if(e.resource.type===at.J.Revision){const{commit:t,fileName:i}=e.resource;if(null!=t){const s=await t.findFile(i);e.resource.sha="D"===s?.status?await this.container.git.resolveReference(t.repoPath,`${t.sha}^`,i):t.sha}}const r=ot.ss.getHighlanderProviders(t),n=r?.length?r[0].name:"Remote",o={autoPick:"default",clipboard:e.clipboard,setDefault:!0};let a,l="Choose which remote to "+(e.clipboard?"copy the link for":"open on");switch(e.resource.type){case at.J.Branch:a=`${i("Branch")}${(0,C.vk)(c.NE.Dot,2,2)}${e.resource.branch}`;break;case at.J.Branches:a=i("Branches");break;case at.J.Commit:a=`${i("Commit")}${(0,C.vk)(c.NE.Dot,2,2)}${(0,u.zL)(e.resource.sha)}`;break;case at.J.Comparison:a=`${i("Comparison")}${(0,C.vk)(c.NE.Dot,2,2)}${(0,u.oI)(e.resource.base,e.resource.compare,e.resource.notation??"...")}`;break;case at.J.CreatePullRequest:o.autoPick=!0,o.setDefault=!1,a=`${e.clipboard?`Copy Create Pull Request Link for ${n}`:`Create Pull Request on ${n}`}${(0,C.vk)(c.NE.Dot,2,2)}${e.resource.base?.branch?(0,u.oI)(e.resource.base.branch,e.resource.compare.branch,"..."):e.resource.compare.branch}`,l="Choose which remote to "+(e.clipboard?"copy the create pull request link for":"create the pull request on");break;case at.J.File:a=`${i("File")}${(0,C.vk)(c.NE.Dot,2,2)}${e.resource.fileName}`;break;case at.J.Repo:a=i("Repository");break;case at.J.Revision:a=`${i("File")}${(0,C.vk)(c.NE.Dot,2,2)}${(0,u.zL)(e.resource.sha)}${(0,C.vk)(c.NE.Dot,1,1)}${e.resource.fileName}`}const h=await async function(e,t,i,r,n){const{autoPick:o,clipboard:a,setDefault:l}={autoPick:!1,clipboard:!1,setDefault:!0,...n};let c;if(0===r.length)c=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===o&&r.length>1){const e=r.find((e=>e.default));null!=e&&(r=[e])}c=r.map((e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,a,l?[cs]:void 0)))}if(o&&1===r.length)return c[0];const h=s.window.createQuickPick();h.ignoreFocusOut=(0,Pi.hE)();const u=[];try{const i=await new Promise((i=>{u.push(h.onDidHide((()=>i(void 0))),h.onDidAccept((()=>{0!==h.activeItems.length&&i(h.activeItems[0])})),h.onDidTriggerItemButton((async e=>{e.button===cs&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))}))),h.title=e,h.placeholder=t,h.matchOnDetail=!0,h.items=c,h.show()}));if(null==i)return;return i}finally{h.dispose(),u.forEach((e=>{e.dispose()}))}}(a,l,e.resource,t,o);await(h?.execute())}catch(e){be.Yd.error(e,"OpenOnRemoteCommand"),(0,Mt.W8)("Unable to open in remote provider")}}};su=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?iu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&tu(t,i,n),n})([(0,ki.WD)()],su);var ru=Object.defineProperty,nu=Object.getOwnPropertyDescriptor;let ou=class extends Command{constructor(e){super([c.Gh.OpenIssueOnRemote,c.Gh.CopyRemoteIssueUrl,c.Gh.OpenAutolinkUrl,c.Gh.CopyAutolinkUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof AutolinkedItemNode&&(t={...t,issue:{url:e.node.item.url},clipboard:e.command===c.Gh.CopyRemoteIssueUrl||e.command===c.Gh.CopyAutolinkUrl}),this.execute(t)}async execute(e){e.clipboard?await s.env.clipboard.writeText(e.issue.url):s.env.openExternal(s.Uri.parse(e.issue.url))}};ou=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?nu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ru(t,i,n),n})([(0,ki.WD)()],ou);var au=Object.defineProperty,lu=Object.getOwnPropertyDescriptor;let cu=class extends Command{constructor(e){super([c.Gh.OpenPullRequestOnRemote,c.Gh.CopyRemotePullRequestUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof vo&&(t={...t,pr:{url:e.node.pullRequest.url},clipboard:e.command===c.Gh.CopyRemotePullRequestUrl}),this.execute(t)}async execute(e){if(null==e?.pr){if(null==e?.repoPath||null==e?.ref)return;const t=await this.container.git.getBestRemoteWithRichProvider(e.repoPath);if(null==t?.provider)return;const i=await this.container.git.getPullRequestForCommit(e.ref,t.provider);if(null==i)return;(e={...e}).pr=i}e.clipboard?await s.env.clipboard.writeText(e.pr.url):s.env.openExternal(s.Uri.parse(e.pr.url))}};cu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?lu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&au(t,i,n),n})([(0,ki.WD)()],cu);var hu=Object.defineProperty,uu=Object.getOwnPropertyDescriptor;let du=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenRepoOnRemote,c.Gh.Deprecated_OpenRepoInRemote,c.Gh.CopyRemoteRepositoryUrl]),this.container=e}preExecute(e,t){return Oi(e)&&(t={...t,remote:e.node.remote.name}),e.command===c.Gh.CopyRemoteRepositoryUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const s=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,r=(await Il(s,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(r)try{await(0,ki.P0)(c.Gh.OpenOnRemote,{resource:{type:at.J.Repo},repoPath:r,remote:i?.remote,clipboard:i?.clipboard})}catch(e){be.Yd.error(e,"OpenRepoOnRemoteCommand"),(0,Mt.W8)("Unable to open repository on remote provider")}}};du=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?uu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&hu(t,i,n),n})([(0,ki.WD)()],du);var pu=Object.defineProperty,mu=Object.getOwnPropertyDescriptor;let gu=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenRevisionFile,c.Gh.OpenRevisionFileInDiffLeft,c.Gh.OpenRevisionFileInDiffRight]),this.container=e}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri)if(s?.sha){const e=await this.container.git.getCommit(s.repoPath,s.sha);i.revisionUri="D"===e?.file?.status?this.container.git.getRevisionUri(await e.getPreviousSha()??P.Ii,e.file,e.repoPath):this.container.git.getRevisionUri(s)}else i.revisionUri=this.container.git.getRevisionUri(s);await Fs(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){be.Yd.error(e,"OpenRevisionFileCommand"),(0,Mt.W8)("Unable to open file revision")}}};gu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?mu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&pu(t,i,n),n})([(0,ki.WD)()],gu);var fu=Object.defineProperty,wu=Object.getOwnPropertyDescriptor;let vu=class extends ActiveEditorCommand{constructor(e){super([c.Gh.OpenWorkingFile,c.Gh.OpenWorkingFileInDiffLeft,c.Gh.OpenWorkingFileInDiffRight]),this.container=e}async execute(e,t,i){null==(i={...i}).line&&(i.line=e?.selection.active.line);try{if(null==i.uri){if(null==(t=Ti(t,e)))return}else t=i.uri;if(i.uri=await st.YY.fromUri(t),(0,st.uy)(i.uri)&&i.uri.sha){const e=await this.container.git.getWorkingUri(i.uri.repoPath,i.uri);if(void 0===e)return void s.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");i.uri=new st.YY(e,i.uri.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new s.Range(i.line,0,i.line,0));const r=await(0,Pi.GR)(i.uri,{...i.showOptions,throwOnError:!0});if(void 0===i.annotationType)return;await this.container.fileAnnotations.show(r,i.annotationType,{selection:{line:i.line}})}catch(e){be.Yd.error(e,"OpenWorkingFileCommand"),(0,Mt.W8)("Unable to open working file")}}};vu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?wu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&fu(t,i,n),n})([(0,ki.WD)()],vu);var yu=Object.defineProperty,bu=Object.getOwnPropertyDescriptor,Cu=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?bu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&yu(t,i,n),n};let Au=class extends Command{constructor(e){super(c.Gh.DisableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};Au=Cu([(0,ki.WD)()],Au);let Pu=class extends Command{constructor(e){super(c.Gh.EnableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};Pu=Cu([(0,ki.WD)()],Pu);var Du=Object.defineProperty,Su=Object.getOwnPropertyDescriptor;let ku=class extends Command{constructor(e){super(c.Gh.RefreshHover),this.container=e}async execute(){await(0,ki.dO)(c.nA.EditorShowHover)}};ku=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Su(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Du(t,i,n),n})([(0,ki.WD)()],ku);var Ru=Object.defineProperty,Fu=Object.getOwnPropertyDescriptor,$u=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Fu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ru(t,i,n),n};let Tu=class extends Command{constructor(e){super(c.Gh.ConnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=ot.ss.is(e)?{remote:e.id,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(c.Gh.ConnectRemoteProvider,t)}preExecute(e,t){return Oi(e)&&(t={...t,remote:e.node.remote.id,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,s;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote();null==i?.provider||await i.provider.isConnected()||e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,ye.Ps)(e),s=i.path}else{const i=await Ol(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i?.item)return;s=i.repoPath,t=e.get(i.item)}}else if(null==e?.remote){if(s=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(s,{includeDisconnected:!0}),null==t)return!1}else if(s=e.repoPath,i=await this.container.git.getRemotesWithProviders(s),t=i.find((t=>t.id===e.remote)),!t?.hasRichProvider())return!1;const r=await t.provider.connect();return r&&!(i??await this.container.git.getRemotesWithProviders(s)).some((e=>e.default))&&await t.setAsDefault(!0),r}};Tu=$u([(0,ki.WD)()],Tu);let xu=class extends Command{constructor(e){super(c.Gh.DisconnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=ot.ss.is(e)?{remote:e.id,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(c.Gh.DisconnectRemoteProvider,t)}preExecute(e,t){return Oi(e)&&(t={...t,remote:e.node.remote.id,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote(!0);null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let s;[s,t]=(0,ye.Ps)(e),i=s.path}else{const s=await Ol(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==s?.item)return;i=s.repoPath,t=e.get(s.item)}}else if(null==e?.remote){if(i=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(i,{includeDisconnected:!1}),null==t)return}else if(i=e.repoPath,t=(await this.container.git.getRemotesWithProviders(i)).find((t=>t.id===e.remote)),!t?.hasRichProvider())return;return t.provider.disconnect()}};xu=$u([(0,ki.WD)()],xu);var Iu=Object.defineProperty,_u=Object.getOwnPropertyDescriptor,Ou=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?_u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Iu(t,i,n),n};let Bu=class extends Command{constructor(e){super(c.Gh.FetchRepositories),this.container=e}async execute(){return Ri({command:"fetch",state:{repos:this.container.git.openRepositories}})}};Bu=Ou([(0,ki.WD)()],Bu);let Eu=class extends Command{constructor(e){super(c.Gh.PullRepositories),this.container=e}async execute(){return Ri({command:"pull",state:{repos:this.container.git.openRepositories}})}};Eu=Ou([(0,ki.WD)()],Eu);let Mu=class extends Command{constructor(e){super(c.Gh.PushRepositories),this.container=e}async execute(){return Ri({command:"push",state:{repos:this.container.git.openRepositories}})}};Mu=Ou([(0,ki.WD)()],Mu);var Wu=Object.defineProperty,Lu=Object.getOwnPropertyDescriptor,Uu=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Lu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Wu(t,i,n),n};let Nu=class extends Command{constructor(e){super(c.Gh.ResetAvatarCache),this.container=e}execute(){(0,Ze.E3)("all")}};Nu=Uu([(0,ki.WD)()],Nu);let Gu=class extends Command{constructor(e){super(c.Gh.ResetSuppressedWarnings),this.container=e}async execute(){await r.D.update("advanced.messages",void 0,s.ConfigurationTarget.Global)}};Gu=Uu([(0,ki.WD)()],Gu);let Hu=class extends Command{constructor(e){super(c.Gh.ResetTrackedUsage),this.container=e}async execute(){await this.container.usage.reset()}};Hu=Uu([(0,ki.WD)()],Hu);var Vu=Object.defineProperty,Qu=Object.getOwnPropertyDescriptor,qu=(e=>(e.GitLens="gitlens",e.SourceControl="scm",e))(qu||{});let Yu=class extends Command{constructor(e){super(c.Gh.SetViewsLayout),this.container=e}async execute(e){let t=e?.layout;if(null==t){const e=await s.window.showQuickPick([{label:"Source Control Layout",description:"(default)",detail:"Shows all the views together on the Source Control side bar",layout:"scm"},{label:"GitLens Layout",description:"",detail:"Shows all the views together on the GitLens side bar",layout:"gitlens"}],{placeHolder:"Choose a GitLens views layout"});if(null==e)return;t=e.layout}this.container.storage.store("views:layout",t);const i=te.S4.filter((e=>"contributors"!==e));switch(t){case"gitlens":try{let e=0;for(;e++<2;)await(0,ki.dO)(c.nA.MoveViews,{viewIds:i.map((e=>`gitlens.views.${e}`)),destinationId:"workbench.view.extension.gitlens"})}catch{}break;case"scm":try{let e=0;for(;e++<2;)await(0,ki.dO)(c.nA.MoveViews,{viewIds:i.map((e=>`gitlens.views.${e}`)),destinationId:"workbench.view.scm"})}catch{for(const e of i)await(0,ki.P0)(`gitlens.views.${e}.resetViewLocation`)}}}};Yu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Qu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Vu(t,i,n),n})([(0,ki.WD)()],Yu);var ju=Object.defineProperty,zu=Object.getOwnPropertyDescriptor;let Ku=class extends Command{constructor(e){super([c.Gh.SearchCommits,c.Gh.SearchCommitsInView]),this.container=e}preExecute(e,t){return e.command===c.Gh.SearchCommitsInView?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof pl&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),Bi(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await Ri({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:r.D.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};Ku=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?zu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ju(t,i,n),n})([(0,ki.WD)()],Ku);var Ju=Object.defineProperty,Zu=Object.getOwnPropertyDescriptor;let Xu=class extends ActiveEditorCommand{constructor(e){super([c.Gh.ShowCommitInView,c.Gh.ShowInDetailsView,c.Gh.ShowCommitsInView]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{refs:[e],repoPath:t}:e;return super.getMarkdownCommandArgsCore(c.Gh.ShowCommitInView,i)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},Ii(e)&&(t.refs=[e.node.commit.sha],t.repoPath=e.node.commit.repoPath)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(void 0===(i={...i}).refs){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);if(i.repoPath=s.repoPath,null!=e)try{const t=e.document.isDirty?await this.container.git.getBlameForRangeContents(s,e.selection,e.document.getText()):await this.container.git.getBlameForRange(s,e.selection);if(void 0===t)return(0,Mt.zk)("Unable to find commits");i.refs=[...(0,ye.DZ)(t.commits.values(),(e=>e.isUncommitted?void 0:e.ref))]}catch(e){return be.Yd.error(e,"ShowCommitsInViewCommand","getBlameForRange"),(0,Mt.W8)("Unable to find commits")}else{if(null==s.sha)return;i.refs=[s.sha]}}return 1===i.refs.length?Os((0,u.xB)(i.refs[0],i.repoPath,{refType:"revision"})):Ri({command:"search",state:{repo:i?.repoPath,query:(0,Et.pU)(i.refs),showResultsInSideBar:!0}})}};Xu=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Zu(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ju(t,i,n),n})([(0,ki.WD)()],Xu);var ed=Object.defineProperty,td=Object.getOwnPropertyDescriptor;let id=class extends Command{constructor(e){super(c.Gh.ShowLastQuickPick),this.container=e}execute(){const e=Ui;if(void 0===e)return Promise.resolve(void 0);try{return s.commands.executeCommand(e.command,...e.args)}catch(e){return be.Yd.error(e,"ShowLastQuickPickCommand"),(0,Mt.W8)("Unable to show last quick pick")}}};id=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?td(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ed(t,i,n),n})([(0,ki.WD)()],id);var sd=Object.defineProperty,rd=Object.getOwnPropertyDescriptor;let nd=class extends ActiveEditorCachedCommand{constructor(e){super([c.Gh.ShowQuickBranchHistory,c.Gh.ShowQuickCurrentBranchHistory]),this.container=e}preExecute(e,t){return e.command===c.Gh.ShowQuickCurrentBranchHistory&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const s=null!=(t=Ti(t,e))?await st.YY.fromUri(t):void 0,r=i?.repoPath??s?.repoPath??this.container.git.highlander?.path;let n;return null!=r&&(null!=i?.branch?n="HEAD"===i.branch?"HEAD":(0,u.xB)(i.branch,r,{refType:"branch",name:i.branch,remote:!1}):null!=i?.tag&&(n=(0,u.xB)(i.tag,r,{refType:"tag",name:i.tag}))),Ri({command:"log",state:null!=r?{repo:r,reference:n}:{}})}};nd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?rd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&sd(t,i,n),n})([(0,ki.WD)()],nd);var od=Object.defineProperty,ad=Object.getOwnPropertyDescriptor;let ld=class extends ActiveEditorCachedCommand{constructor(e){super([c.Gh.RevealCommitInView,c.Gh.ShowQuickCommit]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{sha:e,repoPath:t}:e;return super.getMarkdownCommandArgsCore(c.Gh.ShowQuickCommit,i)}preExecute(e,t){return e.command===c.Gh.RevealCommitInView&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,Ii(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let s,r;if(null==i?.commit)if(null!=i?.repoPath&&null!=i.sha)r=i.repoPath,s=st.YY.fromRepoPath(r);else{if(null==(t=Ti(t,e)))return;s=await st.YY.fromUri(t),r=s.repoPath}else null==i.sha&&(i.sha=i.commit.sha),s=i.commit.getGitUri(),r=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await this.container.git.getBlameForLine(s,t);if(null==e)return void(0,Mt.zk)("Unable to show commit");if(e.commit.isUncommitted)return void(0,Mt.f3)("Unable to show commit");i.sha=e.commit.sha,r=e.commit.repoPath,i.commit=e.commit}catch(e){return be.Yd.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),void(0,Mt.W8)("Unable to show commit")}}try{if(null!=i.commit&&null==i.commit.file||(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.getCommit(r,i.sha))),null==i.commit)return void(0,Mt.G)("Unable to show commit");if(i.revealInView)return void await Is(i.commit,{select:!0,focus:!0,expand:!0});await Ri({command:"show",state:{repo:r,reference:i.commit}})}catch(e){be.Yd.error(e,"ShowQuickCommitCommand"),(0,Mt.W8)("Unable to show commit")}}};ld=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?ad(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&od(t,i,n),n})([(0,ki.WD)()],ld);var cd=Object.defineProperty,hd=Object.getOwnPropertyDescriptor;let ud=class extends ActiveEditorCachedCommand{constructor(e){super([c.Gh.ShowQuickCommitFile,c.Gh.ShowQuickCommitRevision,c.Gh.ShowQuickCommitRevisionInDiffLeft,c.Gh.ShowQuickCommitRevisionInDiffRight]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(c.Gh.ShowQuickCommitFile,e)}async preExecute(e,t){if(null!=e.editor&&e.command.startsWith(c.Gh.ShowQuickCommitRevision)){t={...t};const i=await st.YY.fromUri(e.editor.document.uri);t.sha=i.sha}return"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,Ii(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=Ti(t,e)))return;let r;if(null!=(i={...i}).revisionUri?(r=st.YY.fromRevisionUri(s.Uri.parse(i.revisionUri,!0)),i.sha=r.sha):r=await st.YY.fromUri(t),null==i.sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await this.container.git.getBlameForLine(r,t);if(null==e)return void(0,Mt.zk)("Unable to show commit file details");if(e.commit.isUncommitted)return void(0,Mt.f3)("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit}catch(e){return be.Yd.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),void(0,Mt.W8)("Unable to show commit file details")}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){const e=i.commit?.repoPath??r.repoPath;if(i.commit=await this.container.git.getCommitForFile(e,r,{ref:i.sha}),null==i.commit)return void(0,Mt.G)("Unable to show commit file details")}if(null==i.commit)return void(0,Mt.G)("Unable to show commit file details");const e=i.commit?.file?.path??r.fsPath;(0,A.f_)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),await Ri({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){be.Yd.error(e,"ShowQuickCommitFileDetailsCommand"),(0,Mt.W8)("Unable to show commit file details")}}};ud=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?hd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&cd(t,i,n),n})([(0,ki.WD)()],ud);var dd=Object.defineProperty,pd=Object.getOwnPropertyDescriptor;let md=class extends ActiveEditorCachedCommand{constructor(e){super([c.Gh.OpenFileHistory,c.Gh.OpenFolderHistory,c.Gh.ShowQuickFileHistory,c.Gh.QuickOpenFileHistory,c.Gh.Deprecated_ShowFileHistoryInView]),this.container=e}preExecute(e,t){return e.command!==c.Gh.OpenFileHistory&&e.command!==c.Gh.OpenFolderHistory&&e.command!==c.Gh.Deprecated_ShowFileHistoryInView||((t={...t}).showInSideBar=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=Ti(t,e)))return;const s=await st.YY.fromUri(t);i?.showInSideBar?await this.container.fileHistoryView.showHistoryForUri(s):await Ri({command:"log",state:null!=s?.repoPath?{repo:s.repoPath,reference:i?.reference??"HEAD",fileName:s.relativePath}:{}})}};md=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?pd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&dd(t,i,n),n})([(0,ki.WD)()],md);var gd=Object.defineProperty,fd=Object.getOwnPropertyDescriptor;let wd=class extends Command{constructor(e){super(c.Gh.ShowQuickRepoStatus),this.container=e}async execute(e){return Ri({command:"status",state:{repo:e?.repoPath}})}};wd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?fd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&gd(t,i,n),n})([(0,ki.WD)()],wd);var vd=Object.defineProperty,yd=Object.getOwnPropertyDescriptor;let bd=class extends Command{constructor(e){super(c.Gh.ShowQuickStashList),this.container=e}execute(e){return Ri({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};bd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?yd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&vd(t,i,n),n})([(0,ki.WD)()],bd);var Cd=Object.defineProperty,Ad=Object.getOwnPropertyDescriptor;let Pd=class extends Command{constructor(e){super([c.Gh.ShowBranchesView,c.Gh.ShowCommitDetailsView,c.Gh.ShowCommitsView,c.Gh.ShowContributorsView,c.Gh.ShowFileHistoryView,c.Gh.ShowLineHistoryView,c.Gh.ShowRemotesView,c.Gh.ShowRepositoriesView,c.Gh.ShowSearchAndCompareView,c.Gh.ShowStashesView,c.Gh.ShowTagsView,c.Gh.ShowTimelineView,c.Gh.ShowWorktreesView,c.Gh.ShowHomeView]),this.container=e}preExecute(e){return this.execute(e.command)}async execute(e){switch(e){case c.Gh.ShowBranchesView:return this.container.branchesView.show();case c.Gh.ShowCommitDetailsView:return this.container.commitDetailsView.show();case c.Gh.ShowCommitsView:return this.container.commitsView.show();case c.Gh.ShowContributorsView:return this.container.contributorsView.show();case c.Gh.ShowFileHistoryView:return this.container.fileHistoryView.show();case c.Gh.ShowHomeView:return this.container.homeView.show();case c.Gh.ShowLineHistoryView:return this.container.lineHistoryView.show();case c.Gh.ShowRemotesView:return this.container.remotesView.show();case c.Gh.ShowRepositoriesView:return this.container.repositoriesView.show();case c.Gh.ShowSearchAndCompareView:return this.container.searchAndCompareView.show();case c.Gh.ShowStashesView:return this.container.stashesView.show();case c.Gh.ShowTagsView:return this.container.tagsView.show();case c.Gh.ShowTimelineView:return this.container.timelineView.show();case c.Gh.ShowWorktreesView:return this.container.worktreesView.show()}return Promise.resolve(void 0)}};Pd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ad(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Cd(t,i,n),n})([(0,ki.WD)()],Pd);var Dd=Object.defineProperty,Sd=Object.getOwnPropertyDescriptor;let kd=class extends Command{constructor(e){super(c.Gh.StashApply),this.container=e}async preExecute(e,t){return Ii(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):Bi(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(t=e?.repoPath??e?.stashItem?.repoPath,i=e?.stashItem,Ri({command:"stash",state:{subcommand:"pop",repo:t,reference:i}})):zs(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem);var t,i}};kd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Sd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Dd(t,i,n),n})([(0,ki.WD)()],kd);var Rd=Object.defineProperty,Fd=Object.getOwnPropertyDescriptor;let $d=class extends Command{constructor(e){super([c.Gh.StashSave,c.Gh.StashSaveFiles]),this.container=e}async preExecute(e,t){if(function(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[st.YY.fromFile(e.node.file,t.repoPath)];else if(Bi(e))(t={...t}).repoPath=e.node.repo.path;else if(function(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}(e))(t={...t}).repoPath=e.node.repoPath;else if("scm-states"===e.type){(t={...t}).uris=e.scmResourceStates.map((e=>e.resourceUri)),t.repoPath=(await this.container.git.getOrOpenRepository(t.uris[0]))?.path;const i=await this.container.git.getStatusForRepo(t.repoPath);i?.computeWorkingTreeStatus().staged&&(e.scmResourceStates.some((e=>e.resourceGroupType===zc.Index))||(t.keepStaged=!0))}else if("scm-groups"===e.type)if(t={...t},e.scmResourceGroups.every((e=>"index"===e.id)))t.onlyStaged=!0;else{t.uris=e.scmResourceGroups.reduce(((e,t)=>e.concat(t.resourceStates.map((e=>e.resourceUri)))),[]),t.repoPath=(await this.container.git.getOrOpenRepository(t.uris[0]))?.path;const i=await this.container.git.getStatusForRepo(t.repoPath);i?.computeWorkingTreeStatus().staged&&(e.scmResourceGroups.some((e=>"index"===e.id))||(t.keepStaged=!0))}return this.execute(t)}execute(e){return Js(e?.repoPath,e?.uris,e?.message,e?.keepStaged,e?.onlyStaged)}};$d=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Fd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Rd(t,i,n),n})([(0,ki.WD)()],$d);var Td=Object.defineProperty,xd=Object.getOwnPropertyDescriptor,Id=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?xd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Td(t,i,n),n};let _d=class extends Command{constructor(e){super(c.Gh.SwitchMode),this.container=e}async execute(){const e=(0,Ut.UH)(),t=await async function(){const e=r.D.get("modes");if(null==e)return;const t=Object.keys(e);if(0===t.length)return;const i=r.D.get("mode.active"),n=t.map((t=>{const s=e[t];return{label:`${i===t?"$(check)  ":"     "}${s.name} mode`,description:s.description?` ${c.NE.Dash}  ${s.description}`:"",key:t}}));return i&&null!=e[i]&&n.splice(0,0,{label:`Exit ${e[i].name} mode`,key:void 0}),await s.window.showQuickPick(n,{placeHolder:"select a GitLens mode to enter"})}();if(void 0===t)return;null!=e&&(e.exitDetails=` — mode=${t.key??""}`);const i=r.D.get("mode.active");if(i!==t.key){if(null!=i&&0!==i.length){const e=r.D.get("modes"),s=e?.[i].annotations;if(null!=s){s!==(null!=t.key?e?.[t.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}}await r.D.update("mode.active",t.key,s.ConfigurationTarget.Global)}}};Id([(0,d.cM)({args:!1,scoped:!0,singleLine:!0,timed:!1})],_d.prototype,"execute",1),_d=Id([(0,ki.WD)()],_d);let Od=class extends Command{constructor(e){super(c.Gh.ToggleReviewMode),this.container=e}async execute(){const e=r.D.get("modes");if(null==e||!Object.keys(e).includes("review"))return;const t="review"===r.D.get("mode.active")?void 0:"review";await r.D.update("mode.active",t,s.ConfigurationTarget.Global)}};Id([(0,d.cM)({args:!1,singleLine:!0,timed:!1})],Od.prototype,"execute",1),Od=Id([(0,ki.WD)()],Od);let Bd=class extends Command{constructor(e){super(c.Gh.ToggleZenMode),this.container=e}async execute(){const e=r.D.get("modes");if(null==e||!Object.keys(e).includes("zen"))return;const t="zen"===r.D.get("mode.active")?void 0:"zen";await r.D.update("mode.active",t,s.ConfigurationTarget.Global)}};Id([(0,d.cM)({args:!1,singleLine:!0,timed:!1})],Bd.prototype,"execute",1),Bd=Id([(0,ki.WD)()],Bd);var Ed=Object.defineProperty,Md=Object.getOwnPropertyDescriptor;let Wd=class extends Command{constructor(e){super(c.Gh.ToggleCodeLens),this.container=e}execute(){return this.container.codeLens.toggleCodeLens()}};Wd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Md(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ed(t,i,n),n})([(0,ki.WD)()],Wd);var Ld=Object.defineProperty,Ud=Object.getOwnPropertyDescriptor,Nd=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ud(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Ld(t,i,n),n};let Gd=class extends EditorCommand{constructor(e){super([c.Gh.ClearFileAnnotations,c.Gh.ComputingFileAnnotations]),this.container=e}async execute(e,t,i){if(null!=e&&!(0,Pi.PH)(e)&&null!=i&&!En.n.equals(i,e.document.uri)){const t=s.window.visibleTextEditors.find((e=>En.n.equals(i,e.document.uri)));null!=t&&(e=t)}try{await this.container.fileAnnotations.clear(e)}catch(e){be.Yd.error(e,"ClearFileAnnotationsCommand"),(0,Mt.W8)("Unable to clear file annotations")}}};Gd=Nd([(0,ki.WD)()],Gd);let Hd=class extends ActiveEditorCommand{constructor(e){super([c.Gh.ToggleFileBlame,c.Gh.ToggleFileBlameInDiffLeft,c.Gh.ToggleFileBlameInDiffRight]),this.container=e}execute(e,t,i){return qd(this.container,e,t,{...i,type:te.VP.Blame})}};Hd=Nd([(0,ki.WD)()],Hd);let Vd=class extends ActiveEditorCommand{constructor(e){super(c.Gh.ToggleFileChanges),this.container=e}execute(e,t,i){return qd(this.container,e,t,{...i,type:te.VP.Changes})}};Vd=Nd([(0,ki.WD)()],Vd);let Qd=class extends ActiveEditorCommand{constructor(e){super([c.Gh.ToggleFileHeatmap,c.Gh.ToggleFileHeatmapInDiffLeft,c.Gh.ToggleFileHeatmapInDiffRight]),this.container=e}execute(e,t,i){return qd(this.container,e,t,{...i,type:te.VP.Heatmap})}};async function qd(e,t,i,r){if(null!=t&&!(0,Pi.PH)(t)&&null!=i&&!En.n.equals(i,t.document.uri)){const e=s.window.visibleTextEditors.find((e=>En.n.equals(i,e.document.uri)));null!=e&&(t=e)}try{r={type:te.VP.Blame,...r},await e.fileAnnotations.toggle(t,r.type,{selection:r.context?.selection??{line:t?.selection.active.line},...r.context},r.on)}catch(e){be.Yd.error(e,"ToggleFileAnnotationsCommand"),(0,Mt.W8)(`Unable to toggle file ${r.type} annotations`)}}Qd=Nd([(0,ki.WD)()],Qd);var Yd=Object.defineProperty,jd=Object.getOwnPropertyDescriptor;let zd=class extends ActiveEditorCommand{constructor(e){super(c.Gh.ToggleLineBlame),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){be.Yd.error(e,"ToggleLineBlameCommand"),(0,Mt.W8)("Unable to toggle line blame annotations")}}};zd=((e,t,i,s)=>{for(var r,n=s>1?void 0:s?jd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Yd(t,i,n),n})([(0,ki.WD)()],zd);var Kd=Object.defineProperty,Jd=Object.getOwnPropertyDescriptor,Zd=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Jd(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Kd(t,i,n),n};let Xd=class extends Command{constructor(e){super(c.Gh.GetStarted),this.container=e}execute(e){const t=this.container.context.extension.id;e===t&&(e=void 0),(0,Pi.lN)(t,e??"gitlens.welcome")}};Xd=Zd([(0,ki.WD)()],Xd);let ep=class extends Command{constructor(e){super(c.Gh.OpenWalkthrough),this.container=e}execute(e){const[t,i]=e?.split("|")??"gitlens.welcome";(0,Pi.lN)(this.container.context.extension.id,t,i)}};ep=Zd([(0,ki.WD)()],ep);class CommitFormatter extends xn{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){const{pullRequestOrRemote:e}=this._options;return null!=e&&mn.i7.is(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){const{pullRequestOrRemote:e}=this._options;return null!=e&&mn.i7.is(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return(null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle"))===te.Dn.Absolute?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){let{name:e,email:t}=this._item.author;const i=this._padOrTruncate(e,this._options.tokenOptions.author);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,C.se)(e),t=(0,C.se)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);const i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,C.se)(e),t=(0,C.se)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){const{outputFormat:e}=this._options;if("plaintext"===e||!r.D.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author;const i=this._options.presence;if(null!=i){let s=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;"html"===e&&(s=(0,C.se)(s));return this._getAvatar(e,s,this._options.avatarSize).then((t=>this._padOrTruncate(`${t}${this._getPresence(e,i,s)}`,this._options.tokenOptions.avatar)))}return"html"===e&&(t=(0,C.se)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??r.D.get("hovers.avatarSize");const s=this._item.getAvatarUri({defaultStyle:r.D.get("defaultGravatarsStyle"),size:i}),n=(await s).toString(!0);return this._padOrTruncate("html"===e?`<img src="${n}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${n}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,Ze.TU)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,Ze.TU)(t.status)} "${i}")`}get changes(){return this._padOrTruncate((0,A.f_)(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate((0,A.f_)(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate((0,A.f_)(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}get commands(){if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);let e;if(this._item.isUncommitted){const{previousLineComparisonUris:t}=this._options;return null!=t?.previous?(e=`[\`${this._padOrTruncate((0,u.zL)((0,u.rD)(t.current.sha)?t.current.sha:P.CL),this._options.tokenOptions.commands)}\`](${Xu.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e+=` &nbsp;[$(chevron-left)$(compare-changes)](${Tc.getMarkdownCommandArgs({lhs:{sha:t.previous.sha??"",uri:t.previous.documentUri()},rhs:{sha:t.current.sha??"",uri:t.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision")`,e+=` &nbsp;[$(versions)](${Jh.getMarkdownCommandArgs(gv.instance.git.getRevisionUri(t.previous),te.VP.Blame,this._options.editor?.line)} "Open Blame Prior to this Change")`):e=`[\`${this._padOrTruncate((0,u.zL)(this._item.isUncommittedStaged?P.pw:P.CL),this._options.tokenOptions.commands)}\`](${Xu.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e}const t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---\n\n[\`$(git-commit) ${this.id}\`](${Xu.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e+=` &nbsp;[$(chevron-left)$(compare-changes)](${Tc.getMarkdownCommandArgs(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){const t=gv.instance.git.getRevisionUri(this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path,this._item.repoPath);e+=` &nbsp;[$(versions)](${Jh.getMarkdownCommandArgs(t,te.VP.Blame,this._options.editor?.line)} "Open Blame Prior to this Change")`}if(e+=` &nbsp;[$(search)](${Command.getMarkdownCommandArgsCore(c.Gh.RevealCommitInView,{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,Ka()&&(e+=` &nbsp;[$(gitlens-graph)](${Command.getMarkdownCommandArgsCore(c.Gh.ShowInCommitGraph,{ref:(0,u.qj)(this._item)})} "Open in Commit Graph")`),null!=this._options.remotes&&0!==this._options.remotes.length){const t=ot.ss.getHighlanderProviders(this._options.remotes);e+=` &nbsp;[$(globe)](${Lh.getMarkdownCommandArgs(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}const{pullRequestOrRemote:i}=this._options;if(null!=i&&(mn.i7.is(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${tp("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1==gv.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}\n${c.NE.Dash.repeat(2)}\n${(0,C.ry)(i.title).replace(/"/g,'\\"')}\n${i.state}, ${i.formatDateFromNow()}")`:i instanceof Nt.PK?e+=`${t}[$(git-pull-request) PR $(loading~spin)](command:${c.Gh.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`:null!=i.provider&&r.D.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i.provider.name}${c.NE.Ellipsis}](${Tu.getMarkdownCommandArgs(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)),gv.instance.actionRunners.count("hover.commands")>0){const{name:i,email:s}=this._item.author;e+=`${t}[$(organization) Team${c.NE.SpaceThinnest}${c.NE.Ellipsis}](${tp("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:s,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}const s=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${ud.getMarkdownCommandArgs(null!=s?{revisionUri:gv.instance.git.getRevisionUri(s).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:r.D.get("defaultDateStyle");return this._padOrTruncate(e===te.Dn.Absolute?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){const{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){const{outputFormat:e}=this._options;return this._padOrTruncate(null==this._options.footnotes||0===this._options.footnotes.size?"":(0,ye.v_)((0,ye.UI)(this._options.footnotes,(([t,i])=>"plaintext"===e?`${(0,C.sC)(t)} ${i}`:i)),"html"===e?"<br \\>":"markdown"===e?"\\\n":"\n"),this._options.tokenOptions.footnotes)}get id(){const e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e;switch(this._options.outputFormat){case"markdown":e=`[\`$(git-commit) ${this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id)}\`](${Xu.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`;break;case"html":{const t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`<a href="${Xu.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)}" title="Open Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}><span class="codicon codicon-git-commit"></span>${t}</a>`;break}default:return this.id}return this._padOrTruncate(e,this._options.tokenOptions.link)}get message(){const{outputFormat:e}=this._options;if(this._item.isUncommitted){const t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1);let s=(t?"Merge":i?"Staged":"Uncommitted")+" changes";switch(e){case"html":s=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${s}</span>`;break;case"markdown":s=`\n> ${s}`}return this._padOrTruncate(s,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,"\n");switch(t=(0,Xe.X)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,C.se)(t)),"markdown"===e&&(t=(0,C.ry)(t,{quoted:!0})),this._options.messageAutolinks&&(t=gv.instance.autolinks.linkify(t,e,this._options.remotes,this._options.autolinkedIssuesOrPullRequests,this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,c.NE.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`\n> ${t}`;default:return t}}get pullRequest(){const{pullRequestOrRemote:e}=this._options;if(null==e||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);let t;if(mn.i7.is(e))if("markdown"===this._options.outputFormat){const i=(0,C.ry)(e.title).replace(/"/g,'\\"').trim();if(t=`PR [**#${e.id}**](${tp("openPullRequest",{repoPath:this._item.repoPath,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain},pullRequest:{id:e.id,url:e.url}})} "Open Pull Request \\#${e.id}${1==gv.instance.actionRunners.count("openPullRequest")?` on ${e.provider.name}`:"..."}\n${c.NE.Dash.repeat(2)}\n${(0,C.ry)(e.title).replace(/"/g,'\\"')}\n${e.state}, ${e.formatDateFromNow()}")`,null!=this._options.footnotes){const t=this._options.footnotes.size+1;this._options.footnotes.set(t,`${mn.i7.getMarkdownIcon(e)} [**${i}**](${e.url} "Open Pull Request \\#${e.id} on ${e.provider.name}")\\\n${c.NE.Space.repeat(4)} #${e.id} ${e.state.toLocaleLowerCase()} ${e.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){const i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${e.id}: ${e.title}  ${c.NE.Dot}  ${e.state}, ${e.formatDateFromNow()}`),t=`PR #${e.id}${(0,C.sC)(i)}`}else t=`PR #${e.id}`;else{if(!(e instanceof Nt.PK))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);t="markdown"===this._options.outputFormat?`[PR $(loading~spin)](command:${c.Gh.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(t,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){const{pullRequestOrRemote:e}=this._options;return this._padOrTruncate(null!=e&&mn.i7.is(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.number??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat});if(null!=e&&"plaintext"!==this._options.outputFormat){const t=e.split(", ");e=t.map((e=>`<span style="color:#ffffff;background-color:#1d76db;"${this._options.htmlFormat?.classes?.tips?` class="${this._options.htmlFormat.classes.tips}"`:""}>&nbsp;&nbsp;${e}&nbsp;&nbsp;</span>`)).join(c.NE.Space.repeat(3))}return this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if(null!=i&&"string"!=typeof i||(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw new Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&(null!=i&&"string"!=typeof i||(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}}function tp(e,t){return Command.getMarkdownCommandArgsCore(`${c.Gh.ActionPrefix}${e}`,{...t,type:e})}function ip(e){const t=dp(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}const sp=1e-7,rp=20;function np(e,t){const i=Math.pow(10,t);return Math.round(e*i)/i}class RGBA{constructor(e,t,i,s=1){this._rgbaBrand=void 0,this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=np(Math.max(Math.min(1,s),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}}class HSLA{constructor(e,t,i,s){this._hslaBrand=void 0,this.h=0|Math.max(Math.min(360,e),0),this.s=np(Math.max(Math.min(1,t),0),3),this.l=np(Math.max(Math.min(1,i),0),3),this.a=np(Math.max(Math.min(1,s),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,s=e.b/255,r=e.a,n=Math.max(t,i,s),o=Math.min(t,i,s);let a=0,l=0;const c=(o+n)/2,h=n-o;if(h>0){switch(l=Math.min(c<=.5?h/(2*c):h/(2-2*c),1),n){case t:a=(i-s)/h+(i<s?6:0);break;case i:a=(s-t)/h+2;break;case s:a=(t-i)/h+4}a*=60,a=Math.round(a)}return new HSLA(a,l,c,r)}static _hue2rgb(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){const t=e.h/360,{s:i,l:s,a:r}=e;let n,o,a;if(0===i)n=o=a=s;else{const e=s<.5?s*(1+i):s+i-s*i,r=2*s-e;n=HSLA._hue2rgb(r,e,t+1/3),o=HSLA._hue2rgb(r,e,t),a=HSLA._hue2rgb(r,e,t-1/3)}return new RGBA(Math.round(255*n),Math.round(255*o),Math.round(255*a),r)}}class HSVA{constructor(e,t,i,s){this._hsvaBrand=void 0,this.h=0|Math.max(Math.min(360,e),0),this.s=np(Math.max(Math.min(1,t),0),3),this.v=np(Math.max(Math.min(1,i),0),3),this.a=np(Math.max(Math.min(1,s),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,s=e.b/255,r=Math.max(t,i,s),n=r-Math.min(t,i,s),o=0===r?0:n/r;let a;return a=0===n?0:r===t?((i-s)/n%6+6)%6:r===i?(s-t)/n+2:(t-i)/n+4,new HSVA(Math.round(60*a),o,r,e.a)}static toRGBA(e){const{h:t,s:i,v:s,a:r}=e,n=s*i,o=n*(1-Math.abs(t/60%2-1)),a=s-n;let[l,c,h]=[0,0,0];return t<60?(l=n,c=o):t<120?(l=o,c=n):t<180?(c=n,h=o):t<240?(c=o,h=n):t<300?(l=o,h=n):t<=360&&(l=n,h=o),l=Math.round(255*(l+a)),c=Math.round(255*(c+a)),h=Math.round(255*(h+a)),new RGBA(l,c,h,r)}}const op=class{static from(e){return e instanceof op?e:dp(e)||op.red}static fromCssVariable(e,t){return dp(t.getPropertyValue(e).trim())||op.red}static fromHex(e){return pp(e)||op.red}static equals(e,t){return!e&&!t||!(!e||!t)&&e.equals(t)}get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(!e)throw new Error("Color needs a value");if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else{if(!(e instanceof HSVA))throw new Error("Invalid color ctor argument");this._hsva=e,this.rgba=HSVA.toRGBA(e)}}equals(e){return null!=e&&(Boolean(e)&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva))}getRelativeLuminance(){return np(.2126*op._relativeLuminanceForComponent(this.rgba.r)+.7152*op._relativeLuminanceForComponent(this.rgba.g)+.0722*op._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){const t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new ap(new RGBA(0,0,0,e.rgba.a));if(1===t)return new ap(new RGBA(255,255,255,e.rgba.a));const i=e.getRelativeLuminance();let s=rp;const r=(e,i)=>{const n=e.mix(i,.5),o=n.getRelativeLuminance();return Math.abs(t-o)<sp||!s--?n:o>t?r(e,n):r(n,i)},n=(i>t?r(ap.black,e):r(e,ap.white)).rgba;return new ap(new RGBA(n.r,n.g,n.b,e.rgba.a))}(this,e)}getContrastRatio(e){const t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new op(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new op(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){const{r:t,g:i,b:s,a:r}=this.rgba;return new op(new RGBA(t,i,s,r*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new op(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){const t=e.rgba,i=this.rgba.a,s=t.a,r=i+s*(1-i);if(r<1e-6)return op.transparent;const n=this.rgba.r*i/r+t.r*s*(1-i)/r,o=this.rgba.g*i/r+t.g*s*(1-i)/r,a=this.rgba.b*i/r+t.b*s*(1-i)/r;return new op(new RGBA(n,o,a,r))}mix(e,t){return function(e,t,i){const s=e.rgba,r=t.rgba;return new ap(new RGBA(s.r+i*(r.r-s.r),s.g+i*(r.g-s.g),s.b+i*(r.b-s.b),s.a+i*(r.a-s.a)))}(this,e,t)}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;const{r:t,g:i,b:s,a:r}=this.rgba;return new op(new RGBA(e.rgba.r-r*(e.rgba.r-t),e.rgba.g-r*(e.rgba.g-i),e.rgba.b-r*(e.rgba.b-s),1))}flatten(...e){const t=e.reduceRight(((e,t)=>op._flatten(t,e)));return op._flatten(this,t)}static _flatten(e,t){const i=1-e.rgba.a;return new op(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}toString(){return this._toString||(this._toString=function(e){if(e.isOpaque())return hp(e);return lp(e)}(this)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;const s=e.getRelativeLuminance(),r=t.getRelativeLuminance();return i=i*(r-s)/r,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;const s=e.getRelativeLuminance();return i=i*(s-t.getRelativeLuminance())/s,e.darken(i)}};let ap=op;function lp(e){return`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`}function cp(e){const t=e.toString(16);return 2!==t.length?`0${t}`:t}function hp(e){return`#${cp(e.rgba.r)}${cp(e.rgba.g)}${cp(e.rgba.b)}`}ap.white=new op(new RGBA(255,255,255,1)),ap.black=new op(new RGBA(0,0,0,1)),ap.red=new op(new RGBA(255,0,0,1)),ap.blue=new op(new RGBA(0,0,255,1)),ap.green=new op(new RGBA(0,255,0,1)),ap.cyan=new op(new RGBA(0,255,255,1)),ap.lightgrey=new op(new RGBA(211,211,211,1)),ap.transparent=new op(new RGBA(0,0,0,0));const up=/^((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function dp(e){if(0===e.length)return null;if(e.charCodeAt(0)===c.mN.Hash)return pp(e);const t=up.exec(e);if(null==t)return null;const i=t[1];let s;switch(i){case"rgb":case"hsl":s=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),1];break;case"rgba":case"hsla":s=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),parseFloat(t[5])];break;default:return null}switch(i){case"rgb":case"rgba":return new ap(new RGBA(s[0],s[1],s[2],s[3]));case"hsl":case"hsla":return new ap(new HSLA(s[0],s[1],s[2],s[3]))}return ap.red}function pp(e){const t=(e=e.trim()).length;if(0===t)return null;if(e.charCodeAt(0)!==c.mN.Hash)return null;if(7===t){const t=16*mp(e.charCodeAt(1))+mp(e.charCodeAt(2)),i=16*mp(e.charCodeAt(3))+mp(e.charCodeAt(4)),s=16*mp(e.charCodeAt(5))+mp(e.charCodeAt(6));return new ap(new RGBA(t,i,s,1))}if(9===t){const t=16*mp(e.charCodeAt(1))+mp(e.charCodeAt(2)),i=16*mp(e.charCodeAt(3))+mp(e.charCodeAt(4)),s=16*mp(e.charCodeAt(5))+mp(e.charCodeAt(6)),r=16*mp(e.charCodeAt(7))+mp(e.charCodeAt(8));return new ap(new RGBA(t,i,s,r/255))}if(4===t){const t=mp(e.charCodeAt(1)),i=mp(e.charCodeAt(2)),s=mp(e.charCodeAt(3));return new ap(new RGBA(16*t+t,16*i+i,16*s+s))}if(5===t){const t=mp(e.charCodeAt(1)),i=mp(e.charCodeAt(2)),s=mp(e.charCodeAt(3)),r=mp(e.charCodeAt(4));return new ap(new RGBA(16*t+t,16*i+i,16*s+s,(16*r+r)/255))}return null}function mp(e){switch(e){case c.mN.Digit0:return 0;case c.mN.Digit1:return 1;case c.mN.Digit2:return 2;case c.mN.Digit3:return 3;case c.mN.Digit4:return 4;case c.mN.Digit5:return 5;case c.mN.Digit6:return 6;case c.mN.Digit7:return 7;case c.mN.Digit8:return 8;case c.mN.Digit9:return 9;case c.mN.a:case c.mN.A:return 10;case c.mN.b:case c.mN.B:return 11;case c.mN.c:case c.mN.C:return 12;case c.mN.d:case c.mN.D:return 13;case c.mN.e:case c.mN.E:return 14;case c.mN.f:case c.mN.F:return 15}return 0}const gp="#f66a0a",fp="#0a60f6",wp=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];let vp;function yp(){if(null==vp){const{coldColor:e,hotColor:t}=r.D.get("heatmap");let i;i=e===fp&&t===gp?wp:function(e,t,i){const s=[],r=ap.from(e),n=ap.from(t);s.push(r.toString());const o=i-1;for(let e=1;e<o;e++){const t=r.mix(n,e/o);s.push(t.toString())}return s.push(n.toString()),s}(t,e,20),vp={hot:i.slice(0,10),cold:i.slice(10,20)};const s=r.D.onDidChange((e=>{r.D.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(s.dispose(),vp=void 0)}))}return vp}function bp(e,t,i){const[s,r,n,o]=Dp(t,i);e.renderOptions.before.borderColor=`rgba(${s},${r},${n},${o})`}function Cp(e,t,i,n){const[o,a,l,c]=Dp(e,t),{fadeLines:h,locations:u}=r.D.get("heatmap"),d=u.includes(te.o9.Gutter),p=u.includes(te.o9.Line),m=u.includes(te.o9.Scrollbar),g=`${o},${a},${l},${c}`;let f=n.get(g);return null==f?(f={decorationType:s.window.createTextEditorDecorationType({backgroundColor:p?`rgba(${o},${a},${l},${.15*c})`:void 0,opacity:h?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!(!p&&!h)||void 0,gutterIconPath:d?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${o},${a},${l})' fill-opacity='${c}' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:d?"contain":void 0,overviewRulerLane:m?s.OverviewRulerLane.Center:void 0,overviewRulerColor:m?`rgba(${o},${a},${l},${.7*c})`:void 0}),rangesOrOptions:[i]},n.set(g,f)):f.rangesOrOptions.push(i),f.decorationType}function Ap(e,t,i,s){const r={renderOptions:{before:{...s}}};e.isUncommitted&&(r.renderOptions.before.color=s.uncommittedColor);const n=CommitFormatter.fromTemplate(t,e,i);return r.renderOptions.before.contentText=(0,C.vk)(n.replace(/ /g,c.NE.Space),1,1),r}function Pp(e,t,i,r=!0){const n=CommitFormatter.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new s.ThemeColor(c.wL.TrailingLineBackgroundColor),color:new s.ThemeColor(c.wL.TrailingLineForegroundColor),contentText:(0,C.vk)(n.replace(/ /g,c.NE.Space),1,1),fontWeight:"normal",fontStyle:"normal",textDecoration:"none;"+(r?"":" position: absolute;")}}}}function Dp(e,t){const i=t.computeRelativeAge(e),s=ip((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...s??[0,0,0],null==s?0:0===i?1:i<=5?.8:.6]}async function Sp(e,t,i,n){const o=t.sha;let a=null;const l=await async function(){if(null==e.file)return;let s;if(e.isUncommitted)(0,u.rD)(o)&&(s=o);else if(a=await e.getPreviousSha(),s=a,null==s)return`\`\`\`diff\n+ ${n.lineAt(i).text}\n\`\`\``;const l=i+1,c=e.lines.find((e=>e.line===l))??e.lines[0];let h=e.file.originalPath;null==h&&t.fsPath!==e.file.uri.fsPath&&(h=e.file.path),i=c.line-1;let d=await gv.instance.git.getDiffForLine(t,i,s,o);return null==d&&null==s&&o!==P.pw&&(d=await gv.instance.git.getDiffForLine(t,i,void 0,P.pw)),null!=d?function(e,t){if("hunk"===t||null==t&&"hunk"===r.D.get("hovers.changesDiff"))return Fp(e.hunk);return`\`\`\`diff${null==e.previous?"":`\n- ${e.previous.line.trim()}`}${null==e.current?"":`\n+ ${e.current.line.trim()}`}\n\`\`\``}(d):void 0}();if(null==l)return;let h,d,p;if(e.isUncommitted){const t=await e.getPreviousComparisonUrisForLine(i,o);if(null==t?.previous)return;h=`[$(compare-changes)](${Tc.getMarkdownCommandArgs({lhs:{sha:t.previous.sha??"",uri:t.previous.documentUri()},rhs:{sha:t.current.sha??"",uri:t.current.documentUri()},repoPath:e.repoPath,line:i})} "Open Changes")`,d=null==t.previous.sha||t.previous.isUncommitted?`  &nbsp;_${(0,u.zL)(t.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${c.NE.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,u.zL)(t.previous.sha||"")}](${ld.getMarkdownCommandArgs(t.previous.sha||"")} "Show Commit") &nbsp;${c.NE.ArrowLeftRightLong}&nbsp; `,p=null==t.current.sha||t.current.isUncommitted?`_${(0,u.zL)(t.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,u.zL)(t.current.sha||"")}](${ld.getMarkdownCommandArgs(t.current.sha||"")} "Show Commit")`}else h=`[$(compare-changes)](${Tc.getMarkdownCommandArgs(e,i)} "Open Changes")`,null===a&&(a=await e.getPreviousSha()),a&&(d=`  &nbsp;[$(git-commit) ${(0,u.zL)(a)}](${ld.getMarkdownCommandArgs(a)} "Show Commit") &nbsp;${c.NE.ArrowLeftRightLong}&nbsp;`),p=`[$(git-commit) ${e.shortSha}](${ld.getMarkdownCommandArgs(e.sha)} "Show Commit")`;h=`${l}\n---\n\nChanges${d??" added in "}${p} &nbsp;&nbsp;|&nbsp;&nbsp; ${h}`;const m=new s.MarkdownString(h,!0);return m.supportHtml=!0,m.isTrusted=!0,m}async function kp(e,t,i,r){const n=Fp(r);let o,a,l;if(null==e)a="_Working Tree_",l="_Unsaved_";else{const s=await e.findFile(t);if(null==s)return;o=`[$(compare-changes)](${Tc.getMarkdownCommandArgs({lhs:{sha:e.sha,uri:st.YY.fromFile(s,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,a=`[$(git-commit) ${e.shortSha}](${ld.getMarkdownCommandArgs(e.sha)} "Show Commit")`,l="_Working Tree_"}o=`${n}\n---\n\nLocal Changes  &nbsp;${a} &nbsp;${c.NE.ArrowLeftRightLong}&nbsp; ${l}${null==o?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${o}`}`;const h=new s.MarkdownString(o,!0);return h.supportHtml=!0,h.isTrusted=!0,h}async function Rp(e,t,i,r,n,o){null===n&&(n="MMMM Do, YYYY h:mma");let a=e.message??e.summary;if(null==e.message&&!e.isUncommitted&&(await e.ensureFullDetails(),a=e.message??e.summary,o?.cancellationToken?.isCancellationRequested))return new s.MarkdownString;const l=await gv.instance.git.getRemotesWithProviders(e.repoPath,{sort:!0});if(o?.cancellationToken?.isCancellationRequested)return new s.MarkdownString;const[c,h,u,d]=await Promise.allSettled([e.isUncommitted?e.getPreviousComparisonUrisForLine(i,t.sha):void 0,$p(a,l),o?.pullRequests?.pr??Tp(e.ref,l,{pullRequests:!1!==o?.pullRequests?.enabled&&CommitFormatter.has(r,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")}),gv.instance.vsls.maybeGetPresence(e.author.email)]);if(o?.cancellationToken?.isCancellationRequested)return new s.MarkdownString;const p=(0,Nt.Sb)(c),m=(0,Nt.Sb)(h),g=(0,Nt.Sb)(u),f=(0,Nt.Sb)(d);null==g||g instanceof Nt.PK||m?.delete(g.id);const w=await CommitFormatter.fromTemplateAsync(r,e,{autolinkedIssuesOrPullRequests:m,dateFormat:n,editor:{line:i,uri:t},getBranchAndTagTips:o?.getBranchAndTagTips,messageAutolinks:o?.autolinks,pullRequestOrRemote:g,presence:f,previousLineComparisonUris:p,outputFormat:"markdown",remotes:l}),v=new s.MarkdownString(w,!0);return v.supportHtml=!0,v.isTrusted=!0,v}function Fp(e){return`\`\`\`diff\n${e.diff.trim()}\n\`\`\``}async function $p(e,t){const i=(0,Ut.QR)("Hovers.getAutoLinkedIssuesOrPullRequests");be.Yd.debug(i,`${c.NE.Dash} message=<message>`);const s=(0,l.a)(),n=r.D.get("hovers");if(!n.autolinks.enabled||!n.autolinks.enhanced||!CommitFormatter.has(n.detailsMarkdownFormat,"message"))return void be.Yd.debug(i,`completed ${c.NE.Dot} ${(0,C.qk)(s)} ms`);const o=await gv.instance.git.getBestRemoteWithRichProvider(t);if(null==o?.provider)return void be.Yd.debug(i,`completed ${c.NE.Dot} ${(0,C.qk)(s)} ms`);try{const t=await gv.instance.autolinks.getLinkedIssuesAndPullRequests(e,o,{timeout:250});if(null!=t&&be.Yd.enabled(Ce.i.Debug)){const e=(0,ye.QX)(t.values(),(e=>e instanceof Nt.PK));if(0!==e)return be.Yd.debug(i,`timed out ${c.NE.Dash} ${e} issue/pull request queries took too long (over 250 ms) ${c.NE.Dot} ${(0,C.qk)(s)} ms`),t}return be.Yd.debug(i,`completed ${c.NE.Dot} ${(0,C.qk)(s)} ms`),t}catch(e){return void be.Yd.error(e,i,`failed ${c.NE.Dot} ${(0,C.qk)(s)} ms`)}}async function Tp(e,t,i){const s=(0,Ut.QR)("Hovers.getPullRequestForCommit");be.Yd.debug(s,`${c.NE.Dash} ref=${e}`);const r=(0,l.a)();if(!i?.pullRequests)return void be.Yd.debug(s,`completed ${c.NE.Dot} ${(0,C.qk)(r)} ms`);const n=await gv.instance.git.getBestRemoteWithRichProvider(t,{includeDisconnected:!0});if(null==n?.provider)return void be.Yd.debug(s,`completed ${c.NE.Dot} ${(0,C.qk)(r)} ms`);const{provider:o}=n;if(!(o.maybeConnected??await o.isConnected()))return be.Yd.debug(s,`completed ${c.NE.Dot} ${(0,C.qk)(r)} ms`),n;try{const t=await gv.instance.git.getPullRequestForCommit(e,o,{timeout:250});return be.Yd.debug(s,`completed ${c.NE.Dot} ${(0,C.qk)(r)} ms`),t}catch(e){return e instanceof Nt.PK?(be.Yd.debug(s,`timed out ${c.NE.Dot} ${(0,C.qk)(r)} ms`),e):void be.Yd.error(e,s,`failed ${c.NE.Dot} ${(0,C.qk)(r)} ms`)}}var xp=Object.defineProperty,Ip=Object.getOwnPropertyDescriptor;class BlameAnnotationProviderBase extends AnnotationProviderBase{constructor(e,t,i,s){super(e,t,i),this.container=s,this.blame=this.container.git.getBlame(this.trackedDocument.uri,t.document),t.document.isDirty&&i.setForceDirtyStateChangeOnNextDocumentChange()}clear(){null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}async validate(){const e=await this.blame;return null!=e&&0!==e.lines.length}async getBlame(){const e=await this.blame;if(null!=e&&0!==e.lines.length)return e}getComputedHeatmap(e){const t=[];let i,s;for(const r of e.lines)s!==r.sha&&(s=r.sha,i=e.commits.get(r.sha),null!=i&&t.push(i.date));t.sort(((e,t)=>e.getTime()-t.getTime()));const n=new Date;n.setDate(n.getDate()-(r.D.get("heatmap.ageThreshold")||90));const o=n.getTime(),a=[],l=[];for(const e of t)e.getTime()<o?l.push(e):a.push(e);let c;c=a.length&&l.length?{hot:_p(a),cold:_p(l)}:_p(t);const h=(e,t)=>Array.isArray(c)?c:t?c.hot.concat(c.cold):e.getTime()<o?c.cold:c.hot,u=(e,t)=>{const i=e.getTime();let s=0;for(let e=0;e<t.length&&(s=e,!(i>=t[e]));e++);return s};return{coldThresholdTimestamp:o,colors:yp(),computeRelativeAge:e=>u(e,h(e)),computeOpacity:e=>{const t=h(e,!0),i=u(e,t);return Math.max(.2,Math.round(100*(1-i/t.length))/100)}}}registerHoverProviders(e){const t=r.D.get("hovers");t.enabled&&t.annotations.enabled&&(e.details||e.changes)&&(this.hoverProviderDisposable=s.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:(t,i,s)=>this.provideHover(e,t,i,s)}))}async provideHover(e,t,i,n){if("line"!==r.D.get("hovers.annotations.over")&&0!==i.character)return;if(this.document.uri.toString()!==t.uri.toString())return;const o=await this.getBlame();if(null==o)return;const a=o.lines[i.line],l=o.commits.get(a.sha);if(null==l)return;const c=(await Promise.all([e.details?this.getDetailsHoverMessage(l,t):void 0,e.changes?Sp(l,await st.YY.fromUri(t.uri),i.line,t):void 0])).filter((e=>Boolean(e)));return new s.Hover(c,t.validateRange(new s.Range(i.line,0,i.line,1073741824)))}async getDetailsHoverMessage(e,t){let i=this.editor.selection.active.line;const s=i+1;i=(e.lines.find((e=>e.line===s))??e.lines[0]).originalLine-1;const n=r.D.get("hovers");return Rp(e,await st.YY.fromUri(t.uri),i,n.detailsMarkdownFormat,r.D.get("defaultDateFormat"),{autolinks:n.autolinks.enabled,pullRequests:{enabled:n.pullRequests.enabled}})}}function _p(e){const t=[],i=Math.floor(e.length/2),s=e.length%2?e[i].getTime():(e[i-1].getTime()+e[i].getTime())/2;let r=(e[e.length-1].getTime()-s)/5;for(let e=5;e>0;e--)t.push(s+r*e);t.push(s);r=(s-e[0].getTime())/4;for(let e=1;e<=4;e++)t.push(s-r*e);return t}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ip(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&xp(t,i,n)})([(0,d.cM)({args:!1})],BlameAnnotationProviderBase.prototype,"getComputedHeatmap",1);var Op=Object.defineProperty,Bp=Object.getOwnPropertyDescriptor,Ep=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Bp(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Op(t,i,n),n};class GutterBlameAnnotationProvider extends BlameAnnotationProviderBase{constructor(e,t,i){super(te.VP.Blame,e,t,i)}clear(){if(super.clear(),null!=Gp.gutterBlameHighlight)try{this.editor.setDecorations(Gp.gutterBlameHighlight,[])}catch{}}async onProvideAnnotation(e,t){const i=(0,Ut.UH)();this.annotationContext=e;const n=await this.getBlame();if(null==n)return!1;const o=new Qt.u(i),a=r.D.get("blame"),l=(0,C.Gg)(a.format).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));let h;CommitFormatter.has(a.format,"tips")&&(h=await this.container.git.getBranchesAndTagsTipsFn(n.repoPath));const u={dateFormat:null===a.dateFormat?r.D.get("defaultDateFormat"):a.dateFormat,getBranchAndTagTips:h,tokenOptions:l},d=a.avatars,p=r.D.get("defaultGravatarsStyle"),m=a.separateLines,g=function(e,t,i,n,o){let a,l,h,u=0;for(const e of Object.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){u=-1;break}u+=e.truncateTo}if(u>=0&&(u+=(0,C.dz)((0,C.sX)(n,void 0)),u>0&&(u+=3)),t.enabled&&(a="solid",l="left"===t.location?"0 0 0 2px":"0 2px 0 0"),u>=0){const e=r.D.getAny("editor.letterSpacing");h=null!=e&&0!==e?`calc(${u}ch + ${Math.round(u*e)+(i?13:-6)}px)`:`calc(${u}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new s.ThemeColor(c.wL.GutterBackgroundColor),borderStyle:a,borderWidth:l,color:new s.ThemeColor(c.wL.GutterForegroundColor),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}`,width:h,uncommittedColor:new s.ThemeColor(c.wL.GutterUncommittedForegroundColor)}}(m,a.heatmap,a.avatars,a.format,u),f=[],w=new Map,v=d?new Map:void 0;let y,b,A,P,D=!1;a.heatmap.enabled&&(P=this.getComputedHeatmap(n));for(const e of n.lines){const t=e.line-1;if(A!==e.sha)D=!1,A=e.sha,y=n.commits.get(e.sha),null!=y&&(b=w.get(e.sha),null==b?(b=Ap(y,a.format,u,g),null!=P&&bp(b,y.date,P),b.range=new s.Range(t,0,t,0),f.push(b),d&&null!=y.author.email&&await this.applyAvatarDecoration(y,b,p,v),w.set(e.sha,b)):(b={...b,range:new s.Range(t,0,t,0)},f.push(b)));else{if(null==b)continue;b={...b},a.compact&&!D&&(b.renderOptions={before:{...b.renderOptions.before,contentText:c.NE.Space.repeat((0,C.dz)(b.renderOptions.before.contentText))}},m&&(b.renderOptions.before.textDecoration="none;box-sizing: border-box"+(d?";padding: 0 0 0 18px":"")),D=!0),b.range=new s.Range(t,0,t,0),f.push(b)}}return o.restart({suffix:" to compute gutter blame annotations"}),f.length&&(this.setDecorations([{decorationType:Gp.gutterBlameAnnotation,rangesOrOptions:f}]),o.stop({suffix:" to apply all gutter blame annotations"})),this.registerHoverProviders(r.D.get("hovers.annotations")),!0}async selection(e,t){if(!1===e||null==Gp.gutterBlameHighlight)return;if(null==t&&(t=await this.blame,!t?.lines.length))return;let i;if(null!=e?.sha)i=e.sha;else if(null!=e?.line){if(e.line>=0){const s=t.lines[e.line];i=s?.sha}}else i=(0,ye.Ps)(t.commits.values())?.sha;if(!i)return void this.editor.setDecorations(Gp.gutterBlameHighlight,[]);const r=(0,y.DZ)(t.lines,(e=>e.sha===i?this.editor.document.validateRange(new s.Range(e.line-1,0,e.line-1,1073741824)):void 0));this.editor.setDecorations(Gp.gutterBlameHighlight,r)}async applyAvatarDecoration(e,t,i,s){let r=s.get(e.author.email??"");if(null==r){const t=(await e.getAvatarUri({defaultStyle:i,size:16})).toString(!0);r={contentText:"",height:"16px",width:"16px",textDecoration:`none;position:absolute;top:1px;left:5px;background:url(${encodeURI(t)});background-size:16px 16px;margin-left: 0 !important`},s.set(e.author.email??"",r)}t.renderOptions.after=r}}Ep([(0,d.cM)()],GutterBlameAnnotationProvider.prototype,"onProvideAnnotation",1),Ep([(0,d.cM)({args:!1})],GutterBlameAnnotationProvider.prototype,"selection",1);var Mp=Object.defineProperty,Wp=Object.getOwnPropertyDescriptor;const Lp=2**30;class GutterChangesAnnotationProvider extends AnnotationProviderBase{constructor(e,t,i){super(te.VP.Changes,e,t),this.container=i}mustReopen(e){return this.annotationContext?.sha!==e?.sha||this.annotationContext?.only!==e?.only}clear(){this.state=void 0,null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}selection(e){return Promise.resolve()}validate(){return Promise.resolve(!0)}async onProvideAnnotation(e){const t=(0,Ut.UH)();this.mustReopen(e)&&this.clear(),this.annotationContext=e;let i,r=this.trackedDocument.uri.sha,n=null!=e?.sha&&e.sha!==r?`${e.sha}^`:void 0,o=null==r&&null==n;if(o){let e=await this.container.git.getOldestUnpushedRefForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri);if(null!=e)e=`${e}^`,i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:e}),null!=i?null!=n?n=e:(r=e,n=""):o=!1;else{const e=await this.container.git.getStatusForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),t=e?.getPseudoCommits(this.container,await this.container.git.getCurrentUser(this.trackedDocument.uri.repoPath));t?.length?(i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),r="HEAD"):this.trackedDocument.dirty?r="HEAD":o=!1}}if(!o){if(i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:n??r}),null==i)return!1;null!=n||(r=`${i.ref}^`),n=i.ref}const a=(await Promise.all(null==n&&this.editor.document.isDirty?[this.container.git.getDiffForFileContents(this.trackedDocument.uri,r,this.editor.document.getText()),this.container.git.getDiffForFile(this.trackedDocument.uri,r,n)]:[this.container.git.getDiffForFile(this.trackedDocument.uri,r,n)])).filter((e=>Boolean(e)));if(!a?.length)return!1;const l=new Qt.u(t),c=new Map,h=null!=e?.sha&&e?.only?await this.container.git.getBlame(this.trackedDocument.uri,this.editor?.document):void 0;let u;for(const t of a)for(const i of t.hunks){if(null!=h){let t=!0;const s=e.sha;for(let e=i.current.position.start-1;e<i.current.position.end;e++)h.lines[e]?.sha===s&&(t=!1);if(t)continue}let t=Math.max(i.current.position.start-2,-1),r=-1;for(const e of i.lines){if(r++,t++,"unchanged"===e.current?.state)continue;const n=this.editor.document.validateRange(new s.Range(new s.Position(t,0),new s.Position(t,Lp)));let o;if(null==u&&(u=new s.Selection(n.start,n.end)),null==e.current){const s=i.lines[r-1];if(null==e.previous||null!=s&&null==s.current){t--;continue}if(!(i.previous.count>i.current.count)){t--;continue}o="removed"}else if("added"===e.current?.state)o="removed"===e.previous?.state?"changed":"added";else if("removed"===e?.current.state){if(!(i.previous.count>i.current.count)){t--;continue}o="removed"}else o="changed";let a=c.get(o);null==a?(a={decorationType:"added"===o?Gp.changesLineAddedAnnotation:"removed"===o?Gp.changesLineDeletedAnnotation:Gp.changesLineChangedAnnotation,rangesOrOptions:[{range:n}]},c.set(o,a)):a.rangesOrOptions.push({range:n})}}return l.restart({suffix:" to compute recent changes annotations"}),c.size&&(this.setDecorations([...c.values()]),l.stop({suffix:" to apply all recent changes annotations"}),null!=u&&!1!==e?.selection&&(this.editor.selection=u,this.editor.revealRange(u,s.TextEditorRevealType.InCenterIfOutsideViewport))),this.state={commit:i,diffs:a},this.registerHoverProvider(),!0}registerHoverProvider(){const e=r.D.get("hovers");e.enabled&&e.annotations.enabled&&(this.hoverProviderDisposable=s.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:(e,t,i)=>this.provideHover(e,t,i)}))}async provideHover(e,t,i){if(null==this.state)return;if("line"!==r.D.get("hovers.annotations.over")&&0!==t.character)return;const{commit:n,diffs:o}=this.state;for(const i of o)for(const r of i.hunks){const i="changed"===r.state&&r.previous.count>r.current.count;if(t.line>=r.current.position.start-1&&t.line<=r.current.position.end-(i?0:1)){const o=await kp(n,this.trackedDocument.uri,t.line,r);if(null==o)return;return new s.Hover(o,e.validateRange(new s.Range(r.current.position.start-1,0,r.current.position.end-(i?0:1),Lp)))}}}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Wp(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Mp(t,i,n)})([(0,d.cM)()],GutterChangesAnnotationProvider.prototype,"onProvideAnnotation",1);var Up=Object.defineProperty,Np=Object.getOwnPropertyDescriptor;class GutterHeatmapBlameAnnotationProvider extends BlameAnnotationProviderBase{constructor(e,t,i){super(te.VP.Heatmap,e,t,i)}async onProvideAnnotation(e,t){const i=(0,Ut.UH)();this.annotationContext=e;const r=await this.getBlame();if(null==r)return!1;const n=new Qt.u(i),o=new Map,a=this.getComputedHeatmap(r);let l;for(const e of r.lines){const t=e.line-1;l=r.commits.get(e.sha),null!=l&&Cp(l.date,a,new s.Range(t,0,t,0),o)}return n.restart({suffix:" to compute heatmap annotations"}),o.size&&(this.setDecorations([...o.values()]),n.stop({suffix:" to apply all heatmap annotations"})),!0}selection(e){return Promise.resolve()}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Np(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Up(t,i,n)})([(0,d.cM)()],GutterHeatmapBlameAnnotationProvider.prototype,"onProvideAnnotation",1);const Gp={gutterBlameAnnotation:s.window.createTextEditorDecorationType({rangeBehavior:s.DecorationRangeBehavior.ClosedOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};class FileAnnotationController{constructor(e){this.container=e,this._onDidToggleAnnotations=new s.EventEmitter,this._annotationProviders=new Map,this._keyboardScope=void 0,this._windowAnnotationType=void 0,this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this),r.D.onDidChange(this.onConfigurationChanged,this),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}dispose(){this.clearAll(),Gp.gutterBlameAnnotation?.dispose(),Gp.gutterBlameHighlight?.dispose(),Gp.changesLineChangedAnnotation?.dispose(),Gp.changesLineAddedAnnotation?.dispose(),Gp.changesLineDeletedAnnotation?.dispose(),this._annotationsDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){const t=null==e;let i;if(r.D.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),r.D.changed(e,"blame.toggleMode")&&(i=r.D.get("blame.toggleMode"),this._toggleModes.set(te.VP.Blame,i),t||i!==te.TF.File||this.clearAll()),r.D.changed(e,"changes.toggleMode")&&(i=r.D.get("changes.toggleMode"),this._toggleModes.set(te.VP.Changes,i),t||i!==te.TF.File||this.clearAll()),r.D.changed(e,"heatmap.toggleMode")&&(i=r.D.get("heatmap.toggleMode"),this._toggleModes.set(te.VP.Heatmap,i),t||i!==te.TF.File||this.clearAll()),!t&&r.D.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(const e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??te.VP.Blame)}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null!=e&&!(0,Pi.PH)(e))return;if(this._editor=e,this.isInWindowToggle())return void await this.show(e,this._windowAnnotationType);const t=this.getProvider(e);null==t?((0,Ci.v)(c.zf.AnnotationStatus,void 0),this.detachKeyboardHook()):((0,Ci.v)(c.zf.AnnotationStatus,t.status),this.attachKeyboardHook())}onBlameStateChanged(e){if(e.blameable)return;const t=s.window.activeTextEditor;null!=t&&this.clear(t,"BlameabilityChanged")}onDirtyStateChanged(e){for(const[t,i]of this._annotationProviders)e.document.is(i.document)&&this.clearCore(t,"DocumentChanged")}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)i.document===e&&this.clearCore(t,"DocumentClosed")}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(null!=t)t.restore(e.textEditor);else{const t=(0,ye.sE)(this._annotationProviders.values(),(t=>t.editor.document===e.textEditor.document));if(null==t)return;this.clearCore(t.correlationKey,"ColumnChanged")}}onVisibleTextEditorsChanged(e){for(const t of e)this.getProvider(t)?.restore(t)}isInWindowToggle(){return this.getToggleMode(this._windowAnnotationType)===te.TF.Window}getToggleMode(e){return null==e?te.TF.File:this._toggleModes.get(e)??te.TF.File}clear(e,t="User"){return this.isInWindowToggle()?this.clearAll():this.clearCore(Si(e),t)}async clearAll(){this._windowAnnotationType=void 0;for(const[e]of this._annotationProviders)await this.clearCore(e,"Disposing")}async getAnnotationType(e){const t=this.getProvider(e);if(null==t)return;const i=await this.container.tracker.get(e.document);return null!=i&&i.isBlameable?t.annotationType:void 0}getProvider(e){if(null!=e&&null!=e.document)return this._annotationProviders.get(Si(e))}async show(e,t,i){if(this.getToggleMode(t)===te.TF.Window){let i=null==this._windowAnnotationType;const r=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,r&&(await this.clearAll(),i=!0),i)for(const i of s.window.visibleTextEditors)i!==e&&this.show(i,t)}if(null==e)return!1;this._editor=e;if(!(await this.container.tracker.getOrAdd(e.document)).isBlameable)return!1;const r=this.getProvider(e);if(r?.annotationType===t)return await r.provideAnnotation(i),await r.selection(i?.selection),!0;return null!=await s.window.withProgress({location:s.ProgressLocation.Window},(async s=>{await(0,Ci.v)(c.zf.AnnotationStatus,Di.Computing);const n=this.showAnnotationsCore(r,e,t,i,s),o=await n;return e===this._editor&&await(0,Ci.v)(c.zf.AnnotationStatus,o?.status),n}))}async toggle(e,t,i,s){if(null!=e&&this._toggleModes.get(t)===te.TF.File){const i=await this.container.tracker.getOrAdd(e.document);if(t===te.VP.Changes&&!i.isTracked||!i.isBlameable)return!1}const r=this.getProvider(e);if(null==r)return this.show(e,t,i);const n=r.annotationType!==t||r.mustReopen(i);return!0===s&&!n||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(r.correlationKey,"User"),!!n&&this.show(e,t,i))}async attachKeyboardHook(){null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{const e=this._editor;null!=e&&await this.clear(e,"User")}}}))}async clearCore(e,t){const i=this._annotationProviders.get(e);null!=i&&(be.Yd.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),i.dispose(),0!==this._annotationProviders.size&&e!==Si(this._editor)||(await(0,Ci.v)(c.zf.AnnotationStatus,void 0),await this.detachKeyboardHook()),0===this._annotationProviders.size&&(be.Yd.log("Remove all listener registrations for annotations"),this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,i,r,n){if(null!=n){let e="annotations";switch(i){case te.VP.Blame:e="blame annotations";break;case te.VP.Changes:e="changes annotations";break;case te.VP.Heatmap:e="heatmap annotations"}n.report({message:`Computing ${e} for ${(0,b.EZ)(t.document.fileName)}`})}await this.attachKeyboardHook();const o=await this.container.tracker.getOrAdd(t.document);let a;switch(i){case te.VP.Blame:a=new GutterBlameAnnotationProvider(t,o,this.container);break;case te.VP.Changes:a=new GutterChangesAnnotationProvider(t,o,this.container);break;case te.VP.Heatmap:a=new GutterHeatmapBlameAnnotationProvider(t,o,this.container)}if(null!=a&&await a.validate()){if(null!=e&&await this.clearCore(e.correlationKey,"User"),null==this._annotationsDisposable&&0===this._annotationProviders.size&&(be.Yd.log("Add listener registrations for annotations"),this._annotationsDisposable=s.Disposable.from(s.window.onDidChangeActiveTextEditor((0,Lt.Ds)(this.onActiveTextEditorChanged,50),this),s.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),s.window.onDidChangeVisibleTextEditors((0,Lt.Ds)(this.onVisibleTextEditorsChanged,50),this),s.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this))),this._annotationProviders.set(a.correlationKey,a),await a.provideAnnotation(r))return this._onDidToggleAnnotations.fire(),a;await this.clearCore(a.correlationKey,"Disposing")}}updateDecorations(e){const t=e?Object.entries(Gp):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;const i=new Map;for(const[e,s]of t){if(null==s)continue;s!==(Gp[e]??null)&&i.set(s,Gp[e]??null)}if(0!==i.size)for(const e of s.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){Gp.changesLineAddedAnnotation?.dispose(),Gp.changesLineChangedAnnotation?.dispose(),Gp.changesLineDeletedAnnotation?.dispose();const e=r.D.get("changes.locations");let t,i,n;switch(s.window.activeColorTheme.kind){case s.ColorThemeKind.Light:t=[72,152,93],i=[32,144,211],n=[229,20,0];break;case s.ColorThemeKind.HighContrast:default:t=[72,126,2],i=[27,129,168],n=[241,76,76]}Gp.changesLineAddedAnnotation=s.window.createTextEditorDecorationType({backgroundColor:e.includes(te.hp.Line)?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!e.includes(te.hp.Line)||void 0,gutterIconPath:e.includes(te.hp.Gutter)?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:s.OverviewRulerLane.Left,overviewRulerColor:e.includes(te.hp.Scrollbar)?new s.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),Gp.changesLineChangedAnnotation=s.window.createTextEditorDecorationType({backgroundColor:e.includes(te.hp.Line)?`rgba(${i.join(",")},0.4)`:void 0,isWholeLine:!!e.includes(te.hp.Line)||void 0,gutterIconPath:e.includes(te.hp.Gutter)?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${i.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:s.OverviewRulerLane.Left,overviewRulerColor:e.includes(te.hp.Scrollbar)?new s.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),Gp.changesLineDeletedAnnotation=s.window.createTextEditorDecorationType({gutterIconPath:e.includes(te.hp.Gutter)?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${n.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:s.OverviewRulerLane.Left,overviewRulerColor:e.includes(te.hp.Scrollbar)?new s.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){Gp.gutterBlameHighlight?.dispose(),Gp.gutterBlameHighlight=void 0;const e=r.D.get("blame.highlight");if(e.enabled){const{locations:t}=e,i="#00bcf2",r=t.includes(te.y0.Gutter)?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='${i}' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>`)}`):void 0;Gp.gutterBlameHighlight=s.window.createTextEditorDecorationType({gutterIconPath:r,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:s.OverviewRulerLane.Right,backgroundColor:t.includes(te.y0.Line)?new s.ThemeColor(c.wL.LineHighlightBackgroundColor):void 0,overviewRulerColor:t.includes(te.y0.Scrollbar)?new s.ThemeColor(c.wL.LineHighlightOverviewRulerColor):void 0})}}}var Hp=Object.defineProperty,Vp=Object.getOwnPropertyDescriptor,Qp=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Vp(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Hp(t,i,n),n};const qp=s.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:s.DecorationRangeBehavior.ClosedOpen}),Yp=2**30;class LineAnnotationController{constructor(e){this.container=e,this._enabled=!1,this._suspended=!1,this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this),r.D.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.richRemoteProviders.onDidChangeConnectionState((()=>{this.refresh(s.window.activeTextEditor)})))}dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){r.D.changed(e,"currentLine")&&(r.D.changed(e,"currentLine.enabled")&&(r.D.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(s.window.activeTextEditor))}get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){e.pending||void 0===e.selections?this.clear(e.editor):this.refresh(e.editor)}onFileAnnotationsToggled(){this.refresh(s.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(qp,[])}async getPullRequests(e,t,{timeout:i}={}){if(0===t.length)return;const s=await this.container.git.getBestRemoteWithRichProvider(e);if(null==s?.provider)return;const r=new Set;for(const[,e]of t)r.add(e.ref);if(0===r.size)return;const{provider:n}=s,o=await(0,Nt.xu)(r.values(),(e=>this.container.git.getPullRequestForCommit(e,n)),i);return 0===o.size||(0,ye.yW)(o.values(),(e=>null==e))?void 0:o}async refresh(e,t){if(null==e&&null==this._editor)return;const i=(0,Ut.UH)(),n=this.container.lineTracker.selections;if(null==e||null==n||!(0,Pi.PH)(e))return null!=i&&(i.exitDetails=` ${c.NE.Dot} Skipped because there is no valid editor or no valid selections`),void this.clear(this._editor);this._editor!==e&&(this.clear(this._editor),this._editor=e);const o=r.D.get("currentLine");if(this.suspended)return null!=i&&(i.exitDetails=` ${c.NE.Dot} Skipped because the controller is suspended`),void this.clear(e);const a=await this.container.tracker.getOrAdd(e.document);if(!a.isBlameable&&this.suspended)return null!=i&&(i.exitDetails=` ${c.NE.Dot} Skipped because the ${this.suspended?"controller is suspended":`document(${a.uri.toString(!0)}) is not blameable`}`),void this.clear(e);if(null==e.document||!this.container.lineTracker.includes(n))return void(null!=i&&(i.exitDetails=` ${c.NE.Dot} Skipped because the ${null==e.document?"editor is gone":`selection(s)=${n.map((e=>`[${e.anchor}-${e.active}]`)).join()} are no longer current`}`));null!=i&&(i.exitDetails=` ${c.NE.Dot} selection(s)=${n.map((e=>`[${e.anchor}-${e.active}]`)).join()}`);const l=new Map;for(const e of n){const t=this.container.lineTracker.getState(e.active);null!=t?.commit?l.set(e.active,t.commit):be.Yd.debug(i,`Line ${e.active} returned no commit`)}const h=a.uri.repoPath,[u,d]=await Promise.all([CommitFormatter.has(o.format,"tips")?this.container.git.getBranchesAndTagsTipsFn(h):void 0,null!=h&&o.pullRequests.enabled&&CommitFormatter.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")?t?.prs??this.getPullRequests(h,[...(0,ye.hX)(l,(([,e])=>!e.isUncommitted))],{timeout:100}):void 0]);null!=d&&(this._cancellation?.cancel(),this._cancellation=new s.CancellationTokenSource,this.waitForAnyPendingPullRequests(e,d,this._cancellation.token,100,i));const p=[];for(const[t,i]of l){if(i.isUncommitted&&""===o.uncommittedChangesFormat)continue;const n=Pp(i,i.isUncommitted?o.uncommittedChangesFormat??o.format:o.format,{dateFormat:null===o.dateFormat?r.D.get("defaultDateFormat"):o.dateFormat,getBranchAndTagTips:u,pullRequestOrRemote:d?.get(i.ref),pullRequestPendingMessage:`PR ${c.NE.Ellipsis}`},o.scrollable);n.range=e.document.validateRange(new s.Range(t,Yp,t,Yp)),p.push(n)}e.setDecorations(qp,p)}setLineTracker(e){e?this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)):this.container.lineTracker.unsubscribe(this)}async waitForAnyPendingPullRequests(e,t,i,s,r){const n=(0,ye.QX)(t.values(),(e=>e instanceof Nt.PK));if(i.isCancellationRequested||0===n)return;be.Yd.debug(r,`${c.NE.Dot} ${n} pull request queries took too long (over ${s} ms)`);const o=new Map;for(const[e,i]of t)o.set(e,i instanceof Nt.PK?await i.promise:i);i.isCancellationRequested||e!==this._editor||(be.Yd.debug(r,`${c.NE.Dot} ${n} pull request queries completed; refreshing...`),this.refresh(e,{prs:o}))}}Qp([(0,d.cM)()],LineAnnotationController.prototype,"resume",1),Qp([(0,d.cM)()],LineAnnotationController.prototype,"suspend",1),Qp([(0,d.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),Qp([(0,d.fF)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),Qp([(0,d.cM)({args:!1})],LineAnnotationController.prototype,"toggle",1),Qp([(0,d.fF)({args:!1})],LineAnnotationController.prototype,"refresh",1);var jp=i(8294);class GitRecentChangeCodeLens extends s.CodeLens{constructor(e,t,i,s,r,n,o,a,l,c){super(a,c),this.languageId=e,this.symbol=t,this.uri=i,this.dateFormat=s,this.blame=r,this.blameRange=n,this.isFullRange=o,this.desiredCommand=l}getBlame(){return this.blame?.()}}class GitAuthorsCodeLens extends s.CodeLens{constructor(e,t,i,s,r,n,o,a){super(o),this.languageId=e,this.symbol=t,this.uri=i,this.blame=s,this.blameRange=r,this.isFullRange=n,this.desiredCommand=a}getBlame(){return this.blame()}}class GitCodeLensProvider{constructor(e){this.container=e,this._onDidChangeCodeLenses=new s.EventEmitter}get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(e){this._onDidChangeCodeLenses.fire()}async provideCodeLenses(e,t){if(e.isDirty&&(0,Pi.pt)(e.uri))return[];const i=await this.container.tracker.getOrAdd(e);if(!i.isBlameable)return[];let n=!1;if(e.isDirty)if(i.isDirtyIdle){const t=r.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.lineCount>t&&(n=!0)}else n=!0;const o=r.D.get("codeLens",e);let a=o.scopesByLanguage?.find((t=>t.language?.toLowerCase()===e.languageId));null==a&&(a={language:e.languageId}),null==a.scopes&&(a.scopes=o.scopes),null==a.symbolScopes&&(a.symbolScopes=o.symbolScopes),a.symbolScopes=null!=a.symbolScopes?a.symbolScopes=a.symbolScopes.map((e=>e.toLowerCase())):[];const l=[],h=i.uri;let u,d;if(n){if(1!==a.scopes.length||!a.scopes.includes(te.Uy.Document)){let t;if([t,d]=await Promise.all([this.container.git.isTracked(h),(0,ki.dO)(c.nA.ExecuteDocumentSymbolProvider,e.uri)]),!t)return l}}else{if(t.isCancellationRequested)return l;if(1===a.scopes.length&&a.scopes.includes(te.Uy.Document)?u=await this.container.git.getBlame(h,e):[u,d]=await Promise.all([this.container.git.getBlame(h,e),(0,ki.dO)(c.nA.ExecuteDocumentSymbolProvider,e.uri)]),null==u||0===u?.lines.length)return l}if(t.isCancellationRequested)return l;const p=(0,Lt.IH)((()=>e.validateRange(new s.Range(0,0,1e6,1e6)))),m=n?{command:void 0,title:this.getDirtyTitle(o)}:void 0;if(void 0!==d){be.Yd.log("GitCodeLensProvider.provideCodeLenses:",`${d.length} symbol(s) found`);for(const t of d)this.provideCodeLens(l,e,t,a,p,u,h,o,n,m)}if((a.scopes.includes(te.Uy.Document)||a.symbolScopes.includes("file"))&&!a.symbolScopes.includes("!file")&&null==l.find((e=>0===e.range.start.line&&0===e.range.end.line))){const t=p();let i;if(n||o.recentChange.enabled){n||(i=(0,Lt.IH)((()=>this.container.git.getBlameRange(u,h,t))));const r=new s.SymbolInformation(h.fileName,s.SymbolKind.File,"",new s.Location(h.documentUri(),new s.Range(0,0,0,t.start.character)));l.push(new GitRecentChangeCodeLens(e.languageId,r,h,o.dateFormat,i,t,!0,zp(r),o.recentChange.command,m))}if(!n&&o.authors.enabled){void 0===i&&(i=(0,Lt.IH)((()=>this.container.git.getBlameRange(u,h,t))));const r=new s.SymbolInformation(h.fileName,s.SymbolKind.File,"",new s.Location(h.documentUri(),new s.Range(0,1,0,t.start.character)));l.push(new GitAuthorsCodeLens(e.languageId,r,h,i,t,!0,zp(r),o.authors.command))}}return l}getValidateSymbolRange(e,t,i,r){let n,o=!1;const a=s.SymbolKind[e.kind].toLowerCase();switch(e.kind){case s.SymbolKind.File:(t.scopes.includes(te.Uy.Containers)||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&(n=i());break;case s.SymbolKind.Package:(t.scopes.includes(te.Uy.Containers)||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&(n=zp(e),0===n.start.line&&0===n.end.line&&(n=i()));break;case s.SymbolKind.Class:case s.SymbolKind.Interface:case s.SymbolKind.Module:case s.SymbolKind.Namespace:case s.SymbolKind.Struct:(t.scopes.includes(te.Uy.Containers)||t.symbolScopes.includes(a))&&(n=zp(e),o=!t.symbolScopes.includes(`!${a}`)&&(r||!n.isSingleLine));break;case s.SymbolKind.Constructor:case s.SymbolKind.Enum:case s.SymbolKind.Function:case s.SymbolKind.Method:case s.SymbolKind.Property:(t.scopes.includes(te.Uy.Blocks)||t.symbolScopes.includes(a))&&(n=zp(e),o=!t.symbolScopes.includes(`!${a}`)&&(r||!n.isSingleLine));break;case s.SymbolKind.String:(t.symbolScopes.includes(a)||"markdown"===t.language&&t.scopes.includes(te.Uy.Containers))&&(n=zp(e),o=!t.symbolScopes.includes(`!${a}`)&&(r||!n.isSingleLine));break;default:t.symbolScopes.includes(a)&&(n=zp(e),o=!t.symbolScopes.includes(`!${a}`)&&(r||!n.isSingleLine))}return o?n??zp(e):void 0}provideCodeLens(e,t,i,r,n,o,a,l,c,h){try{const u=this.getValidateSymbolRange(i,r,n,l.includeSingleLineSymbols);if(void 0===u)return;const d=t.lineAt(zp(i).start);if(e.length&&e[e.length-1].range.start.line===d.lineNumber)return;let p,m=0;if((c||l.recentChange.enabled)&&(c||(p=(0,Lt.IH)((()=>this.container.git.getBlameRange(o,a,u)))),e.push(new GitRecentChangeCodeLens(t.languageId,i,a,l.dateFormat,p,u,!1,d.range.with(new s.Position(d.range.start.line,m)),l.recentChange.command,h)),m++),l.authors.enabled){let r=!u.isSingleLine;if(!r&&"csharp"===t.languageId)switch(i.kind){case s.SymbolKind.File:break;case s.SymbolKind.Package:case s.SymbolKind.Module:case s.SymbolKind.Namespace:case s.SymbolKind.Class:case s.SymbolKind.Interface:case s.SymbolKind.Constructor:case s.SymbolKind.Method:case s.SymbolKind.Function:case s.SymbolKind.Enum:r=!0}r&&!c&&(void 0===p&&(p=(0,Lt.IH)((()=>this.container.git.getBlameRange(o,a,u)))),e.push(new GitAuthorsCodeLens(t.languageId,i,a,p,u,!1,d.range.with(new s.Position(d.range.start.line,m)),l.authors.command)))}}finally{if(Kp(i))for(const s of i.children)this.provideCodeLens(e,t,s,r,n,o,a,l,c,h)}}resolveCodeLens(e,t){return e instanceof GitRecentChangeCodeLens?this.resolveGitRecentChangeCodeLens(e,t):e instanceof GitAuthorsCodeLens?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(null==i)return e;const n=(0,ye.Ps)(i.commits.values());if(null==n)return e;let o=`${n.author.name}, ${null==e.dateFormat?n.formattedDate:n.formatDate(e.dateFormat)}`;if(r.D.get("debug")&&(o+=` [${e.languageId}: ${s.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${n.shortSha})]`),!1===e.desiredCommand)return this.applyCommandWithNoClickAction(o,e);switch(e.desiredCommand){case te.N4.CopyRemoteCommitUrl:return this.applyCopyOrOpenCommitOnRemoteCommand(o,e,n,!0);case te.N4.CopyRemoteFileUrl:return this.applyCopyOrOpenFileOnRemoteCommand(o,e,n,!0);case te.N4.DiffWithPrevious:return this.applyDiffWithPreviousCommand(o,e,n);case te.N4.OpenCommitOnRemote:return this.applyCopyOrOpenCommitOnRemoteCommand(o,e,n);case te.N4.OpenFileOnRemote:return this.applyCopyOrOpenFileOnRemoteCommand(o,e,n);case te.N4.RevealCommitInView:return this.applyRevealCommitInViewCommand(o,e,n);case te.N4.ShowCommitsInView:return this.applyShowCommitsInViewCommand(o,e,i,n);case te.N4.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(o,e,n);case te.N4.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(o,e,n);case te.N4.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(o,e);case te.N4.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(o,e);case te.N4.ToggleFileBlame:return this.applyToggleFileBlameCommand(o,e);case te.N4.ToggleFileChanges:return this.applyToggleFileChangesCommand(o,e,n);case te.N4.ToggleFileChangesOnly:return this.applyToggleFileChangesCommand(o,e,n,!0);case te.N4.ToggleFileHeatmap:return this.applyToggleFileHeatmapCommand(o,e);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(null==i)return e;const n=i.authors.size,o=(0,ye.Ps)(i.authors.values())?.name??"Unknown";let a=`${n} ${n>1?"authors":"author"} (${o}${n>1?" and others":""})`;if(r.D.get("debug")&&(a+=` [${e.languageId}: ${s.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${(0,ye.v_)((0,ye.UI)(i.authors.values(),(e=>e.name)),", ")})]`),!1===e.desiredCommand)return this.applyCommandWithNoClickAction(a,e);const l=(0,ye.sE)(i.commits.values(),(e=>e.author.name===o))??(0,ye.Ps)(i.commits.values());if(null==l)return e;switch(e.desiredCommand){case te.N4.CopyRemoteCommitUrl:return this.applyCopyOrOpenCommitOnRemoteCommand(a,e,l,!0);case te.N4.CopyRemoteFileUrl:return this.applyCopyOrOpenFileOnRemoteCommand(a,e,l,!0);case te.N4.DiffWithPrevious:return this.applyDiffWithPreviousCommand(a,e,l);case te.N4.OpenCommitOnRemote:return this.applyCopyOrOpenCommitOnRemoteCommand(a,e,l);case te.N4.OpenFileOnRemote:return this.applyCopyOrOpenFileOnRemoteCommand(a,e,l);case te.N4.RevealCommitInView:return this.applyRevealCommitInViewCommand(a,e,l);case te.N4.ShowCommitsInView:return this.applyShowCommitsInViewCommand(a,e,i);case te.N4.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(a,e,l);case te.N4.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(a,e,l);case te.N4.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(a,e);case te.N4.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(a,e);case te.N4.ToggleFileBlame:return this.applyToggleFileBlameCommand(a,e);case te.N4.ToggleFileChanges:return this.applyToggleFileChangesCommand(a,e,l);case te.N4.ToggleFileChangesOnly:return this.applyToggleFileChangesCommand(a,e,l,!0);case te.N4.ToggleFileHeatmap:return this.applyToggleFileHeatmapCommand(a,e);default:return e}}applyDiffWithPreviousCommand(e,t,i){return t.command=(0,ki._N)({title:e,command:c.Gh.DiffWithPrevious,arguments:[void 0,{commit:i,uri:t.uri.toFileUri()}]}),t}applyCopyOrOpenCommitOnRemoteCommand(e,t,i,s=!1){return t.command=(0,ki._N)({title:e,command:c.Gh.OpenOnRemote,arguments:[{resource:{type:at.J.Commit,sha:i.sha},repoPath:i.repoPath,clipboard:s}]}),t}applyCopyOrOpenFileOnRemoteCommand(e,t,i,s=!1){return t.command=(0,ki._N)({title:e,command:c.Gh.OpenOnRemote,arguments:[{resource:{type:at.J.Revision,fileName:i.file?.path??"",sha:i.sha},repoPath:i.repoPath,clipboard:s}]}),t}applyRevealCommitInViewCommand(e,t,i){return t.command=(0,ki._N)({title:e,command:i?.isUncommitted?"":te.N4.RevealCommitInView,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}applyShowCommitsInViewCommand(e,t,i,s){let r;return r=void 0===s?[...(0,ye.DZ)(i.commits.values(),(e=>e.isUncommitted?void 0:e.ref))]:[s.ref],t.command=(0,ki._N)({title:e,command:0===r.length?"":c.Gh.ShowCommitsInView,arguments:[{repoPath:i.repoPath,refs:r}]}),t}applyShowQuickCommitDetailsCommand(e,t,i){return t.command=(0,ki._N)({title:e,command:i?.isUncommitted?"":te.N4.ShowQuickCommitDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}applyShowQuickCommitFileDetailsCommand(e,t,i){return t.command=(0,ki._N)({title:e,command:i?.isUncommitted?"":te.N4.ShowQuickCommitFileDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}applyShowQuickCurrentBranchHistoryCommand(e,t){return t.command=(0,ki._N)({title:e,command:te.N4.ShowQuickCurrentBranchHistory,arguments:[t.uri.toFileUri()]}),t}applyShowQuickFileHistoryCommand(e,t){return t.command=(0,ki._N)({title:e,command:te.N4.ShowQuickFileHistory,arguments:[t.uri.toFileUri(),{range:t.isFullRange?void 0:t.blameRange}]}),t}applyToggleFileBlameCommand(e,t){return t.command=(0,ki._N)({title:e,command:c.Gh.ToggleFileBlame,arguments:[t.uri.toFileUri()]}),t}applyToggleFileChangesCommand(e,t,i,s){return t.command=(0,ki._N)({title:e,command:c.Gh.ToggleFileChanges,arguments:[t.uri.toFileUri(),{type:te.VP.Changes,context:{sha:i.sha,only:s,selection:!1}}]}),t}applyToggleFileHeatmapCommand(e,t){return t.command=(0,ki._N)({title:e,command:c.Gh.ToggleFileHeatmap,arguments:[t.uri.toFileUri()]}),t}applyCommandWithNoClickAction(e,t){return t.command={title:e,command:""},t}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?r.D.get("strings.codeLens.unsavedChanges.recentChangeAndAuthors"):e.recentChange.enabled?r.D.get("strings.codeLens.unsavedChanges.recentChangeOnly"):r.D.get("strings.codeLens.unsavedChanges.authorsOnly")}}function zp(e){return Kp(e)?e.range:e.location.range}function Kp(e){return(0,Lt.is)(e,"children")}GitCodeLensProvider.selector=[{scheme:c.sN.File},{scheme:c.sN.Git},{scheme:c.sN.GitLens},{scheme:c.sN.PRs},{scheme:c.sN.Vsls},{scheme:c.sN.VslsScc},{scheme:c.sN.Virtual},{scheme:c.sN.GitHub}];class GitCodeLensController{constructor(e){this.container=e,this._canToggle=!1,this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this),r.D.onDidChange(this.onConfigurationChanged,this))}dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(r.D.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&be.Yd.log("CodeLens config changed; resetting CodeLens provider");const t=r.D.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,Ci.v)(c.zf.DisabledToggleCodeLens,!this._canToggle)}}onBlameStateChanged(e){null!=this._provider&&e.blameable&&(be.Yd.log("Blame state changed; resetting CodeLens provider"),this._provider.reset("saved"))}onDirtyIdleTriggered(e){if(null==this._provider||!e.document.isBlameable)return;const t=r.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||(be.Yd.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset("idle"))}toggleCodeLens(){if(this._canToggle){if(be.Yd.log("toggleCodeLens()"),null!=this._provider)return this._providerDisposable?.dispose(),void(this._provider=void 0);this.ensureProvider()}}ensureProvider(){null==this._provider?(this._providerDisposable?.dispose(),this._provider=new GitCodeLensProvider(this.container),this._providerDisposable=s.Disposable.from(s.languages.registerCodeLensProvider(GitCodeLensProvider.selector,this._provider),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))):this._provider.reset()}}class EventBus{constructor(){this._emitter=new s.EventEmitter}get event(){return this._emitter.event}dispose(){this._emitter.dispose()}fire(e,t,i){this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask((()=>this.fire(e,t,i)))}on(e,t,i,s){return this.event((function(s){e===s.name&&t.call(i,s)}),i,s)}}const Jp={done:!0,value:void 0};class StringIterator{constructor(){this._value="",this._pos=0}reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===c.mN.Slash||this._splitOnBackslash&&t===c.mN.Backslash){if(!e)break;this._from++}else e=!1}return this}cmp(e){return this._caseSensitive?(0,C.TT)(e,this._value,0,e.length,this._from,this._to):(0,C.j_)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}}class TernarySearchTreeNode{isEmpty(){return!(this.left||this.mid||this.right||this.value)}}class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let s;for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=i.value()),s=this._root;;){const e=i.cmp(s.segment);if(e>0)s.left||(s.left=new TernarySearchTreeNode,s.left.segment=i.value()),s=s.left;else if(e<0)s.right||(s.right=new TernarySearchTreeNode,s.right.segment=i.value()),s=s.right;else{if(!i.hasNext())break;i.next(),s.mid||(s.mid=new TernarySearchTreeNode,s.mid.segment=i.value()),s=s.mid}}const r=s.value;return s.value=t,s.key=e,r}get(e){return this._getNode(e)?.value}_getNode(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i}has(e){const t=this._getNode(e);return!(void 0===t?.value&&void 0===t?.mid)}delete(e){return this._delete(e,!1)}deleteSuperstr(e){return this._delete(e,!0)}_delete(e,t){const i=this._iter.reset(e),s=[];let r=this._root;for(;r;){const e=i.cmp(r.segment);if(e>0)s.push([1,r]),r=r.left;else if(e<0)s.push([-1,r]),r=r.right;else{if(!i.hasNext()){for(t?(r.left=void 0,r.mid=void 0,r.right=void 0):r.value=void 0;s.length>0&&r.isEmpty();){const[e,t]=s.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}r=t}break}i.next(),s.push([0,r]),r=r.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,s=this._root;for(;s;){const e=t.cmp(s.segment);if(e>0)s=s.left;else if(e<0)s=s.right;else{if(!t.hasNext())break;t.next(),i=s.value||i,s=s.mid}}return s?.value||i}findSuperstr(e,t=!1){const i=this._iter.reset(e);let s=this._root;for(;s;){const e=i.cmp(s.segment);if(e>0)s=s.left;else if(e<0)s=s.right;else{if(!i.hasNext()){if(!s.mid)return;return s=s.mid,{[Symbol.iterator]:()=>this._nodeIterator(s,t)}}i.next(),s=s.mid}}}_nodeIterator(e,t=!1){let i,s,r;return{next:()=>(r||(r=[],s=0,this._forEach(e,(e=>r.push(e)),t)),s>=r.length?Jp:(i?i.value=r[s++]:i={done:!1,value:r[s++]},i))}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,ye.QX)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,ye.UI)(this.entries(),(([,e])=>e))}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,s=0;for(;t=e.next(),!t.done;)if(i=t.value,s++,s>1)return;return i}some(e){return void 0!==this._root&&!this._root.isEmpty()&&(0,ye.G)(this.entries(),(([,t])=>e(t)))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}}var Zp=Object.defineProperty,Xp=Object.getOwnPropertyDescriptor,em=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xp(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Zp(t,i,n),n};const tm=new Uint8Array(0);function im(e){const t=(0,st.uy)(e)?e:st.YY.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}class GitFileSystemProvider{constructor(e){this.container=e,this._searchTreeMap=new Map,this._onDidChangeFile=new s.EventEmitter,this._disposable=s.Disposable.from(s.workspace.registerFileSystemProvider(c.sN.GitLens,this,{isCaseSensitive:Je.IJ,isReadonly:!0}))}dispose(){this._disposable.dispose()}get onDidChangeFile(){return this._onDidChangeFile.event}copy(e,t,i){throw s.FileSystemError.NoPermissions(e)}createDirectory(e){throw s.FileSystemError.NoPermissions(e)}delete(e,t){throw s.FileSystemError.NoPermissions(e)}async readDirectory(e){const{path:t,ref:i,repoPath:r}=im(e),n=await this.getTree(t,i,r);if(void 0===n)throw s.FileSystemError.FileNotFound(e);return[...(0,ye.UI)(n,(e=>[null!=t&&0!==t.length?(0,b.AH)((0,b.Gf)(t,e.path)):e.path,sm(e.type)]))]}async readFile(e){const{path:t,ref:i,repoPath:s}=im(e);if(i===P.Ii)return tm;const r=await this.container.git.getRevisionContent(s,t,i);return null!=r?r:tm}rename(e,t,i){throw s.FileSystemError.NoPermissions(e)}async stat(e){const{path:t,ref:i,repoPath:r}=im(e);if(i===P.Ii)return{type:s.FileType.File,size:0,ctime:0,mtime:0};let n;const o=this._searchTreeMap.get(i);if(void 0!==o)n=(await o).get(`/~/${t}`);else{if(null==t||0===t.length){if(void 0===await this.getTree(t,i,r))throw s.FileSystemError.FileNotFound(e);return{type:s.FileType.Directory,size:0,ctime:0,mtime:0}}n=await this.container.git.getTreeEntryForRevision(r,t,i)}if(void 0===n)throw s.FileSystemError.FileNotFound(e);return{type:sm(n.type),size:n.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw s.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){const i=TernarySearchTree.forPaths(),s=await this.container.git.getTreeForRevision(t,e);i.set("~",{commitSha:"",path:"~",size:0,type:"tree"});for(const e of s)i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}}function sm(e){switch(e){case"blob":return s.FileType.File;case"tree":return s.FileType.Directory;default:return s.FileType.Unknown}}em([(0,d.fF)()],GitFileSystemProvider.prototype,"readDirectory",1),em([(0,d.fF)()],GitFileSystemProvider.prototype,"readFile",1),em([(0,d.fF)()],GitFileSystemProvider.prototype,"stat",1);var rm=i(4575),nm=i(2133),om=Object.defineProperty,am=Object.getOwnPropertyDescriptor,lm=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?am(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&om(t,i,n),n};const cm=Object.freeze([]),hm=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);class GitProviderService{constructor(e){this.container=e,this._onDidChangeProviders=new s.EventEmitter,this._onDidChangeRepositories=new s.EventEmitter,this._onDidChangeRepository=new s.EventEmitter,this.supportedSchemes=new Set,this._pendingRepositories=new Map,this._providers=new Map,this._repositories=new nm.x8,this._bestRemotesCache=new Map,this._visitedPaths=new Gt.u$,this._etag=0,this._initializing=!0,this._discoveredWorkspaceFolders=new Map,this._accessCache=new Map,this._context={enabled:!1,disabled:!1},this._disposable=s.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this),s.window.onDidChangeWindowState(this.onWindowStateChanged,this),s.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),r.D.onDidChange(this.onConfigurationChanged,this),e.richRemoteProviders.onDidChangeConnectionState((e=>{"connected"===e.reason&&(0,Ze.E3)("failed"),this.resetCaches("providers"),this.updateContext()})),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,ye.v_)(this._providers.keys(),",")}),this.container.telemetry.sendEvent("providers/changed",{"providers.added":e?.length??0,"providers.removed":t?.length??0}),this._etag=Date.now(),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){const i=this.openRepositories.map((e=>e.uri.scheme));this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,y.h8)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0}),this._etag=Date.now(),this._accessCache.clear(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&queueMicrotask((()=>{for(const t of e)this.container.telemetry.sendEvent("repository/opened",{"repository.id":t.idHash,"repository.scheme":t.uri.scheme,"repository.closed":t.closed,"repository.folder.scheme":t.folder?.uri.scheme,"repository.provider.id":t.provider.id})}))}get onDidChangeRepository(){return this._onDidChangeRepository.event}dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach((e=>e.dispose())),this._repositories.clear()}get etag(){return this._etag}onConfigurationChanged(e){(r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),r.D.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),r.D.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&r.D.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,ki.xR)("gitlens.plus.resetRepositoryAccess",(()=>this.clearAllRepoVisibilityCaches())),(0,ki.xR)("gitlens.plus.refreshRepositoryAccess",(()=>this.clearAllOpenRepoVisibilityCaches()))]}onSubscriptionChanged(e){this._accessCache.clear(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach((e=>e.resume())):this._repositories.forEach((e=>e.suspend()))}onWorkspaceFoldersChanged(e){const t=s.workspace.workspaceFolders?.map((e=>e.uri.scheme));if(this.container.telemetry.setGlobalAttributes({"folders.count":t?.length??0,"folders.schemes":null!=t?(0,y.h8)(t,", "):""}),e.added.length&&this.discoverRepositories(e.added),e.removed.length){const t=[];for(const i of e.removed){const e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask((()=>{this.fireRepositoriesChanged([],t),t.forEach((e=>e.dispose()))})))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,ye.UI)(this._providers.values(),(e=>({...e.descriptor})))]}get openRepositories(){if(0===this.repositoryCount)return cm;const e=[...(0,ye.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?e:lt._j.sort(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,ye.QX)(this.repositories,(e=>!e.closed))}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount?(0,ye.Ps)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw new Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw new Error(`Provider '${e}' has already been registered`);this._providers.set(e,t);for(const e of t.supportedSchemes)this.supportedSchemes.add(e);const i=[],r=t.openRepositoryInitWatcher?.();null!=r&&i.push(r,r.onDidCreate((e=>{const t=s.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})})));const n=s.Disposable.from(t,...i,t.onDidChangeRepository((async e=>{if(e.changed(lt.I6.Remotes,lt.I6.RemoteProviders,lt.du.Any)&&this._bestRemotesCache.clear(),e.changed(lt.I6.Closed,lt.du.Any)&&(this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged([],[e.repository])))),e.changed(lt.I6.Remotes,lt.du.Any)){const i=await t.getRemotes(e.repository.path),s=this.getVisibilityInfoFromCache(e.repository.path);null!=s&&this.checkVisibilityCachedRemotes(e.repository.path,s,i)}this._onDidChangeRepository.fire(e)})),t.onDidCloseRepository((e=>{const t=this._repositories.get(e.uri);null!=t&&(t.closed=!0)})),t.onDidOpenRepository((e=>{const t=this._repositories.get(e.uri);null!=t?t.closed=!1:this.getOrOpenRepository(e.uri)})));return this.fireProvidersChanged([t]),this._initializing||this.onWorkspaceFoldersChanged({added:s.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{n.dispose(),this._providers.delete(e);const i=[];for(const t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));const{deactivating:s}=this.container;s||this.updateContext(),i.length&&queueMicrotask((()=>{s||this.fireRepositoriesChanged([],i),i.forEach((e=>e.dispose()))})),s||this.fireProvidersChanged([],[t])}}}registrationComplete(){const e=(0,Ut.UH)();this._initializing=!1;const{workspaceFolders:t}=s.workspace;t?.length?this.discoverRepositories(t):this.updateContext();const i=r.D.getAny(c.eq.AutoRepositoryDetection);queueMicrotask((()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i}))),null!=e&&(e.exitDetails=` ${c.NE.Dot} workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map((e=>this._providers.get(e)))}getOpenRepositories(e){return(0,ye.hX)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}getOpenRepositoriesByProvider(){const e=[...(0,ye.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?new Map:(0,y.XI)(e,(e=>e.provider.id))}hasOpenRepositories(e){return(0,ye.G)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}async discoverRepositories(e,t){const i=[];for(const s of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(s))continue;const e=this.discoverRepositoriesCore(s);i.push(e),this._discoveredWorkspaceFolders.set(s,e)}if(0===i.length)return;const s=await Promise.allSettled(i),r=(0,ye.VS)((0,ye.hX)(s,(e=>"fulfilled"===e.status)),(e=>e.value)),n=[];for(const e of r)this._repositories.add(e)&&n.push(e);this.updateContext(),0!==n.length&&queueMicrotask((()=>this.fireRepositoriesChanged(n)))}async discoverRepositoriesCore(e){const{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),be.Yd.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}async access(e,t){if(null==t){let i=this._accessCache.get(void 0);return null==i&&(i=this.accessCore(e,t),this._accessCache.set(void 0,i)),i}const{path:i}=this.getProvider(t),s=i;let r=this._accessCache.get(s);return null==r&&(r=this.accessCore(e,t),this._accessCache.set(s,r)),r}async accessCore(e,t){const i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask((()=>{this.visibility()}));const s=i.plan.effective.id;if((0,lr.aG)(s))return{allowed:!1!==i.account?.verified,subscription:{current:i}};function r(e,t=!1){const{path:s}=this.getProvider(e);let r=t?void 0:this._accessCache.get(s);return null==r&&(r=this.visibility(e).then((e=>e===it.q4.Private?{allowed:!1,subscription:{current:i,required:lr.Cx.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e}),(()=>({allowed:!0,subscription:{current:i}}))),this._accessCache.set(s,r)),r}if(null==t){const e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return r.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:lr.Cx.Pro},visibility:it.q4.Private};case"mixed":return{allowed:"mixed",subscription:{current:i,required:lr.Cx.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:it.q4.Public}}}return r.call(this,t,!0)}async ensureAccess(e,t){const{allowed:i,subscription:s}=await this.access(e,t);if(!1===i)throw new rm.$y(s.current,s.required)}supports(e,t){const{provider:i}=this.getProvider(e);return i.supports(t)}ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){const e=this.container.storage.get("repoVisibility")?.map((([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]));this._repoVisibilityCache=new Map(e)}}clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach((e=>this._repoVisibilityCache?.delete(e)));const t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?this.container.storage.delete("repoVisibility"):this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();const t=this._repoVisibilityCache?.get(e);if(null==t)return;if(!(Date.now()-t.timestamp>2592e6))return t;this.clearRepoVisibilityCache([e])}checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if(t.visibility===it.q4.Public){if(0==i.length||!i.some((e=>e.id===t.remotesHash)))return this.clearRepoVisibilityCache([e]),!1}else if(t.visibility===it.q4.Private){if(i.map((e=>e.id)).sort().join(",")!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1}return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries()))}clearAllRepoVisibilityCaches(){this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){const e=this.openRepositories.map((e=>this.getProvider(e.path).path));this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility"),this._reposVisibilityCache=e),e}const{path:t}=this.getProvider(e);let i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),queueMicrotask((()=>{const t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})}))),i}async visibilityCore(e){async function t(e){const{provider:t,path:i}=this.getProvider(e),s=await t.getRemotes(i,{sort:!0}),r=this.getVisibilityInfoFromCache(i);if(null==r||!this.checkVisibilityCachedRemotes(i,r,s)){const[e,s]=await t.visibility(i);return e!==it.q4.Local&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:s}),e}return r.visibility}if(null==e){const e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,s=!1,r=!1;for await(const n of(0,Nt.Wx)(e.map((e=>t.call(this,e.path)))))if("fulfilled"===n.status)if(n.value===it.q4.Public){if(r||s)return"mixed";i=!0}else if(n.value===it.q4.Local){if(i||s)return"mixed";r=!0}else if(n.value===it.q4.Private){if(i||r)return"mixed";s=!0}return i?"public":r?"local":"private"}return t.call(this,e)}async setEnabledContext(e){let t=!e;if(!e&&this._initializing&&(t=!(this.container.storage.getWorkspace("assumeRepositoriesOnStartup")??1)),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;const i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,Ci.v)(c.zf.Enabled,e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,Ci.v)(c.zf.Disabled,t))),await Promise.allSettled(i),this._initializing||this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}updateContext(){if(this.container.deactivating)return;const e=this.openRepositoryCount,t=0!==e;this.setEnabledContext(t),this._initializing||(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(async function(){const e=r.D.get("integrations.enabled");let i=!1,s=!1,n=!1;if(t)for(const t of this._repositories.values())if(!n&&e&&(n=await t.hasRichRemote(!0),n&&(s=!0,i=!0)),!s&&e&&(s=await t.hasRichRemote(),s&&(i=!0)),i||(i=await t.hasRemotes()),i&&(s&&n||!e))break;this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":i,"repositories.hasRichRemotes":s,"repositories.hasConnectedRemotes":n}),queueMicrotask((()=>this.container.telemetry.sendEvent("providers/context"))),await Promise.allSettled([(0,Ci.v)(c.zf.HasRemotes,i),(0,Ci.v)(c.zf.HasRichRemotes,s),(0,Ci.v)(c.zf.HasConnectedRemotes,n)])}.call(this),this._providers.forEach((e=>e.updateContext?.()))))}getProvider(e){if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new rm.MO(e);let t;"string"==typeof e?t=(0,b.UG)(e)??c.sN.File:({scheme:t}=e);const i=new Set;for(const s of this._providers.values()){const r=s.canHandlePathOrUri(t,e);null!=r&&i.add({provider:s,path:r})}if(0===i.size)throw new rm.MO(e);if(i.size>1)for(const e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e;return(0,ye.Ps)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,b.tE)(e)?s.Uri.parse(e,!0):s.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){const i=(0,b.AH)(e);if(!(0,b.YP)(i))return s.Uri.joinPath(t,i)}const{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===P.Ii)return;const{provider:s,path:r}=this.getProvider(e);return s.getBestRevisionUri(r,s.getRelativePath(t,r),i)}getRelativePath(e,t){const{provider:i}=this.getProvider(e instanceof s.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let s,r;"string"==typeof e?(r=e,s="string"==typeof t?t:t?.originalPath??t?.path??""):(r=e.sha,i=e.repoPath,s=(0,b.M)(e));const{provider:n,path:o}=this.getProvider(i);return n.getRevisionUri(o,n.getRelativePath(s,o),r)}getWorkingUri(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getWorkingUri(s,t)}addRemote(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.addRemote(n,t,i,s)}pruneRemote(e,t){const{provider:i,path:s}=this.getProvider(e);return i.pruneRemote(s,t)}removeRemote(e,t){const{provider:i,path:s}=this.getProvider(e);return i.removeRemote(s,t)}applyChangesToWorkingFile(e,t,i){const{provider:s}=this.getProvider(e);return s.applyChangesToWorkingFile(e,t,i)}checkout(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.checkout(r,t,i)}resetCaches(...e){(0===e.length||e.includes("providers"))&&this._bestRemotesCache.clear(),this.container.events.fire("git:cache:reset",{caches:e})}excludeIgnoredUris(e,t){const{provider:i,path:s}=this.getProvider(e);return i.excludeIgnoredUris(s,t)}fetch(e,t){const{provider:i,path:s}=this.getProvider(e);return i.fetch(s,t)}async fetchAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await s.window.withProgress({location:s.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.fetch({progress:!1,...t})))))):await e[0].fetch(t))}async pullAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await s.window.withProgress({location:s.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.pull({progress:!1,...t})))))):await e[0].pull(t))}async pushAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await s.window.withProgress({location:s.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.push({progress:!1,...t})))))):await e[0].push(t))}getAheadBehindCommitCount(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getAheadBehindCommitCount(s,t)}async getBlame(e,t){const{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){const{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,s){const{provider:r}=this.getProvider(e);return r.getBlameForLine(e,t,i,s)}async getBlameForLineContents(e,t,i,s){const{provider:r}=this.getProvider(e);return r.getBlameForLineContents(e,t,i,s)}async getBlameForRange(e,t){const{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){const{provider:s}=this.getProvider(e);return s.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){const{provider:s}=this.getProvider(t);return s.getBlameRange(e,t,i)}async getBranch(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getBranch(i)}async getBranchAheadRange(e){if(e.state.ahead>0)return(0,u.oI)(e.upstream?.name,e.ref);if(null==e.upstream){const{values:t}=await this.getBranches(e.repoPath,{filter:e=>hm.has(e.name)});if(t.length>0){let i;for(const e of t){const t=hm.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}const s=i.branch.upstream?.name??i.branch.ref;if(s!==e.ref)return(0,u.oI)(s,e.ref)}}}async getBranches(e,t){if(null==e)return{values:[]};const{provider:i,path:s}=this.getProvider(e);return i.getBranches(s,t)}async getBranchesAndTagsTipsFn(e,t){const[i,s]=await Promise.allSettled([this.getBranches(e),this.getTags(e)]),r=(0,Nt.Sb)(i)?.values??[],n=(0,Nt.Sb)(s)?.values??[],o=(0,y.Qy)(r.concat(n),(e=>e.sha),(e=>{if(t){if(e.name===t)return;if("branch"===e.refType&&e.getNameWithoutRemote()===t)return{name:e.name,compactName:e.getRemoteName(),type:e.refType}}return{name:e.name,compactName:void 0,type:e.refType}}));return(e,t)=>{const i=o.get(e);if(null!=i&&0!==i.length){if(!t?.compact)return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.name}`)).join(", ");if(i.length>1){const[e]=i;return`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}, ${c.NE.Ellipsis}`}return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}`)).join(", ")}}}getChangedFilesCount(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getChangedFilesCount(s,t)}async getCommit(e,t){const{provider:i,path:s}=this.getProvider(e);if(t===P.CL||t===P.pw){const i=new Date,r=await this.getCurrentUser(e);return new A.aM(this.container,s,t,new A._j("You",r?.email??void 0,i),new A._j("You",r?.email??void 0,i),"Uncommitted changes",[],"Uncommitted changes",void 0,void 0,[])}return i.getCommit(s,t)}getCommitBranches(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.getCommitBranches(r,t,i)}getCommitCount(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getCommitCount(s,t)}async getCommitForFile(e,t,i){if(null==e)return;const{provider:s,path:r}=this.getProvider(e);return s.getCommitForFile(r,t,i)}getCommitsForGraph(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.getCommitsForGraph(r,t,i)}async getConfig(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getConfig?.(s,t)}async setConfig(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.setConfig?.(r,t,i)}async getContributors(e,t){if(null==e)return[];const{provider:i,path:s}=this.getProvider(e);return i.getContributors(s,t)}getCurrentUser(e){const{provider:t,path:i}=this.getProvider(e);return t.getCurrentUser(i)}async getDefaultBranchName(e,t){if(null==e)return;const{provider:i,path:s}=this.getProvider(e);return i.getDefaultBranchName(s,t)}async getDiff(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.getDiff?.(n,t,i,s)}getDiffForFile(e,t,i){const{provider:s}=this.getProvider(e);return s.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){const{provider:s}=this.getProvider(e);return s.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,s){const{provider:r}=this.getProvider(e);return r.getDiffForLine(e,t,i,s)}getDiffStatus(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.getDiffStatus(n,t,i,s)}async getFileStatusForCommit(e,t,i){if(i===P.Ii||(0,u.l3)(i))return;const{provider:s,path:r}=this.getProvider(e);return s.getFileStatusForCommit(r,t,i)}getGitDir(e){const{provider:t,path:i}=this.getProvider(e);return Promise.resolve(t.getGitDir?.(i))}getLastFetchedTimestamp(e){const{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}async getLog(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getLog(s,t)}async getLogRefsOnly(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getLogRefsOnly(s,t)}async getLogForFile(e,t,i){if(null==e)return;const{provider:s,path:r}=this.getProvider(e);return s.getLogForFile(r,t,i)}async getMergeBase(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.getMergeBase(n,t,i,s)}async getMergeStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getMergeStatus(i)}async getRebaseStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getRebaseStatus(i)}getNextComparisonUris(e,t,i,s=0){if(!i)return Promise.resolve(void 0);const{provider:r,path:n}=this.getProvider(e);return r.getNextComparisonUris(n,t,i,s)}async getOldestUnpushedRefForFile(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getOldestUnpushedRefForFile(s,t)}getPreviousComparisonUris(e,t,i,s=0,r=!1){if(i===P.Ii)return Promise.resolve(void 0);const{provider:n,path:o}=this.getProvider(e);return n.getPreviousComparisonUris(o,t,i,s,r)}getPreviousComparisonUrisForLine(e,t,i,s,r=0){if(s===P.Ii)return Promise.resolve(void 0);const{provider:n,path:o}=this.getProvider(e);return n.getPreviousComparisonUrisForLine(o,t,i,s,r)}async getPullRequestForBranch(e,t,i){let s,r;if(ot.ss.is(t)){if(({provider:s}=t),!s?.hasRichIntegration())return}else s=t;null!=i&&({timeout:r,...i}=i);let n=s.getPullRequestForBranch(e,i);if(null==n||!(0,Nt.tI)(n))return n;null!=r&&r>0&&(n=(0,Nt.HO)(n,r));try{return await n}catch(e){if(e instanceof Nt.PK)throw e;return}}async getPullRequestForCommit(e,t,i){if((0,u.l3)(e))return;let s;if(ot.ss.is(t)){if(({provider:s}=t),!s?.hasRichIntegration())return}else s=t;let r=s.getPullRequestForCommit(e);if(null==r||!(0,Nt.tI)(r))return r;null!=i?.timeout&&i.timeout>0&&(r=(0,Nt.HO)(r,i.timeout));try{return await r}catch(e){if(e instanceof Nt.PK)throw e;return}}async getMyPullRequests(e,t){let i,s;if(ot.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:s,...t}=t);let r=i.searchMyPullRequests();if(null==r||!(0,Nt.tI)(r))return r;null!=s&&s>0&&(r=(0,Nt.HO)(r,s));try{return await r}catch(e){if(e instanceof Nt.PK)throw e;return}}async getMyIssues(e,t){let i,s;if(ot.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:s,...t}=t);let r=i.searchMyIssues();if(null==r||!(0,Nt.tI)(r))return r;null!=s&&s>0&&(r=(0,Nt.HO)(r,s));try{return await r}catch(e){if(e instanceof Nt.PK)throw e;return}}async getIncomingActivity(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getIncomingActivity(s,t)}async getBestRemoteWithProvider(e){if(null==e)return;let t,i;if(Array.isArray(e)){if(0===e.length)return;t=e,i=e[0].repoPath}else i=e;"string"==typeof i&&(i=this.getAbsoluteUri(i));const s=(0,nm.YW)(i);let r=this._bestRemotesCache.get(s);if(void 0!==r)return r??void 0;if(t=(t??await this.getRemotesWithProviders(i)).filter((e=>null!=e.provider)),0!==t.length){if(1===t.length)r=t[0];else{const e=new Map([["upstream",15],["origin",10]]),i=await this.getBranch(t[0].repoPath),s=i?.getRemoteName();let n;null!=s&&e.set(s,100);let o=0;for(const i of t){if(i.default){n=i;break}const t=e.get(i.name)??-1;t>o&&(n=i,o=t)}r=n??null}return this._bestRemotesCache.set(s,r),r??void 0}}async getBestRemoteWithRichProvider(e,t){if(null==e)return;let i,s;if(Array.isArray(e)){if(0===e.length)return;i=e,s=e[0].repoPath}else s=e;"string"==typeof s&&(s=this.getAbsoluteUri(s));const r=(0,nm.YW)(s);let n=this._bestRemotesCache.get(`rich+connected|${r}`);if(null!=n)return n;if(null===n&&!t?.includeDisconnected)return;if(t?.includeDisconnected&&(n=this._bestRemotesCache.get(`rich|${r}`),void 0!==n))return n??void 0;const o=await(null!=i?this.getBestRemoteWithProvider(i):this.getBestRemoteWithProvider(s));if(!o?.hasRichProvider())return this._bestRemotesCache.set(`rich|${r}`,null),void this._bestRemotesCache.set(`rich+connected|${r}`,null);const{provider:a}=o;if(a.maybeConnected??await a.isConnected())this._bestRemotesCache.set(`rich|${r}`,o),this._bestRemotesCache.set(`rich+connected|${r}`,o);else if(this._bestRemotesCache.set(`rich|${r}`,o),this._bestRemotesCache.set(`rich+connected|${r}`,null),!t?.includeDisconnected)return;return o}async getRemotes(e,t){if(null==e)return[];const{provider:i,path:s}=this.getProvider(e);return i.getRemotes(s,t)}async getRemotesWithProviders(e,t){if(null==e)return[];const i=this.container.git.getRepository(e);return(await(null!=i?i.getRemotes(t):this.getRemotes(e,t))).filter((e=>null!=e.provider))}getBestRepository(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof s.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??s.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return(0,ye.Ps)(this._repositories.values());if(null!=e&&e instanceof s.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??s.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,ye.Ps)(this._repositories.values())}}async getOrOpenRepository(e,t){const i=(0,Ut.UH)(),n=(0,b.M)(e);let o,a;o=this.getRepository(e);if(t?.detectNested??r.D.get("detectNestedRepositories",e)){if(!t?.force&&this._visitedPaths.has(n))return o;if(((await s.workspace.fs.stat(e)).type&s.FileType.Directory)!==s.FileType.Directory&&(e=s.Uri.joinPath(e,".."),!t?.force&&this._visitedPaths.has((0,b.M)(e))))return o;a=!0}else if(null!=o)return o;const l=(0,nm.YW)(e);let h=this._pendingRepositories.get(l);if(null==h){async function u(){const{provider:s}=this.getProvider(e),h=await s.findRepositoryUri(e,a);if(this._visitedPaths.set(n),null==h)return;let u;if(0!==this._repositories.count){if(o=this._repositories.get(h),null!=o)return o;u=this._repositories.getClosest(s.getAbsoluteUri(e,h))}const d=r.D.getAny(c.eq.AutoRepositoryDetection)??!0,p=t?.closeOnOpen??(!0!==d&&"openEditors"!==d);be.Yd.log(i,`Repository found in '${h.toString(!0)}'`);const m=s.openRepository(u?.folder,h,!1,void 0,p);for(const e of m)this._repositories.add(e);return this._pendingRepositories.delete(l),this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged(m))),o=1===m.length?m[0]:this.getRepository(e),o}h=u.call(this),this._pendingRepositories.set(l,h)}return h}async getOrOpenRepositoryForEditor(e){return null==(e=e??s.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(const i of this.openRepositories)for(const s of await i.getRemotes()){const r=await(s?.provider?.getLocalInfoFromRemoteUri(i,e,t));if(null!=r)return r}}async getStash(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStash(i)}async getStatusForFile(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getStatusForFile(s,t)}async getStatusForFiles(e,t){const{provider:i,path:s}=this.getProvider(e);return i.getStatusForFiles(s,t)}async getStatusForRepo(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStatusForRepo(i)}async getTags(e,t){if(null==e)return{values:[]};const{provider:i,path:s}=this.getProvider(e);return i.getTags(s,t)}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;const{provider:s,path:r}=this.getProvider(e);return s.getTreeEntryForRevision(r,s.getRelativePath(t,r),i)}async getTreeForRevision(e,t){if(null==e)return[];const{provider:i,path:s}=this.getProvider(e);return i.getTreeForRevision(s,t)}getRevisionContent(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.getRevisionContent(r,t,i)}async getUniqueRepositoryId(e){const{provider:t,path:i}=this.getProvider(e),s=await t.getUniqueRepositoryId(i);return null!=s?s:"0"}async hasBranchOrTag(e,t){if(null==e)return!1;const{provider:i,path:s}=this.getProvider(e);return i.hasBranchOrTag(s,t)}async hasCommitBeenPushed(e,t){if(null==e)return!1;const{provider:i,path:s}=this.getProvider(e);return i.hasCommitBeenPushed(s,t)}async hasRemotes(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasRemotes()}async hasTrackingBranch(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasUpstreamBranch()}isRepositoryForEditor(e,t){return null!=(t=t??s.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTracked(e)}async getDiffTool(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getDiffTool(i)}async openDiffTool(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.openDiffTool(r,t,i)}async openDirectoryCompare(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.openDirectoryCompare(n,t,i,s)}async resolveReference(e,t,i,s){if(null!=i&&(0,u.j$)(t)&&(t="HEAD"),!t||t===P.Ii||null==i&&(0,u.D3)(t)||null!=i&&(0,u.l3)(t))return t;const{provider:r,path:n}=this.getProvider(e);return r.resolveReference(n,t,i,s)}async richSearchCommits(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.richSearchCommits(r,t,i)}searchCommits(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.searchCommits(r,t,i)}validateBranchOrTagName(e,t){const{provider:i,path:s}=this.getProvider(e);return i.validateBranchOrTagName(s,t)}async validateReference(e,t){if(null==t||0===t.length)return!1;if(t===P.Ii||(0,u.l3)(t))return!0;const{provider:i,path:s}=this.getProvider(e);return i.validateReference(s,t)}stageFile(e,t){const{provider:i,path:s}=this.getProvider(e);return i.stageFile(s,t)}stageDirectory(e,t){const{provider:i,path:s}=this.getProvider(e);return i.stageDirectory(s,t)}unStageFile(e,t){const{provider:i,path:s}=this.getProvider(e);return i.unStageFile(s,t)}unStageDirectory(e,t){const{provider:i,path:s}=this.getProvider(e);return i.unStageDirectory(s,t)}stashApply(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.stashApply(r,t,i)}stashDelete(e,t,i){const{provider:s,path:r}=this.getProvider(e);return s.stashDelete(r,t,i)}stashSave(e,t,i,s){const{provider:r,path:n}=this.getProvider(e);return r.stashSave(n,t,i,s)}createWorktree(e,t,i){const{provider:s,path:r}=this.getProvider(e);return Promise.resolve(s.createWorktree?.(r,t,i))}async getWorktree(e,t){const{provider:i,path:s}=this.getProvider(e);return(await(i.getWorktrees?.(s))??[]).find(t)}async getWorktrees(e){const{provider:t,path:i}=this.getProvider(e);return await(t.getWorktrees?.(i))??[]}async getWorktreesDefaultUri(e){const{provider:t,path:i}=this.getProvider(e);let r=await(t.getWorktreesDefaultUri?.(i));return null!=r||(r=this.getRepository(i)?.uri,null!=r&&(r=s.Uri.joinPath(r,".."))),r}deleteWorktree(e,t,i){const{provider:s,path:r}=this.getProvider(e);return Promise.resolve(s.deleteWorktree?.(r,t,i))}async getOpenScmRepositories(){const e=await Promise.allSettled([...this._providers.values()].map((e=>e.getOpenScmRepositories())));return[...(0,ye.VS)((0,ye.hX)(e,(e=>"fulfilled"===e.status)),(e=>e.value))]}getScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}}lm([(0,d.fF)()],GitProviderService.prototype,"onSubscriptionChanged",1),lm([(0,d.fF)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),lm([(0,d.fF)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),lm([(0,d.cM)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),lm([(0,d.cM)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),lm([(0,d.cM)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),lm([(0,d.fF)()],GitProviderService.prototype,"accessCore",1),lm([(0,d.fF)()],GitProviderService.prototype,"visibilityCore",1),lm([(0,d.fF)()],GitProviderService.prototype,"setEnabledContext",1),lm([(0,d.cM)()],GitProviderService.prototype,"getBestRevisionUri",1),lm([(0,d.cM)()],GitProviderService.prototype,"getRevisionUri",1),lm([(0,d.cM)()],GitProviderService.prototype,"getWorkingUri",1),lm([(0,d.cM)()],GitProviderService.prototype,"addRemote",1),lm([(0,d.cM)()],GitProviderService.prototype,"pruneRemote",1),lm([(0,d.cM)()],GitProviderService.prototype,"removeRemote",1),lm([(0,d.cM)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"checkout",1),lm([(0,d.cM)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),lm([(0,d.cM)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"fetch",1),lm([(0,Wt.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,d.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"fetchAll",1),lm([(0,Wt.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,d.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pullAll",1),lm([(0,Wt.H)((e=>`${null==e?"":e.map((e=>e.id)).join(",")}`)),(0,d.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pushAll",1),lm([(0,d.cM)({args:{1:e=>e.join(",")}})],GitProviderService.prototype,"getAheadBehindCommitCount",1),lm([(0,d.cM)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),lm([(0,d.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),lm([(0,d.cM)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),lm([(0,d.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),lm([(0,d.cM)()],GitProviderService.prototype,"getBlameForRange",1),lm([(0,d.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),lm([(0,d.cM)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),lm([(0,d.cM)()],GitProviderService.prototype,"getBranch",1),lm([(0,d.cM)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),lm([(0,d.cM)({args:{1:!1}})],GitProviderService.prototype,"getBranches",1),lm([(0,d.cM)()],GitProviderService.prototype,"getBranchesAndTagsTipsFn",1),lm([(0,d.cM)()],GitProviderService.prototype,"getChangedFilesCount",1),lm([(0,d.cM)()],GitProviderService.prototype,"getCommit",1),lm([(0,d.cM)()],GitProviderService.prototype,"getCommitBranches",1),lm([(0,d.cM)()],GitProviderService.prototype,"getCommitCount",1),lm([(0,d.cM)()],GitProviderService.prototype,"getCommitForFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"getCommitsForGraph",1),lm([(0,d.cM)()],GitProviderService.prototype,"getConfig",1),lm([(0,d.cM)()],GitProviderService.prototype,"setConfig",1),lm([(0,d.cM)()],GitProviderService.prototype,"getContributors",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"getCurrentUser",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDefaultBranchName",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDiff",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDiffForFile",1),lm([(0,d.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDiffForLine",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDiffStatus",1),lm([(0,d.cM)()],GitProviderService.prototype,"getFileStatusForCommit",1),lm([(0,d.fF)()],GitProviderService.prototype,"getGitDir",1),lm([(0,d.fF)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),lm([(0,d.cM)()],GitProviderService.prototype,"getLog",1),lm([(0,d.cM)()],GitProviderService.prototype,"getLogRefsOnly",1),lm([(0,d.cM)()],GitProviderService.prototype,"getLogForFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"getMergeBase",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"getMergeStatus",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"getRebaseStatus",1),lm([(0,d.cM)()],GitProviderService.prototype,"getNextComparisonUris",1),lm([(0,d.cM)()],GitProviderService.prototype,"getOldestUnpushedRefForFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"getPreviousComparisonUris",1),lm([(0,d.cM)()],GitProviderService.prototype,"getPreviousComparisonUrisForLine",1),lm([(0,Wt.H)(((e,t,i)=>{const s=ot.ss.is(t)?t.provider:t;return`${e}${null!=s?`|${s.id}:${s.domain}/${s.path}`:""}|${JSON.stringify(i)}`})),(0,d.fF)({args:{1:e=>e.name}})],GitProviderService.prototype,"getPullRequestForBranch",1),lm([(0,Wt.H)(((e,t,i)=>{const s=ot.ss.is(t)?t.provider:t;return`${e}${null!=s?`|${s.id}:${s.domain}/${s.path}`:""}|${i?.timeout}`})),(0,d.fF)({args:{1:e=>e.name}})],GitProviderService.prototype,"getPullRequestForCommit",1),lm([(0,d.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyPullRequests",1),lm([(0,d.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyIssues",1),lm([(0,d.cM)()],GitProviderService.prototype,"getIncomingActivity",1),lm([(0,Wt.H)((e=>`${null==e||"string"==typeof e?e:e instanceof s.Uri?e.toString():`${e.length}:${e[0]?.repoPath??""}`}`)),(0,d.cM)({args:{0:e=>Array.isArray(e)?e.map((e=>e.name)).join(","):e}})],GitProviderService.prototype,"getBestRemoteWithProvider",1),lm([(0,Wt.H)(((e,t)=>`${null==e||"string"==typeof e?e:e instanceof s.Uri?e.toString():`${e.length}:${e[0]?.repoPath??""}`}|${t?.includeDisconnected??!1}`)),(0,d.cM)({args:{0:e=>Array.isArray(e)?e.map((e=>e.name)).join(","):e}})],GitProviderService.prototype,"getBestRemoteWithRichProvider",1),lm([(0,d.cM)({args:{1:!1}})],GitProviderService.prototype,"getRemotes",1),lm([(0,d.cM)()],GitProviderService.prototype,"getRemotesWithProviders",1),lm([(0,d.cM)({exit:e=>`returned ${e?.path}`})],GitProviderService.prototype,"getBestRepository",1),lm([(0,d.cM)({exit:e=>`returned ${e?.path}`})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),lm([(0,d.cM)({exit:e=>`returned ${e?.path}`})],GitProviderService.prototype,"getOrOpenRepository",1),lm([(0,d.cM)({args:{0:e=>null!=e?`TextEditor(${be.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),lm([(0,d.cM)({exit:e=>`returned ${e?.path}`})],GitProviderService.prototype,"getRepository",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"getStash",1),lm([(0,d.cM)()],GitProviderService.prototype,"getStatusForFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"getStatusForFiles",1),lm([(0,d.cM)()],GitProviderService.prototype,"getStatusForRepo",1),lm([(0,d.cM)({args:{1:!1}})],GitProviderService.prototype,"getTags",1),lm([(0,d.cM)()],GitProviderService.prototype,"getTreeEntryForRevision",1),lm([(0,d.cM)()],GitProviderService.prototype,"getTreeForRevision",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"getRevisionContent",1),lm([(0,d.cM)()],GitProviderService.prototype,"getUniqueRepositoryId",1),lm([(0,d.cM)({args:{1:!1}})],GitProviderService.prototype,"hasBranchOrTag",1),lm([(0,d.cM)({args:{1:!1}})],GitProviderService.prototype,"hasCommitBeenPushed",1),lm([(0,d.cM)()],GitProviderService.prototype,"hasRemotes",1),lm([(0,d.cM)()],GitProviderService.prototype,"hasTrackingBranch",1),lm([(0,d.cM)({args:{0:e=>e.uri.toString(!0),1:e=>null!=e?`TextEditor(${be.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"isRepositoryForEditor",1),lm([(0,d.cM)()],GitProviderService.prototype,"getDiffTool",1),lm([(0,d.cM)()],GitProviderService.prototype,"openDiffTool",1),lm([(0,d.cM)()],GitProviderService.prototype,"openDirectoryCompare",1),lm([(0,Wt.H)(),(0,d.cM)()],GitProviderService.prototype,"resolveReference",1),lm([(0,d.cM)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],GitProviderService.prototype,"richSearchCommits",1),lm([(0,d.cM)()],GitProviderService.prototype,"searchCommits",1),lm([(0,d.cM)()],GitProviderService.prototype,"validateBranchOrTagName",1),lm([(0,d.cM)()],GitProviderService.prototype,"validateReference",1),lm([(0,d.cM)()],GitProviderService.prototype,"stageFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"stageDirectory",1),lm([(0,d.cM)()],GitProviderService.prototype,"unStageFile",1),lm([(0,d.cM)()],GitProviderService.prototype,"unStageDirectory",1),lm([(0,d.cM)()],GitProviderService.prototype,"stashApply",1),lm([(0,d.cM)()],GitProviderService.prototype,"stashDelete",1),lm([(0,d.cM)({args:{2:e=>e?.length}})],GitProviderService.prototype,"stashSave",1),lm([(0,d.cM)()],GitProviderService.prototype,"createWorktree",1),lm([(0,d.cM)()],GitProviderService.prototype,"getWorktree",1),lm([(0,d.cM)()],GitProviderService.prototype,"getWorktrees",1),lm([(0,d.cM)()],GitProviderService.prototype,"getWorktreesDefaultUri",1),lm([(0,d.cM)()],GitProviderService.prototype,"deleteWorktree",1),lm([(0,d.cM)()],GitProviderService.prototype,"getOpenScmRepositories",1),lm([(0,d.cM)()],GitProviderService.prototype,"getScmRepository",1),lm([(0,d.cM)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var um=i(2075),dm=i(5542);class RichRemoteProviderService{constructor(e){this.container=e,this._onDidChangeConnectionState=new s.EventEmitter,this._connectedCache=new Set}get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}connected(e){this._connectedCache.has(e)||(this._connectedCache.add(e),this.container.telemetry.sendEvent("remoteProviders/connected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"connected"}))}disconnected(e){this._connectedCache.delete(e),this.container.telemetry.sendEvent("remoteProviders/disconnected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"disconnected"})}}var pm=Object.defineProperty,mm=Object.getOwnPropertyDescriptor,gm=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?mm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&pm(t,i,n),n};const fm=2**30;class LineHoverController{constructor(e){this.container=e,this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this),r.D.onDidChange(this.onConfigurationChanged,this))}dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!r.D.changed(e,"hovers.enabled")&&!r.D.changed(e,"hovers.currentLine.enabled"))return;const t=r.D.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(s.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){e.pending||(null!=e.editor&&null!=e.selections?this.isRegistered(e.editor?.document.uri)||this.register(e.editor):this.unregister())}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const n=this.container.lineTracker.getState(t.line),o=n?.commit;if(null==o)return;const a=r.D.get("hovers");if(a.annotations.details){if(await this.container.fileAnnotations.getAnnotationType(s.window.activeTextEditor)===te.VP.Blame)return}const l="line"===a.currentLine.over;if(!l&&this.container.lineAnnotations.suspended)return;const c=e.validateRange(new s.Range(t.line,l?t.character:fm,t.line,fm));if(!l&&c.start.character!==t.character)return;let h=t.line;const u=h+1;h=(o.lines.find((e=>e.line===u))??o.lines[0]).originalLine-1;const d=await this.container.tracker.get(e);if(null==d)return;const p=await Rp(o,d.uri,h,a.detailsMarkdownFormat,r.D.get("defaultDateFormat"),{autolinks:a.autolinks.enabled,pullRequests:{enabled:a.pullRequests.enabled}});return new s.Hover(p,c)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const n=this.container.lineTracker.getState(t.line),o=n?.commit;if(null==o)return;const a=r.D.get("hovers");if(a.annotations.changes){if(await this.container.fileAnnotations.getAnnotationType(s.window.activeTextEditor)===te.VP.Blame)return}const l="line"===a.currentLine.over;if(!l&&this.container.lineAnnotations.suspended)return;const c=e.validateRange(new s.Range(t.line,l?t.character:fm,t.line,fm));if(!l&&c.start.character!==t.character)return;const h=await this.container.tracker.get(e);if(null==h)return;const u=await Sp(o,h.uri,t.line,h.document);return null!=u?new s.Hover(u,c):void 0}isRegistered(e){return null!=this._hoverProviderDisposable&&En.n.equals(this._uri,e)}register(e){if(this.unregister(),null==e)return;const t=r.D.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;const i=[];t.currentLine.changes&&i.push(s.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(s.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=s.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}}gm([(0,d.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),gm([(0,d.fF)({args:{0:e=>be.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),gm([(0,d.fF)({args:{0:e=>be.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var wm=Object.defineProperty,vm=Object.getOwnPropertyDescriptor,ym=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?vm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&wm(t,i,n),n};class IntegrationAuthenticationService{constructor(e){this.container=e,this.providers=new Map}dispose(){this.providers.clear()}registerProvider(e,t){if(this.providers.has(e))throw new Error(`Provider with id ${e} already registered`);return this.providers.set(e,t),{dispose:()=>this.providers.delete(e)}}hasProvider(e){return this.providers.has(e)}async createSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const s=await(i?.createSession(t));if(null==s)return;const r=this.getSecretKey(e,i.getSessionId(t));return await this.container.storage.storeSecret(r,JSON.stringify(s)),s}async getSession(e,t,i){const s=this.providers.get(e);if(null==s)throw new Error(`Provider with id ${e} not registered`);const r=this.getSecretKey(e,s.getSessionId(t));let n;i?.forceNewSession&&await this.container.storage.deleteSecret(r);try{const e=await this.container.storage.getSecret(r);e&&(n=JSON.parse(e))}catch(e){try{await this.container.storage.deleteSecret(r)}catch{}if(!i?.createIfNeeded)throw e}return i?.createIfNeeded&&null==n?this.createSession(e,t):n}async deleteSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const s=this.getSecretKey(e,i.getSessionId(t));await this.container.storage.deleteSecret(s)}getSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}}ym([(0,d.fF)()],IntegrationAuthenticationService.prototype,"createSession",1),ym([(0,d.fF)()],IntegrationAuthenticationService.prototype,"getSession",1),ym([(0,d.fF)()],IntegrationAuthenticationService.prototype,"deleteSession",1);var bm=Object.defineProperty,Cm=Object.getOwnPropertyDescriptor,Am=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Cm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&bm(t,i,n),n};class SubscriptionAuthenticationProvider{constructor(e,t){this.container=e,this.server=t,this._onDidChangeSessions=new s.EventEmitter,this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=s.Disposable.from(s.authentication.registerAuthenticationProvider("gitlens+","GitLens+",this,{supportsMultipleAccounts:!1}),this.container.storage.onDidChangeSecrets((()=>this.checkForUpdates())))}get onDidChangeSessions(){return this._onDidChangeSessions.event}dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this.server.abort()}async createSession(e){const t=(0,Ut.UH)(),i=Pm(e=e.sort());try{const t=await this.server.login(e,i),s=await this.createSessionForToken(t,e),r=await this._sessionsPromise,n=r.findIndex((e=>e.id===s.id||Pm(e.scopes)===i));return n>-1?r.splice(n,1,s):r.push(s),await this.storeSessions(r),this._onDidChangeSessions.fire({added:[s],removed:[],changed:[]}),s}catch(e){if("Cancelled"===e)throw e;throw be.Yd.error(e,t),s.window.showErrorMessage(`Unable to sign in to GitLens+: ${e}`),e}}async getSessions(e){const t=(0,Ut.UH)();e=e?.sort();const i=Pm(e),s=await this._sessionsPromise,r=null!=e?s.filter((e=>Pm(e.scopes)===i)):s;return null!=t&&(t.exitDetails=` • Found ${r.length} sessions`),r}async removeSession(e){const t=(0,Ut.UH)();try{const t=await this._sessionsPromise,i=t.findIndex((t=>t.id===e));if(-1===i)return void be.Yd.log(`Unable to remove session ${e}; Not found`);const s=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[s],changed:[]})}catch(e){throw be.Yd.error(e,t),s.window.showErrorMessage(`Unable to sign out of GitLens+: ${e}`),e}}async removeSessionsByScopes(e){const t=(0,Ut.UH)();try{e=e?.sort();const t=Pm(e),i=[];let s=0;const r=await this._sessionsPromise;for(const e of r)Pm(e.scopes)===t?(r.splice(s,1),i.push(e)):s++;if(0===i.length)return;await this.storeSessions(r),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw be.Yd.error(e,t),s.window.showErrorMessage(`Unable to sign out of GitLens+: ${e}`),e}}async tryMigrateSession(){if(null==this._migrated&&(this._migrated=this.container.storage.get("plus:migratedAuthentication",!1)),this._migrated)return;let e;try{if(null==s.extensions.getExtension("gitkraken.gitkraken-authentication"))return;if(e=await s.authentication.getSession("gitkraken",["gitlens"],{createIfNone:!1}),null==e)return;e={id:(0,ze.Vj)(),accessToken:e.accessToken,account:{...e.account},scopes:e.scopes};const t=await this._sessionsPromise,i=Pm(e.scopes),r=t.findIndex((t=>t.id===e.id||Pm(t.scopes)===i));r>-1?t.splice(r,1,e):t.push(e),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[e],removed:[],changed:[]})}catch(e){be.Yd.error(e,"Unable to migrate authentication")}finally{this._migrated=!0,this.container.storage.store("plus:migratedAuthentication",!0)}return e}async checkForUpdates(){const e=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();const t=await this._sessionsPromise,i=[],s=[];for(const s of t)e.some((e=>e.id===s.id))||i.push(s);for(const i of e)t.some((e=>e.id===i.id))||s.push(i);(i.length||s.length)&&(be.Yd.debug(`Firing sessions changed event; added=${i.length}, removed=${s.length}`),this._onDidChangeSessions.fire({added:i,removed:s,changed:[]}))}async createSessionForToken(e,t){const i=await this.server.getAccountInfo(e);return{id:(0,ze.Vj)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){let e;try{const t=await this.container.storage.getSecret(this.secretStorageKey);if(!t||"[]"===t)return[];try{e=JSON.parse(t)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return be.Yd.error(e,"Unable to read sessions from storage"),[]}const t=e.map((async e=>{const t=Pm(e.scopes);let i;if(be.Yd.debug(`Read session from storage with scopes=${t}`),null==e.account)try{i=await this.server.getAccountInfo(e.accessToken),be.Yd.debug(`Verified session with scopes=${t}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":i?.accountName??"<unknown>",id:e.account?.id??i?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}})),i=(await Promise.allSettled(t)).filter((e=>"fulfilled"===e.status)).map((e=>e.value)).filter((e=>Boolean(e)));return be.Yd.debug(`Found ${i.length} verified sessions`),i.length!==e.length&&await this.storeSessions(i),i}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){be.Yd.error(t,`Unable to store ${e.length} sessions`)}}}function Pm(e){return e?.join("|")}Am([(0,d.fF)()],SubscriptionAuthenticationProvider.prototype,"createSession",1),Am([(0,d.fF)()],SubscriptionAuthenticationProvider.prototype,"getSessions",1),Am([(0,d.fF)()],SubscriptionAuthenticationProvider.prototype,"removeSession",1),Am([(0,d.fF)()],SubscriptionAuthenticationProvider.prototype,"removeSessionsByScopes",1);var Dm=Object.defineProperty,Sm=Object.getOwnPropertyDescriptor,km=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Sm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Dm(t,i,n),n};const Rm="did-authenticate",Fm="Visual-Studio-Code-GitLens";class ServerConnection{constructor(e){this.container=e,this._deferredCodeExchanges=new Map,this._pendingStates=new Map}dispose(){}get baseApiUri(){return"staging"===this.container.env?s.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===this.container.env?s.Uri.parse("https://devapi.gitkraken.com"):s.Uri.parse("https://api.gitkraken.com")}get baseAccountUri(){return"staging"===this.container.env?s.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===this.container.env?s.Uri.parse("https://devapp.gitkraken.com"):s.Uri.parse("https://app.gitkraken.com")}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise((e=>setTimeout(e,50))))}async getAccountInfo(e){const t=(0,Ut.UH)();let i;try{i=await(0,Ke.he)(s.Uri.joinPath(this.baseApiUri,"user").toString(),{agent:(0,Ke.Nx)(),headers:{Authorization:`Bearer ${e}`,"User-Agent":Fm}})}catch(e){throw be.Yd.error(e,t),e}if(!i.ok)throw be.Yd.error(void 0,`Getting account info failed: (${i.status}) ${i.statusText}`),new Error(i.statusText);const r=await i.json();return{id:r.id,accountName:r.username}}async login(e,t){this.updateStatusBarItem(!0);const i=(0,ze.Vj)(),r=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...r,i]);const n=await s.env.asExternalUri(s.Uri.parse(`${s.env.uriScheme}://${this.container.context.extension.id}/${Rm}?gkstate=${i}`)),o=s.Uri.joinPath(this.baseAccountUri,"register").with({query:`${e.includes("gitlens")?"referrer=gitlens&":""}pass-token=true&return-url=${encodeURIComponent(n.toString())}`});await s.env.openExternal(o);let a=this._deferredCodeExchanges.get(t);return null==a&&(a=(0,Ai.ue)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor(t)),this._deferredCodeExchanges.set(t,a)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource.dispose(),this._cancellationSource=void 0),this._cancellationSource=new s.CancellationTokenSource,this.openCompletionInputFallback(this._cancellationSource.token),Promise.race([a.promise,new Promise(((e,t)=>this._cancellationSource?.token.onCancellationRequested((()=>t("Cancelled"))))),new Promise(((e,t)=>setTimeout(t,12e4,"Cancelled")))]).finally((()=>{this._cancellationSource?.cancel(),this._cancellationSource?.dispose(),this._cancellationSource=void 0,this._pendingStates.delete(t),a?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}))}async openCompletionInputFallback(e){const t=s.window.createInputBox();t.ignoreFocusOut=!0;const i=[];try{if(e.isCancellationRequested)return;const r=await new Promise((r=>{i.push(e.onCancellationRequested((()=>t.hide())),t.onDidHide((()=>r(void 0))),t.onDidChangeValue((e=>{if(e){try{const i=s.Uri.parse(e.trim());if(i.scheme&&"file"!==i.scheme)return void(t.validationMessage=void 0)}catch{}t.validationMessage="Please enter a valid authorization URL"}else t.validationMessage=void 0})),t.onDidAccept((()=>r(s.Uri.parse(t.value.trim()))))),t.title="GitLens+ Sign In",t.placeholder="Please enter the provided authorization URL",t.prompt="If the auto-redirect fails, paste the authorization URL",t.show()}));null!=r&&this.container.uri.handleUri(r)}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}}getUriHandlerDeferredExecutor(e){return(t,i,s)=>{const r=new URLSearchParams(t.query),n=this._pendingStates.get(e),o=r.get("gkstate");if(null==n||!o||!n.includes(o))return void be.Yd.log("State not found in accepted state. Skipping this execution...");const a=r.get("access-token"),l=r.get("code"),c=a??l;null==c?s("Token not returned"):i(c)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=s.window.createStatusBarItem("gitlens.plus.signIn",s.StatusBarAlignment.Left),this._statusBarItem.name="GitLens+ Sign in",this._statusBarItem.text="Signing in to GitLens+...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}async fetchGraphql(e,t,i){return this.fetchCore(s.Uri.joinPath(this.baseAccountUri,"api/projects/graphql").toString(),t,{method:"POST",body:JSON.stringify(e),...i})}async fetchCore(e,t,i){const s=(0,Ut.UH)();try{const s={agent:(0,Ke.Nx)(),...i,headers:{Authorization:`Bearer ${t}`,"User-Agent":Fm,"Content-Type":"application/json",...i?.headers}};return await(0,Ke.he)(e,s)}catch(e){throw be.Yd.error(e,s),e}}}km([(0,se.H)()],ServerConnection.prototype,"baseApiUri",1),km([(0,se.H)()],ServerConnection.prototype,"baseAccountUri",1),km([(0,d.fF)({args:!1})],ServerConnection.prototype,"getAccountInfo",1),km([(0,d.fF)()],ServerConnection.prototype,"login",1);var $m=i(9967),Tm=Object.defineProperty,xm=Object.getOwnPropertyDescriptor,Im=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?xm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Tm(t,i,n),n};const _m="Visual-Studio-Code-GitLens",Om=class{constructor(e,t){this.container=e,this._onDidChange=new s.EventEmitter,this._etag=0,this._disposable=s.Disposable.from((0,Lt.IH)(e.onReady)(this.onReady,this),this.container.subscriptionAuthentication.onDidChangeSessions((e=>setTimeout((()=>this.onAuthenticationChanged(e)),0)),this),r.D.onDidChange((e=>{r.D.changed(e,"plusFeatures")&&this.updateContext()})));const i=this.getStoredSubscription();null!=i&&(0,Ae.L5)(t,"< 13.0")&&(i.previewTrial=void 0),this.changeSubscription(i,!0),setTimeout((()=>{this.ensureSession(!1)}),1e4)}get onDidChange(){return this._onDidChange.event}dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some((e=>e.id===t.id)))return this._session=void 0,this._sessionPromise=void 0,void this.logout();const i=e.added?.[0]??e.changed?.[0];null!=i&&(i.id===t?.id&&i.accessToken===t?.accessToken||(this._session=t,this.validate()))}get baseApiUri(){const{env:e}=this.container;return"staging"===e?s.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===e?s.Uri.parse("https://devapi.gitkraken.com"):s.Uri.parse("https://api.gitkraken.com")}get baseAccountUri(){const{env:e}=this.container;return"staging"===e?s.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===e?s.Uri.parse("https://devapp.gitkraken.com"):s.Uri.parse("https://app.gitkraken.com")}get baseSiteUri(){const{env:e}=this.container;return"staging"===e?s.Uri.parse("https://staging.gitkraken.com"):"dev"===e?s.Uri.parse("https://dev.gitkraken.com"):s.Uri.parse("https://gitkraken.com")}get etag(){return this._etag}onReady(){this._disposable=s.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return this.container.viewCommands,[(0,ki.xR)(c.Gh.PlusLearn,(e=>this.learn(e))),(0,ki.xR)(c.Gh.PlusLoginOrSignUp,(()=>this.loginOrSignUp())),(0,ki.xR)(c.Gh.PlusLogout,(()=>this.logout())),(0,ki.xR)(c.Gh.PlusStartPreviewTrial,(()=>this.startPreviewTrial())),(0,ki.xR)(c.Gh.PlusManage,(()=>this.manage())),(0,ki.xR)(c.Gh.PlusPurchase,(()=>this.purchase())),(0,ki.xR)(c.Gh.PlusResendVerification,(()=>this.resendVerification())),(0,ki.xR)(c.Gh.PlusValidate,(()=>this.validate())),(0,ki.xR)(c.Gh.PlusShowPlans,(()=>this.showPlans())),(0,ki.xR)(c.Gh.PlusHide,(()=>r.D.updateEffective("plusFeatures.enabled",!1))),(0,ki.xR)(c.Gh.PlusRestore,(()=>r.D.updateEffective("plusFeatures.enabled",!0))),(0,ki.xR)("gitlens.plus.reset",(()=>this.logout(!0)))]}async getSubscription(e=!1){const t=this.ensureSession(!1);return e||await t,this._subscription}learn(e=!0){(0,Pi.lN)(this.container.context.extension.id,"gitlens.plus",void 0,e)}async loginOrSignUp(){if(!await Ja())return!1;await this.container.subscriptionAuthentication.abort(),this.showHomeView();const e=await this.ensureSession(!0),t=Boolean(e);if(t){const{account:e,plan:{actual:t,effective:i}}=this._subscription;if(!1===e?.verified){const e={title:"Resend Verification",isCloseAffordance:!0},t={title:"Cancel"};await s.window.showInformationMessage(`Before you can access ${i.name}, you must verify your email address.`,e,t)===e&&this.resendVerification()}else if((0,lr.dz)(this._subscription)){const e=(0,lr.PY)(this._subscription,"days"),t={title:"OK",isCloseAffordance:!0},r={title:"Learn More"};await s.window.showInformationMessage(`Welcome to ${i.name} (Trial). You now have additional access to GitLens+ features on private repos for ${(0,C._6)("more day",e??0)}.`,{modal:!0},t,r)===r&&this.learn()}else(0,lr.ww)(this._subscription)?s.window.showInformationMessage(`Welcome to ${t.name}. You now have additional access to GitLens+ features on private repos.`,"OK"):s.window.showInformationMessage(`Welcome to ${t.name}. You have access to GitLens+ features on local & public repos.`,"OK")}return t}async logout(e=!1){return this.logoutCore(e)}async logoutCore(e=!1){null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.subscriptionAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.subscriptionAuthentication.removeSession(this._session.id),this._session=void 0):this.container.subscriptionAuthentication.removeSessionsByScopes(Om.authenticationScopes),e&&this.container.debugging?this.changeSubscription(void 0):this.changeSubscription({...this._subscription,plan:{actual:(0,lr.fV)(lr.Cx.Free,!1,void 0,null!=this._subscription.plan?.actual?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0),effective:(0,lr.fV)(lr.Cx.Free,!1,void 0,null!=this._subscription.plan?.effective?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0)},account:void 0})}manage(){s.env.openExternal(this.baseAccountUri)}async purchase(){await Ja()&&(null==this._subscription.account?this.showPlans():s.env.openExternal(s.Uri.joinPath(this.baseAccountUri,"purchase-license").with({query:"product=gitlens&license=PRO"})),await this.showHomeView())}async resendVerification(){if(this._subscription.account?.verified)return!0;const e=(0,Ut.UH)();this.showHomeView(!0);const t=await this.ensureSession(!1);if(null==t)return!1;try{const i=await(0,Ke.he)(s.Uri.joinPath(this.baseApiUri,"resend-email").toString(),{method:"POST",agent:(0,Ke.Nx)(),headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":_m,"Content-Type":"application/json"},body:JSON.stringify({id:t.account.id})});if(!i.ok)return be.Yd.error("",e,`Unable to resend verification email; status=(${i.status}): ${i.statusText}`),s.window.showErrorMessage(`Unable to resend verification email; Status: ${i.statusText}`,"OK"),!1;const r={title:"Recheck"},n={title:"Cancel"};if(await s.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",r,n)===r)return await this.validate(),!0}catch(t){be.Yd.error(t,e),s.window.showErrorMessage("Unable to resend verification email","OK")}return!1}async showHomeView(e=!1){e&&!r.D.get("plusFeatures.enabled",void 0,!0)||this.container.homeView.visible||await(0,ki.P0)(c.Gh.ShowHomeView)}showPlans(){s.env.openExternal(s.Uri.joinPath(this.baseSiteUri,"gitlens/pricing"))}async startPreviewTrial(e){if(!await Ja())return;let{plan:t,previewTrial:i}=this._subscription;if(null!=i){if(this.showHomeView(),!e&&t.effective.id===lr.Cx.Free){const e={title:"Extend Your Trial",isCloseAffordance:!0},t={title:"Cancel"};await s.window.showInformationMessage("Your 3-day trial has ended.\nExtend your GitLens Pro trial to continue to use GitLens+ features on private repos, free for an additional 7-days.",{modal:!0},e,t)===e&&this.loginOrSignUp()}return}const r=new Date;let n,o=new Date(r);if(this.container.debugging?(o=(0,ie.IH)(o,{minutes:1}),n=0):(o.setHours(23,59,59,999),o=(0,ie.IH)(o,{days:3}),n=3),i={startedOn:r.toISOString(),expiresOn:o.toISOString()},this.changeSubscription({...this._subscription,plan:{...this._subscription.plan,effective:(0,lr.fV)(lr.Cx.Pro,!1,void 0,r,o)},previewTrial:i}),!e){const e={title:"OK",isCloseAffordance:!0},t={title:"Learn More"};await s.window.showInformationMessage(`You have started a ${n}-day GitLens Pro trial of GitLens+ features on private repos.`,{modal:!0},e,t)===t&&this.learn()}}async validate(){const e=(0,Ut.UH)(),t=await this.ensureSession(!1);if(null!=t)try{await this.checkInAndValidate(t)}catch(t){be.Yd.error(t,e)}else this.changeSubscription(this._subscription)}async checkInAndValidate(e,t=!1){if(!t)return this.checkInAndValidateCore(e);const i=this.checkInAndValidateCore(e);await Promise.race([i,new Promise((e=>setTimeout(e,3e3,!0)))])&&await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Validating your GitLens+ account..."},(()=>i))}async checkInAndValidateCore(e){const t=(0,Ut.UH)();try{const t={id:e.account.id,platform:(0,Je.Xf)(),gitlensVersion:this.container.version,machineId:s.env.machineId,sessionId:s.env.sessionId,vscodeEdition:s.env.appName,vscodeHost:s.env.appHost,vscodeVersion:s.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},i=await(0,Ke.he)(s.Uri.joinPath(this.baseApiUri,"gitlens/checkin").toString(),{method:"POST",agent:(0,Ke.Nx)(),headers:{Authorization:`Bearer ${e.accessToken}`,"User-Agent":_m,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!i.ok)throw new rm.dt("Unable to validate account",void 0,i.status,i.statusText);const r=await i.json();this.validateSubscription(r),this._lastCheckInDate=new Date}catch(e){if(be.Yd.error(e,t),e instanceof rm.dt)throw e;throw new rm.dt("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval((()=>{null!=this._lastCheckInDate&&this._lastCheckInDate.getDate()===(new Date).getDate()||this.ensureSession(!1,!0)}),216e5)}validateSubscription(e){const t={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate,organizationIds:e.orgIds??[]},i=Object.entries(e.licenses.effectiveLicenses),s=Object.entries(e.licenses.paidLicenses);let r,n;if(s.length>0){s.length>1&&s.sort(((e,t)=>(0,lr.kU)(Mm(t[0]))+Lm(t[1].latestStatus)-((0,lr.kU)(Mm(e[0]))+Lm(e[1].latestStatus))));const[e,t]=s[0];r=(0,lr.fV)(Mm(e),Wm(e),t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}if(null==r&&(r=(0,lr.fV)(lr.Cx.FreePlus,!1,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):void 0)),i.length>0){i.length>1&&i.sort(((e,t)=>(0,lr.kU)(Mm(t[0]))+Lm(t[1].latestStatus)-((0,lr.kU)(Mm(e[0]))+Lm(e[1].latestStatus))));const[e,t]=i[0];n=(0,lr.fV)(Mm(e),Wm(e),t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}(null==n||(0,lr.kU)(r.id)>=(0,lr.kU)(n.id))&&(n={...r}),this.changeSubscription({...this._subscription,plan:{actual:r,effective:n},account:t})}async ensureSession(e,t){if(null!=this._sessionPromise&&void 0===this._session&&await this._sessionPromise,!t&&null!=this._session)return this._session;if(null===this._session&&!e)return;void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e).then((e=>(this._session=e,this._sessionPromise=void 0,this._session)),(()=>(this._session=null,this._sessionPromise=void 0,this._session))));return await this._sessionPromise??void 0}async getOrCreateSession(e){const t=(0,Ut.UH)();let i;try{i=await s.authentication.getSession(Om.authenticationProviderId,Om.authenticationScopes,{createIfNone:e,silent:!e})}catch(e){if(i=null,e instanceof Error&&e.message.includes("User did not consent"))return be.Yd.debug(t,"User declined authentication"),await this.logoutCore(),null;be.Yd.error(e,t)}if(void 0===i&&(i=await this.container.subscriptionAuthentication.tryMigrateSession()),null==i)return be.Yd.debug(t,"No valid session was found"),await this.logoutCore(),i??null;try{await this.checkInAndValidate(i,e)}catch(r){if(be.Yd.error(r,t),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":i.account.id,exception:String(r),code:r.original?.code,statusCode:r.statusCode}),be.Yd.debug(t,`Account validation failed (${r.statusCode??r.original?.code})`),r instanceof rm.dt){const t=i.account.label;if("ENOTFOUND"!==r.original?.code&&null!=r.statusCode&&r.statusCode<500&&r.statusCode>=400){if(i=null,await this.logoutCore(),e){const e=401===r.statusCode;queueMicrotask((async()=>{const i={title:"Retry Sign In"};await s.window.showErrorMessage(`Unable to sign in to your (${t}) GitLens+ account. Please try again. If this issue persists, please contact support.${e?"":` Error=${r.message}`}`,i)===i&&this.loginOrSignUp()}))}}else i=i??null}}return i}changeSubscription(e,t=!1){null==e&&(e={plan:{actual:(0,lr.fV)(lr.Cx.Free,!1,void 0),effective:(0,lr.fV)(lr.Cx.Free,!1,void 0)},account:void 0,state:lr.jc.Free}),(0,lr.Z1)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,lr.ww)(e)&&null!=e.previewTrial&&((0,lr.EE)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,lr.fV)(lr.Cx.Pro,!1,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,lr.RE)(e);const i=this._subscription,r=null!=i&&JSON.stringify(i)===JSON.stringify(e);r||(queueMicrotask((()=>{let t=Em(e);this.container.telemetry.setGlobalAttributes(t),t={...t,...r?{}:Em(i,"previous")},this.container.telemetry.sendEvent(null==i?"subscription":"subscription/changed",t)})),this.storeSubscription(e),this._subscription=e,this._etag=Date.now(),setTimeout((()=>{null!=e?.account&&e.plan.actual.id===lr.Cx.Pro&&!e.plan.actual.bundle&&new Date(e.plan.actual.startedOn)>=new Date("2022-02-28T00:00:00.000Z")&&new Date(e.plan.actual.startedOn)<=new Date("2022-04-31T00:00:00.000Z")&&async function(e,t){if(e.storage.get("plus:renewalDiscountNotificationShown",!1))return;if(e.storage.store("plus:renewalDiscountNotificationShown",!0),t.plan.effective.cancelled){const e=`https://help.gitkraken.com/gitlens/gl-contact-support/?email=${encodeURIComponent(t.account.email)}&subject=${encodeURIComponent("GitLens Pro Reactivation Discount")}&content=${encodeURIComponent("I would like to reactivate my GitLens Pro subscription at the discounted 60% off rate.")}&issue_category__customer_facing_field_=Billing`,i={title:"Contact Support"};return void(await(0,Mt.PV)("info",`While we are sorry to see that you have cancelled your GitLens+ subscription, we'd like to offer to renew your subscription at your original rate — 60% off as a thank you for being an early adopter of GitLens+. If you'd like to take advantage of this offer, please [Contact Support](${e}).`,void 0,void 0,i)===i&&s.env.openExternal(s.Uri.parse(e)))}(0,Mt.PV)("info","60% off your GitLens Pro renewal — as a thank you for being an early adopter of GitLens+. So there will be no change to your price for an additional year!",void 0,void 0)}(this.container,e)}),5e3),t||(this.updateContext(),null!=i&&this._onDidChange.fire({current:e,previous:i,etag:this._etag})))}getStoredSubscription(){const e=this.container.storage.get("premium:subscription"),t=e?.data;return null!=t&&(t.plan.actual.name=(0,lr.tL)(t.plan.actual.id),t.plan.effective.name=(0,lr.tL)(t.plan.effective.id)),t}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:e})}updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,Lt.Ds)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource.dispose()),this._cancellationSource=new s.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();const{plan:{actual:e},state:t}=this._subscription;(0,Ci.v)(c.zf.Plus,e.id!=lr.Cx.Free?e.id:void 0),(0,Ci.v)(c.zf.PlusState,t)}async updateAccessContext(e){let t=!1;if(0!==this.container.git.repositoryCount&&(({allowed:t}=await this.container.git.access()),e.isCancellationRequested))return;const i=r.D.get("plusFeatures.enabled")??!0;let s;if(!i&&"mixed"===t){s=[];for(const t of this.container.git.repositories){if(t.closed)continue;const i=await this.container.git.access(void 0,t.uri);if(e.isCancellationRequested)return;i.allowed||s.push(t.uri.toString())}}(0,Ci.v)(c.zf.PlusEnabled,Boolean(t)||i),(0,Ci.v)(c.zf.PlusRequired,!1===t),(0,Ci.v)(c.zf.PlusDisallowedRepos,s)}updateStatusBar(){const{account:e,plan:{effective:t}}=this._subscription;if(t.id===lr.Cx.Free)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);const i=(0,lr.dz)(this._subscription);if(!i&&!1!==e?.verified)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);if(null==this._statusBarSubscription&&(this._statusBarSubscription=s.window.createStatusBarItem("gitlens.plus.subscription",s.StatusBarAlignment.Left,1)),this._statusBarSubscription.name="GitLens+ Subscription",this._statusBarSubscription.command=c.Gh.ShowHomeView,!1===e?.verified)this._statusBarSubscription.text=`$(warning) ${t.name} (Unverified)`,this._statusBarSubscription.backgroundColor=new s.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new s.MarkdownString(i?`**Please verify your email**\n\nBefore you can start your **${t.name}** trial, please verify your email address.\n\nClick for details`:"**Please verify your email**\n\nBefore you can also use GitLens+ features on private repos, please verify your email address.\n\nClick for details",!0);else{const e=(0,lr.PY)(this._subscription,"days");this._statusBarSubscription.text=`${t.name} (Trial)`,this._statusBarSubscription.tooltip=new s.MarkdownString(`You have ${(0,C._6)("day",e??0)} left in your **${t.name}** trial, which gives you additional access to GitLens+ features on private repos.\n\nClick for details`,!0)}this._statusBarSubscription.show()}};let Bm=Om;function Em(e,t){return null==e?{}:{...(0,$m.xH)(e.account,{arrays:"join",prefix:(t?`${t}.`:"")+"account",skipPaths:["name","email"],skipNulls:!0,stringify:!0}),...(0,$m.xH)(e.plan,{prefix:(t?`${t}.`:"")+"subscription",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),...(0,$m.xH)(e.previewTrial,{prefix:(t?`${t}.`:"")+"subscription.previewTrial",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),"subscription.state":e.state}}function Mm(e){switch(e){case"gitlens-pro":case"bundle-pro":return lr.Cx.Pro;case"gitlens-teams":case"bundle-teams":return lr.Cx.Teams;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return lr.Cx.Enterprise;default:return lr.Cx.FreePlus}}function Wm(e){switch(e){case"bundle-pro":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function Lm(e){switch(e){case"active":return 100;case"expired":case"cancelled":return-100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0}}function Um(){return(e,t,i)=>{let s;if("function"==typeof i.value?s=i.value:"function"==typeof i.get&&(s=i.get),void 0===s)throw new Error("Not supported");const r=`$serialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,r)||Object.defineProperty(this,r,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[r];const i=async()=>await s.apply(this,e);return t=null==t?i():t.then(i,i),this[r]=t,t}}}Bm.authenticationProviderId="gitlens+",Bm.authenticationScopes=["gitlens"],Im([(0,se.H)()],Bm.prototype,"baseApiUri",1),Im([(0,se.H)()],Bm.prototype,"baseAccountUri",1),Im([(0,se.H)()],Bm.prototype,"baseSiteUri",1),Im([(0,d.fF)()],Bm.prototype,"learn",1),Im([(0,d.cM)()],Bm.prototype,"loginOrSignUp",1),Im([(0,d.cM)()],Bm.prototype,"logout",1),Im([(0,d.cM)()],Bm.prototype,"manage",1),Im([(0,d.cM)()],Bm.prototype,"purchase",1),Im([(0,Wt.H)(),(0,d.cM)()],Bm.prototype,"resendVerification",1),Im([(0,d.cM)()],Bm.prototype,"showHomeView",1),Im([(0,Wt.H)(),(0,d.cM)()],Bm.prototype,"startPreviewTrial",1),Im([(0,Wt.H)(),(0,d.cM)()],Bm.prototype,"validate",1),Im([(0,Wt.H)((e=>e.account.id))],Bm.prototype,"checkInAndValidate",1),Im([(0,d.fF)({args:{0:e=>e?.account.label}})],Bm.prototype,"checkInAndValidateCore",1),Im([(0,d.fF)()],Bm.prototype,"validateSubscription",1),Im([(0,Wt.H)(),(0,d.fF)()],Bm.prototype,"ensureSession",1),Im([(0,d.fF)()],Bm.prototype,"getOrCreateSession",1),Im([(0,d.fF)()],Bm.prototype,"changeSubscription",1);class IpcMessageType{constructor(e,t=!1){this.method=e,this.overwriteable=t}}class IpcCommandType extends IpcMessageType{}class IpcNotificationType extends IpcMessageType{}function Nm(e,t,i){e.method===t.method&&i(t.params,e)}const Gm=new IpcCommandType("webview/ready"),Hm=new IpcCommandType("webview/focus"),Vm=new IpcCommandType("command/execute"),Qm=new IpcCommandType("configuration/preview"),qm=new IpcCommandType("configuration/update"),Ym=new IpcNotificationType("configuration/didChange"),jm=new IpcNotificationType("configuration/didPreview"),zm=new IpcNotificationType("webview/didOpenAnchor");var Km=Object.defineProperty,Jm=Object.getOwnPropertyDescriptor,Zm=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Jm(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Km(t,i,n),n};const Xm=2**30;let eg=0;let tg=class{constructor(e,t,i,s,r,n,o,a){this.container=e,this.id=t,this.fileName=i,this.iconPath=s,this.contextKeyPrefix=n,this.trackingFeature=o,this.disposables=[],this.isReady=!1,this._cspNonce=(0,ze.Vu)(),this._originalTitle=this._title=r,this.disposables.push((0,ki.xR)(a,this.onShowCommand,this))}dispose(){this.disposables.forEach((e=>{e.dispose()})),this._disposablePanel?.dispose()}get options(){return{retainContextWhenHidden:!0,enableFindWidget:!0,enableCommandUris:!0,enableScripts:!0}}get originalTitle(){return this._originalTitle}get title(){return this._panel?.title??this._title}set title(e){this._title=e,null!=this._panel&&(this._panel.title=e)}get visible(){return this._panel?.visible??!1}hide(){this._panel?.dispose()}async show(e,...t){this.container.usage.track(`${this.trackingFeature}:shown`);let i=e?.column??s.ViewColumn.Beside;i===s.ViewColumn.Beside&&null==s.window.tabGroups.activeTabGroup.activeTab&&(i=s.ViewColumn.Active),null==this._panel?(this._panel=s.window.createWebviewPanel(this.id,this._title,{viewColumn:i,preserveFocus:e?.preserveFocus??!1},this.options),this._panel.iconPath=s.Uri.file(this.container.context.asAbsolutePath(this.iconPath)),this._disposablePanel=s.Disposable.from(this._panel,this._panel.onDidDispose(this.onPanelDisposed,this),this._panel.onDidChangeViewState(this.onViewStateChanged,this),this._panel.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),...this.onInitializing?.()??[],...this.registerCommands?.()??[],s.window.onDidChangeWindowState(this.onWindowStateChanged,this)),this._panel.webview.html=await this.getHtml(this._panel.webview)):(await this.refresh(!0),this._panel.reveal(this._panel.viewColumn??s.ViewColumn.Active,e?.preserveFocus??!1))}get cspNonce(){return this._cspNonce}onWindowStateChanged(e){this.visible&&this.onWindowFocusChanged?.(e.focused)}async refresh(e){if(null==this._panel)return;this.isReady=!1;const t=await this.getHtml(this._panel.webview);e&&(this._panel.webview.html=""),this._panel.webview.html!==t?this._panel.webview.html=t:this.isReady=!0}resetContextKeys(){(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,!1),(0,Ci.v)(`${this.contextKeyPrefix}:focus`,!1),(0,Ci.v)(`${this.contextKeyPrefix}:active`,!1)}setContextKeys(e,t,i){null!=e&&((0,Ci.v)(`${this.contextKeyPrefix}:active`,e),e||(t=!1,i=!1)),null!=t&&(0,Ci.v)(`${this.contextKeyPrefix}:focus`,t),null!=i&&(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,i)}onPanelDisposed(){this.resetContextKeys(),this.onActiveChanged?.(!1),this.onFocusChanged?.(!1),this.onVisibilityChanged?.(!1),this.isReady=!1,this._disposablePanel?.dispose(),this._disposablePanel=void 0,this._panel=void 0}onShowCommand(...e){this.show(void 0,...e)}onViewFocusChanged(e){this.setContextKeys(void 0,e.focused,e.inputFocused),this.onFocusChanged?.(e.focused)}onViewStateChanged(e){const{active:t,visible:i}=e.webviewPanel;i?(this.setContextKeys(t),this.onActiveChanged?.(t),t||this.onFocusChanged?.(!1)):(this.resetContextKeys(),this.onActiveChanged?.(!1),this.onFocusChanged?.(!1)),this.onVisibilityChanged?.(i)}onMessageReceivedCore(e){if(null!=e)switch(e.method){case Gm.method:Nm(Gm,e,(()=>{this.isReady=!0,this.onReady?.()}));break;case Hm.method:Nm(Hm,e,(e=>{this.onViewFocusChanged(e)}));break;case Vm.method:Nm(Vm,e,(e=>{null!=e.args?(0,ki.P0)(e.command,...e.args):(0,ki.P0)(e.command)}));break;default:this.onMessageReceived?.(e)}}async getHtml(e){const t=s.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=s.Uri.joinPath(t,this.fileName),r=new TextDecoder("utf8").decode(await s.workspace.fs.readFile(i)),[n,o,a,l]=await Promise.all([this.includeBootstrap?.(),this.includeHead?.(),this.includeBody?.(),this.includeEndOfBody?.()]),c=e.cspSource,h=e.asWebviewUri(this.container.context.extensionUri).toString(),u=e.asWebviewUri(t).toString();return r.replace(/#{(head|body|endOfBody|placement|cspSource|cspNonce|root|webroot)}/g,((e,t)=>{switch(t){case"head":return o??"";case"body":return a??"";case"endOfBody":return`${null!=n?`<script type="text/javascript" nonce="${this.cspNonce}">window.bootstrap=${JSON.stringify(n)};<\/script>`:""}${l??""}`;case"placement":return"editor";case"cspSource":return c;case"cspNonce":return this.cspNonce;case"root":return h;case"webroot":return u;default:return""}}))}nextIpcId(){return eg===Xm?eg=1:eg++,`host:${eg}`}notify(e,t,i){return this.postMessage({id:this.nextIpcId(),method:e.method,params:t,completionId:i})}postMessage(e){return null!=this._panel&&this.isReady&&this.visible?Promise.race([this._panel.webview.postMessage(e),new Promise((e=>setTimeout(e,5e3,!1)))]):Promise.resolve(!1)}};Zm([(0,d.cM)()],tg.prototype,"hide",1),Zm([(0,d.cM)({args:!1})],tg.prototype,"show",1),Zm([(0,d.fF)()],tg.prototype,"refresh",1),Zm([(0,d.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],tg.prototype,"onViewFocusChanged",1),Zm([(0,d.fF)({args:{0:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],tg.prototype,"onViewStateChanged",1),Zm([(0,d.fF)({args:{0:e=>null!=e?`${e.id}: method=${e.method}`:"<undefined>"}})],tg.prototype,"onMessageReceivedCore",1),Zm([Um(),(0,d.fF)({args:{0:e=>`{"id":${e.id},"method":${e.method}${e.completionId?`,"completionId":${e.completionId}`:""}}`}})],tg.prototype,"postMessage",1),tg=Zm([(0,d.hJ)(((e,t)=>`${t}(${e.id})`))],tg);const ig=new IpcNotificationType("focus/state/didChange",!0),sg=new IpcNotificationType("graph/subscription/didChange",!0);class FocusWebview extends tg{constructor(e){super(e,"gitlens.focus","focus.html","images/gitlens-icon.png","Focus View",`${c.zf.WebviewPrefix}focus`,"focusWebview",c.Gh.ShowFocusPage),this._bootstrapping=!0,this._pullRequests=[],this._issues=[],this.disposables.push(this.container.subscription.onDidChange(this.onSubscriptionChanged,this)),this.disposables.push(this.container.git.onDidChangeRepositories((()=>{this.refresh(!0)})))}registerCommands(){return[(0,ki.xR)(c.Gh.RefreshFocus,(()=>this.refresh(!0)))]}onFocusChanged(e){e?setTimeout((()=>{(0,Ci.v)(c.zf.FocusFocused,e)}),0):(0,Ci.v)(c.zf.FocusFocused,e)}async onSubscriptionChanged(e){if(e.etag===this._etagSubscription)return;this._etagSubscription=e.etag;const t=await this.container.git.access(et.x.Focus),{subscription:i,isPlus:s}=await this.getSubscription(t.subscription.current);return s&&this.notifyDidChangeState(),this.notify(sg,{subscription:i,isPlus:s})}async getSubscription(e){const t=e??await this.container.subscription.getSubscription(!0);return{subscription:t,isPlus:![lr.jc.Free,lr.jc.FreePreviewTrialExpired,lr.jc.FreePlusTrialExpired,lr.jc.VerificationRequired].includes(t.state)}}async getState(e=!1){const{subscription:t,isPlus:i}=await this.getSubscription();if(!i)return{isPlus:i,subscription:t};const s=await this.getRichRepos(),r=s.filter((e=>e.isGitHub));const n=function(e){return e.filter((e=>e.isConnected&&e.isGitHub))}(r),o=n.length>0;if(e||!o)return{isPlus:i,subscription:t,repos:(o?n:r).map((e=>rg(e)))};return{isPlus:i,subscription:t,pullRequests:(await this.getMyPullRequests(n)).map((e=>({pullRequest:(0,mn.l1)(e.pullRequest),reasons:e.reasons}))),issues:(await this.getMyIssues(n)).map((e=>({issue:(0,hi.y$)(e.issue),reasons:e.reasons}))),repos:n.map((e=>rg(e)))}}async includeBootstrap(){if(this._bootstrapping){const e=await this.getState(!0);return e.isPlus&&this.notifyDidChangeState(),e}return this.getState()}async getRichRepos(e){if(null==this._repos||!0===e){const e=[],t=[];for(const i of this.container.git.openRepositories){const s=await i.getRichRemote();null==s||e.findIndex((e=>e.remote===s))>-1||(t.push(i.onDidChange(this.onRepositoryChanged,this)),e.push({repo:i,remote:s,isConnected:await s.provider.isConnected(),isGitHub:"GitHub"===s.provider.name}))}this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0),this._repositoryEventsDisposable=s.Disposable.from(...t),this._repos=e}return this._repos}async onRepositoryChanged(e){e.changed(lt.I6.RemoteProviders,lt.du.Any)&&(await this.getRichRepos(!0),this.notifyDidChangeState())}async getMyPullRequests(e){const t=[];for(const{remote:i}of e){const e=await this.container.git.getMyPullRequests(i);null!=e&&t.push(...e.filter((e=>e.reasons.length>0)))}function i(e){let t=0;return e.reasons.includes("authored")?t+=1e3:e.reasons.includes("assigned")?t+=900:e.reasons.includes("review-requested")?t+=800:e.reasons.includes("mentioned")&&(t+=700),e.pullRequest.reviewDecision===mn.pD.Approved?e.pullRequest.mergeableState===mn.Cz.Mergeable?t+=100:e.pullRequest.mergeableState===mn.Cz.Conflicting?t+=90:t+=80:e.pullRequest.reviewDecision===mn.pD.ChangesRequested&&(t+=70),t}return this._pullRequests=t.sort(((e,t)=>{const s=i(e),r=i(t);return s===r?e.pullRequest.date.getTime()-t.pullRequest.date.getTime():(r??0)-(s??0)})),this._pullRequests}async getMyIssues(e){const t=[];for(const{remote:i}of e){const e=await this.container.git.getMyIssues(i);null!=e&&t.push(...e.filter((e=>e.reasons.length>0)))}return this._issues=t.sort(((e,t)=>t.issue.updatedDate.getTime()-e.issue.updatedDate.getTime())),this._issues}async show(e){if(await Ja())return super.show(e)}async notifyDidChangeState(){if(!this.visible)return;const e=await this.getState();this._bootstrapping=!1,this.notify(ig,{state:e})}}function rg(e){return{repo:e.repo.path,isGitHub:e.isGitHub,isConnected:e.isConnected}}var ng=(e=>(e.Upstream="upstream",e.PullRequest="pullRequest",e))(ng||{}),og=(e=>(e.Selection="selection",e.Head="head",e.Highlights="highlights",e.LocalBranches="localBranches",e.RemoteBranches="remoteBranches",e.Stashes="stashes",e.Tags="tags",e.Upstream="upstream",e))(og||{}),ag=(e=>(e.Selection="selection",e.Head="head",e.Highlights="highlights",e.LocalBranches="localBranches",e.RemoteBranches="remoteBranches",e.Stashes="stashes",e.Tags="tags",e.Upstream="upstream",e))(ag||{});const lg=Object.values(ng),cg=new IpcCommandType("graph/chooseRepository"),hg=new IpcCommandType("graph/dimMergeCommits"),ug=new IpcCommandType("graph/dismissBanner"),dg=new IpcCommandType("graph/dblclick"),pg=new IpcCommandType("graph/rows/ensure"),mg=new IpcCommandType("graph/avatars/get"),gg=new IpcCommandType("graph/refs/metadata/get"),fg=new IpcCommandType("graph/rows/get"),wg=new IpcCommandType("graph/search"),vg=new IpcCommandType("graph/search/openInView"),yg=new IpcCommandType("graph/columns/update"),bg=new IpcCommandType("graph/refs/update/visibility"),Cg=new IpcCommandType("graph/fitlers/update/excludeType"),Ag=new IpcCommandType("graph/configuration/update"),Pg=new IpcCommandType("graph/fitlers/update/includeOnlyRefs"),Dg=new IpcCommandType("graph/selection/update"),Sg=new IpcNotificationType("graph/didChange",!0),kg=new IpcNotificationType("graph/configuration/didChange",!0),Rg=new IpcNotificationType("graph/subscription/didChange",!0),Fg=new IpcNotificationType("graph/avatars/didChange",!0),$g=new IpcNotificationType("graph/refs/didChangeMetadata",!0),Tg=new IpcNotificationType("graph/columns/didChange",!0),xg=new IpcNotificationType("graph/window/focus/didChange",!0),Ig=new IpcNotificationType("graph/refs/didChangeVisibility",!0),_g=new IpcNotificationType("graph/rows/didChange"),Og=new IpcNotificationType("graph/selection/didChange",!0),Bg=new IpcNotificationType("graph/workingTree/didChange",!0),Eg=new IpcNotificationType("graph/rows/didEnsure"),Mg=new IpcNotificationType("graph/didSearch",!0),Wg=new IpcNotificationType("graph/didFetch",!0);var Lg=Object.defineProperty,Ug=Object.getOwnPropertyDescriptor,Ng=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ug(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Lg(t,i,n),n};const Gg={ref:{width:150,isHidden:!1},graph:{width:150,isHidden:!1},message:{width:300,isHidden:!1},author:{width:130,isHidden:!1},datetime:{width:130,isHidden:!1},sha:{width:130,isHidden:!1},changes:{width:130,isHidden:!0}};class GraphWebview extends tg{constructor(e){super(e,"gitlens.graph","graph.html","images/gitlens-icon.png","Commit Graph",`${c.zf.WebviewPrefix}graph`,"graphWebview",c.Gh.ShowGraphPage),this._onDidChangeSelection=new s.EventEmitter,this._firstSelection=!0,this._pendingIpcNotifications=new Map,this.isWindowFocused=!0,this._showActiveSelectionDetailsDebounced=void 0,this._fireSelectionChangedDebounced=void 0,this._notifyDidChangeStateDebounced=void 0,this._notifyDidChangeAvatarsDebounced=void 0,this._notifyDidChangeRefsMetadataDebounced=void 0,this._ipcNotificationMap=new Map([[Tg,this.notifyDidChangeColumns],[kg,this.notifyDidChangeConfiguration],[Sg,this.notifyDidChangeState],[Ig,this.notifyDidChangeRefsVisibility],[Og,this.notifyDidChangeSelection],[Rg,this.notifyDidChangeSubscription],[Bg,this.notifyDidChangeWorkingTree],[xg,this.notifyDidChangeWindowFocus],[Wg,this.notifyDidFetch]]),this._showDetailsView=r.D.get("graph.showDetailsView"),this.disposables.push(r.D.onDidChange(this.onConfigurationChanged,this),(0,Lt.IH)(e.onReady)((()=>queueMicrotask((()=>this.updateStatusBar())))),(0,Ci.ve)((e=>{e!==c.zf.Enabled&&e!==c.zf.PlusEnabled||this.updateStatusBar()})),{dispose:()=>this._statusBarItem?.dispose()},(0,ki.xR)(c.Gh.ShowInCommitGraph,(async e=>{let t;e instanceof lt._j?this.repository=e:(this.repository=this.container.git.getRepository(e.ref.repoPath),t=e.ref.ref,(0,u.D3)(t)||(t=await this.container.git.resolveReference(e.ref.repoPath,t,void 0,{force:!0})),this.setSelectedRows(t));const i="preserveFocus"in e&&(e.preserveFocus??!1);if(null==this._panel)this.show({preserveFocus:i});else if(t){if(this._panel.reveal(this._panel.viewColumn??s.ViewColumn.Active,i??!1),this._graph?.ids.has(t))return void this.notifyDidChangeSelection();this.setSelectedRows(t),this.onGetMoreRows({id:t},!0)}})))}get onDidChangeSelection(){return this._onDidChangeSelection.event}get repository(){return this._repository}set repository(e){this._repository!==e?(this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.isReady&&this.updateState()):this.ensureRepositorySubscriptions()}get selection(){return this._selection}get activeSelection(){return this._selection?.[0]}onWindowFocusChanged(e){this.isWindowFocused=e,this.notifyDidChangeWindowFocus()}get options(){return{retainContextWhenHidden:!0,enableFindWidget:!1,enableCommandUris:!0,enableScripts:!0}}async show(e,...t){if(this._firstSelection=!0,await Ja()){if(this.container.git.repositoryCount>1){const[e]=Li(c.Gh.ShowGraphPage,void 0,...t),i=Array.isArray(e)?e[0]:e;"scm"===i.type&&null!=i.scm.rootUri?this.repository=this.container.git.getRepository(i.scm.rootUri):"viewItem"===i.type&&i.node instanceof $i.vb&&(this.repository=i.node.repo),null!=this.repository&&this.isReady&&this.updateState()}return super.show({column:s.ViewColumn.Active,...e},...t)}}refresh(e){return this.resetRepositoryState(),e&&this._pendingIpcNotifications.clear(),super.refresh(e)}async includeBootstrap(){return this.getState(!0)}registerCommands(){return[(0,ki.xR)(c.Gh.RefreshGraph,(()=>this.refresh(!0))),(0,ki.xR)("gitlens.graph.push",this.push,this),(0,ki.xR)("gitlens.graph.pull",this.pull,this),(0,ki.xR)("gitlens.graph.fetch",this.fetch,this),(0,ki.xR)("gitlens.graph.switchToAnotherBranch",this.switchToAnother,this),(0,ki.xR)("gitlens.graph.createBranch",this.createBranch,this),(0,ki.xR)("gitlens.graph.deleteBranch",this.deleteBranch,this),(0,ki.xR)("gitlens.graph.copyRemoteBranchUrl",(e=>this.openBranchOnRemote(e,!0)),this),(0,ki.xR)("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote,this),(0,ki.xR)("gitlens.graph.mergeBranchInto",this.mergeBranchInto,this),(0,ki.xR)("gitlens.graph.rebaseOntoBranch",this.rebase,this),(0,ki.xR)("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote,this),(0,ki.xR)("gitlens.graph.renameBranch",this.renameBranch,this),(0,ki.xR)("gitlens.graph.switchToBranch",this.switchTo,this),(0,ki.xR)("gitlens.graph.hideLocalBranch",this.hideRef,this),(0,ki.xR)("gitlens.graph.hideRemoteBranch",this.hideRef,this),(0,ki.xR)("gitlens.graph.hideRemote",(e=>this.hideRef(e,{remote:!0})),this),(0,ki.xR)("gitlens.graph.hideRefGroup",(e=>this.hideRef(e,{group:!0})),this),(0,ki.xR)("gitlens.graph.hideTag",this.hideRef,this),(0,ki.xR)("gitlens.graph.cherryPick",this.cherryPick,this),(0,ki.xR)("gitlens.graph.copyRemoteCommitUrl",(e=>this.openCommitOnRemote(e,!0)),this),(0,ki.xR)("gitlens.graph.showInDetailsView",this.openInDetailsView,this),(0,ki.xR)("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote,this),(0,ki.xR)("gitlens.graph.openSCM",this.openSCM,this),(0,ki.xR)("gitlens.graph.rebaseOntoCommit",this.rebase,this),(0,ki.xR)("gitlens.graph.resetCommit",this.resetCommit,this),(0,ki.xR)("gitlens.graph.resetToCommit",this.resetToCommit,this),(0,ki.xR)("gitlens.graph.revert",this.revertCommit,this),(0,ki.xR)("gitlens.graph.switchToCommit",this.switchTo,this),(0,ki.xR)("gitlens.graph.undoCommit",this.undoCommit,this),(0,ki.xR)("gitlens.graph.saveStash",this.saveStash,this),(0,ki.xR)("gitlens.graph.applyStash",this.applyStash,this),(0,ki.xR)("gitlens.graph.deleteStash",this.deleteStash,this),(0,ki.xR)("gitlens.graph.createTag",this.createTag,this),(0,ki.xR)("gitlens.graph.deleteTag",this.deleteTag,this),(0,ki.xR)("gitlens.graph.switchToTag",this.switchTo,this),(0,ki.xR)("gitlens.graph.createWorktree",this.createWorktree,this),(0,ki.xR)("gitlens.graph.createPullRequest",this.createPullRequest,this),(0,ki.xR)("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote,this),(0,ki.xR)("gitlens.graph.compareWithUpstream",this.compareWithUpstream,this),(0,ki.xR)("gitlens.graph.compareWithHead",this.compareHeadWith,this),(0,ki.xR)("gitlens.graph.compareWithWorking",this.compareWorkingWith,this),(0,ki.xR)("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking,this),(0,ki.xR)("gitlens.graph.copy",this.copy,this),(0,ki.xR)("gitlens.graph.copyMessage",this.copyMessage,this),(0,ki.xR)("gitlens.graph.copySha",this.copySha,this),(0,ki.xR)("gitlens.graph.addAuthor",this.addAuthor,this),(0,ki.xR)("gitlens.graph.columnAuthorOn",(()=>this.toggleColumn("author",!0))),(0,ki.xR)("gitlens.graph.columnAuthorOff",(()=>this.toggleColumn("author",!1))),(0,ki.xR)("gitlens.graph.columnDateTimeOn",(()=>this.toggleColumn("datetime",!0))),(0,ki.xR)("gitlens.graph.columnDateTimeOff",(()=>this.toggleColumn("datetime",!1))),(0,ki.xR)("gitlens.graph.columnShaOn",(()=>this.toggleColumn("sha",!0))),(0,ki.xR)("gitlens.graph.columnShaOff",(()=>this.toggleColumn("sha",!1))),(0,ki.xR)("gitlens.graph.columnChangesOn",(()=>this.toggleColumn("changes",!0))),(0,ki.xR)("gitlens.graph.columnChangesOff",(()=>this.toggleColumn("changes",!1))),(0,ki.xR)("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch,this),(0,ki.xR)("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit,this),(0,ki.xR)("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo,this),(0,ki.xR)("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag,this)]}onInitializing(){return this._theme=s.window.activeColorTheme,this.ensureRepositorySubscriptions(),[this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories((()=>{this.refresh(!0)})),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}}]}onReady(){this.sendPendingIpcNotifications()}onMessageReceived(e){switch(e.method){case cg.method:Nm(cg,e,(()=>this.onChooseRepository()));break;case hg.method:Nm(hg,e,(e=>this.dimMergeCommits(e)));break;case ug.method:Nm(ug,e,(e=>this.dismissBanner(e)));break;case dg.method:Nm(dg,e,(e=>this.onDoubleClick(e)));break;case pg.method:Nm(pg,e,(t=>this.onEnsureRow(t,e.completionId)));break;case mg.method:Nm(mg,e,(e=>this.onGetMissingAvatars(e)));break;case gg.method:Nm(gg,e,(e=>this.onGetMissingRefMetadata(e)));break;case fg.method:Nm(fg,e,(e=>this.onGetMoreRows(e)));break;case wg.method:Nm(wg,e,(t=>this.onSearch(t,e.completionId)));break;case vg.method:Nm(vg,e,(e=>this.onSearchOpenInView(e)));break;case yg.method:Nm(yg,e,(e=>this.onColumnsChanged(e)));break;case Ag.method:Nm(Ag,e,(e=>this.updateGraphConfig(e)));break;case bg.method:Nm(bg,e,(e=>this.onRefsVisibilityChanged(e)));break;case Dg.method:Nm(Dg,e,this.onSelectionChanged.bind(this));break;case Cg.method:Nm(Cg,e,(e=>this.updateExcludedType(this._graph,e)));break;case Pg.method:Nm(Pg,e,(e=>this.updateIncludeOnlyRefs(this._graph,e.refs)))}}updateGraphConfig(e){const t=this.getComponentConfig();let i;for(i in e.changes)if(t[i]!==e.changes[i]&&"minimap"===i)r.D.updateEffective("graph.experimental.minimap.enabled",e.changes[i])}onFocusChanged(e){e&&null!=this.activeSelection&&this.container.commitDetailsView.visible?this.showActiveSelectionDetails():this._showActiveSelectionDetailsDebounced?.cancel()}showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,Lt.Ds)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){const{activeSelection:e}=this;null!=e&&this.container.events.fire("commit:selected",{commit:e,pin:!1,preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.id})}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.repository&&this.repository.etag!==this._etagRepository)this.updateState(!0);else if(e){this.isReady&&this.sendPendingIpcNotifications();const{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onConfigurationChanged(e){r.D.changed(e,"graph.showDetailsView")&&(this._showDetailsView=r.D.get("graph.showDetailsView")),(r.D.changed(e,"graph.statusBar.enabled")||r.D.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar(),null!=this._panel&&(r.D.changed(e,"graph.commitOrdering")?this.updateState():(r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"advanced.abbreviatedShaLength")||r.D.changed(e,"graph.avatars")||r.D.changed(e,"graph.dateFormat")||r.D.changed(e,"graph.dateStyle")||r.D.changed(e,"graph.dimMergeCommits")||r.D.changed(e,"graph.highlightRowsOnRefHover")||r.D.changed(e,"graph.scrollRowPadding")||r.D.changed(e,"graph.scrollMarkers.enabled")||r.D.changed(e,"graph.scrollMarkers.additionalTypes")||r.D.changed(e,"graph.showGhostRefsOnRowHover")||r.D.changed(e,"graph.pullRequests.enabled")||r.D.changed(e,"graph.showRemoteNames")||r.D.changed(e,"graph.showUpstreamStatus")||r.D.changed(e,"graph.experimental.minimap.enabled")||r.D.changed(e,"graph.experimental.minimap.additionalTypes"))&&(this.notifyDidChangeConfiguration(),r.D.changed(e,"graph.experimental.minimap.enabled")&&r.D.get("graph.experimental.minimap.enabled")&&!this._graph?.includes?.stats&&this.updateState()))}onRepositoryChanged(e){e.changed(lt.I6.Config,lt.I6.Head,lt.I6.Heads,lt.I6.Remotes,lt.I6.Stash,lt.I6.Status,lt.I6.Tags,lt.I6.Unknown,lt.du.Any)?(e.changed(lt.I6.Head,lt.du.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(lt.I6.Unknown,lt.du.Exclusive))):this._etagRepository=e.repository.etag}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription(),this.updateStatusBar())}onThemeChanged(e){null!=this._theme&&((0,Pi.$o)(e)&&(0,Pi.$o)(this._theme)||(0,Pi.GC)(e)&&(0,Pi.GC)(this._theme))||(this._theme=e,this.updateState())}dimMergeCommits(e){r.D.updateEffective("graph.dimMergeCommits",e.dim)}dismissBanner(e){"trial"===e.key&&(this.trialBanner=!1);let t=this.container.storage.getWorkspace("graph:banners:dismissed");t=(0,$m.iC)(t,e.key,!0),this.container.storage.storeWorkspace("graph:banners:dismissed",t)}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(qg(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&Qg(t,"upstreamStatus")){const{ahead:e,behind:i,ref:s}=t.webviewItemValue;if(i>0)return void Gs(s.repoPath,s);if(e>0)return void Hs(s.repoPath,!1,s)}else if("pullRequest"===e.metadata.type&&Qg(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}const{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?Ys(i.repoPath):Ys(i.repoPath,i,!!r.D.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){const t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);null!=t&&this.container.events.fire("commit:selected",{commit:t,preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.id})}return Promise.resolve()}async onEnsureRow(e,t){if(null==this._graph)return;let i;this._graph.skippedIds?.has(e.id)||(this._graph.ids.has(e.id)?i=e.id:(await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(),this._graph.ids.has(e.id)&&(i=e.id))),this.notify(Eg,{id:i},t)}async onGetMissingAvatars(e){if(null==this._graph)return;const t=this._graph.repoPath;async function i(e,i){const s=await(0,Ze.oP)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,s.toString(!0))}const s=[];for(const[t,r]of Object.entries(e.emails))this._graph.avatars.has(t)||s.push(i.call(this,t,r));s.length&&(await Promise.allSettled(s),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!(0,Ci.fw)(c.zf.HasConnectedRemotes))return;const t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);const s=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],r={...this._refsMetadata.get(e)};if(null!=s)for(const t of i)if(lg.includes(t))if(t!==ng.PullRequest){if(t===ng.Upstream){const t=s?.upstream;if(null==t||null==t||t.missing){r.upstream=null,this._refsMetadata.set(e,r);continue}const i={name:(0,p.S3)(t.name),owner:(0,p.Lo)(t.name),ahead:s.state.ahead,behind:s.state.behind,context:(0,Ht.BH)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,u.LB)(s),ahead:s.state.ahead,behind:s.state.behind}})};r.upstream=i,this._refsMetadata.set(e,r)}}else{const t=await(s?.getAssociatedPullRequest());if(null==t){void 0!==r.pullRequest&&0!==r.pullRequest?.length||(r.pullRequest=null),this._refsMetadata.set(e,r);continue}const i={hostingServiceType:t.provider.id,id:Number.parseInt(t.id)||0,title:t.title,author:t.author.name,date:(t.mergedDate??t.closedDate??t.date)?.getTime(),state:t.state,url:t.url,context:(0,Ht.BH)({webviewItem:"gitlens:pullrequest",webviewItemValue:{type:"pullrequest",id:t.id,url:t.url}})};r.pullRequest=[i],this._refsMetadata.set(e,r)}else r[t]=null,this._refsMetadata.set(e,r);else for(const t of i)r[t]=null,this._refsMetadata.set(e,r)}const s=[];for(const t of Object.keys(e.metadata))s.push(i.call(this,t,e.metadata[t]));s.length&&await Promise.allSettled(s),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){null!=this._graph?.paging&&(null!=this._graph?.more&&this.repository?.etag===this._etagRepository?(await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)):this.updateState(!0))}async onSearch(e,t){if(null==e.search)return void this.resetSearchState();let i=this._search;if(e.more&&null!=i?.more&&i.comparisonKey===(0,Et.FL)(e.search))return i=await i.more(e.limit??r.D.get("graph.searchItemLimit")??100),void(null!=i&&(this._search=i,await this.ensureSearchStartsInRange(this._graph,i),this.notify(Mg,{results:i.results.size>0?{ids:Object.fromEntries(i.results),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}}:void 0},t)));if(null==i||i.comparisonKey!==(0,Et.FL)(e.search)){if(null==this.repository)return;this.repository.etag!==this._etagRepository&&this.updateState(!0),null!=this._searchCancellation&&(this._searchCancellation.cancel(),this._searchCancellation.dispose());const n=new s.CancellationTokenSource;this._searchCancellation=n;try{i=await this.repository.searchCommits(e.search,{limit:r.D.get("graph.searchItemLimit")??100,ordering:r.D.get("graph.commitOrdering"),cancellation:n.token})}catch(e){return this._search=void 0,void this.notify(Mg,{results:{error:e instanceof tt.l0?"Invalid search pattern":"Unexpected error"}},t)}if(n.token.isCancellationRequested)return void(null!=t&&this.notify(Mg,{results:void 0},t));this._search=i}else i=this._search;const n=await this.ensureSearchStartsInRange(this._graph,i);let o=!1;null!=n&&(o=!0,this.setSelectedRows(n)),this.notify(Mg,{results:0===i.results.size?{count:0}:{ids:Object.fromEntries(i.results),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}},selectedRows:o?this._selectedRows:void 0},t)}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){const e=this.container.git.openRepositories.sort(((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index)),t=await Ol(`Switch Repository ${c.NE.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t.item)}onSelectionChanged(e){const t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,Lt.Ds)(this.fireSelectionChanged.bind(this),250)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;const i=this.getRevisionReference(this.repository.path,e,t),s=null!=i?[i]:void 0;this._selection=s,this._onDidChangeSelection.fire({selection:s??[]}),null!=s&&(this.container.events.fire("commit:selected",{commit:s[0],pin:!1,preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.id}),this._firstSelection=!1)}getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case nt.e.Stash:return(0,u.xB)(t,e,{refType:"stash",name:t,number:void 0});case nt.e.Working:return(0,u.xB)(P.CL,e,{refType:"revision"});default:return(0,u.xB)(t,e,{refType:"revision"})}}updateState(e=!1){this._pendingIpcNotifications.clear(),e?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,Lt.Ds)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced())}async notifyDidChangeWindowFocus(){return this.isReady&&this.visible?this.notify(xg,{focused:this.isWindowFocused}):(this.addPendingIpcNotification(xg),!1)}updateAvatars(e=!1){e?this.notifyDidChangeAvatars():(null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,Lt.Ds)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced())}async notifyDidChangeAvatars(){if(null==this._graph)return;const e=this._graph;return this.notify(Fg,{avatars:Object.fromEntries(e.avatars)})}updateRefsMetadata(e=!1){e?this.notifyDidChangeRefsMetadata():(null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,Lt.Ds)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced())}async notifyDidChangeRefsMetadata(){return this.notify($g,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.isReady||!this.visible)return this.addPendingIpcNotification(Tg),!1;const e=this.getColumns(),t=this.getColumnSettings(e);return this.notify(Tg,{columns:t,context:this.getColumnHeaderContext(t)})}async notifyDidChangeRefsVisibility(){return this.isReady&&this.visible?this.notify(Ig,{excludeRefs:this.getExcludedRefs(this._graph),excludeTypes:this.getExcludedTypes(this._graph),includeOnlyRefs:this.getIncludeOnlyRefs(this._graph)}):(this.addPendingIpcNotification(Ig),!1)}async notifyDidChangeConfiguration(){return this.isReady&&this.visible?this.notify(kg,{config:this.getComponentConfig()}):(this.addPendingIpcNotification(kg),!1)}async notifyDidFetch(){if(!this.isReady||!this.visible)return this.addPendingIpcNotification(Wg),!1;const e=await this.repository.getLastFetched();return this.notify(Wg,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;const i=this._graph;return this.notify(_g,{rows:i.rows,downstreams:Object.fromEntries(i.downstreams),avatars:Object.fromEntries(i.avatars),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeWorkingTree(){return this.isReady&&this.visible?this.notify(Bg,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.addPendingIpcNotification(Bg),!1)}async notifyDidChangeSelection(){return this.isReady&&this.visible?this.notify(Og,{selection:this._selectedRows??{}}):(this.addPendingIpcNotification(Og),!1)}async notifyDidChangeSubscription(){if(!this.isReady||!this.visible)return this.addPendingIpcNotification(Rg),!1;const[e]=await this.getGraphAccess();return this.notify(Rg,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.isReady&&this.visible?this.notify(Sg,{state:await this.getState()}):(this.addPendingIpcNotification(Sg),!1)}async notify(e,t,i){const s={id:this.nextIpcId(),method:e.method,params:t,completionId:i},r=await this.postMessage(s);return r?this._pendingIpcNotifications.clear():this.addPendingIpcNotification(e,s),r}addPendingIpcNotification(e,t){let i;if(e===Sg?this._pendingIpcNotifications.clear():e.overwriteable&&this._pendingIpcNotifications.delete(e),null==t){if(i=this._ipcNotificationMap.get(e)?.bind(this),null==i)return}else i=t;this._pendingIpcNotifications.set(e,i)}sendPendingIpcNotifications(){if(0===this._pendingIpcNotifications.size)return;const e=new Map(this._pendingIpcNotifications);this._pendingIpcNotifications.clear();for(const t of e.values())"function"==typeof t?t():this.postMessage(t)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);const t=this.repository;null!=t&&(this._repositoryEventsDisposable=s.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.startWatchingFileSystem(),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,Ci.ve)((e=>{e===c.zf.HasConnectedRemotes&&(this.resetRefsMetadata(),this.updateRefsMetadata())}))))}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);const t=this.repository;if(null==t)return;const i=await t.getLastFetched()??0;let s=lt._j.getLastFetchedUpdateInterval(i);0!==i&&s>0&&(this._lastFetchedDisposable=(0,Lt.DH)((()=>{const e=lt._j.getLastFetchedUpdateInterval(i);s!==lt._j.getLastFetchedUpdateInterval(i)&&(s=e),this.notifyDidFetch()}),s))}async ensureSearchStartsInRange(e,t){if(0===t.results.size)return;let i;for(const s of t.results.keys()){if(e.ids.has(s))return s;if(!e.skippedIds?.has(s)){i=s;break}}return null!=i?(await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0):void 0}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){if(null!=e)return this.getFiltersByRepo(e)?.excludeTypes}getExcludedRefs(e){if(null==e)return;let t;const i=this.container.storage.getWorkspace("graph:hiddenRefs");if(null!=i&&0!==Object.keys(i).length){t=this.container.storage.getWorkspace("graph:filtersByRepo")??{};for(const e in i){const s=Yg(e);t[s]=t[s]??{},t[s].excludeRefs=(0,$m.iC)(t[s].excludeRefs,e,i[e])}this.container.storage.storeWorkspace("graph:filtersByRepo",t),this.container.storage.deleteWorkspace("graph:hiddenRefs")}const s=(t?.[e.repoPath]??this.getFiltersByRepo(e))?.excludeRefs;if(null==s||0===Object.keys(s).length)return;const n=r.D.get("graph.avatars",void 0,!0),o={};for(const t in s){const i={...s[t]};if("remote"===i.type&&i.owner){const t=e.remotes.get(i.owner);null!=t&&(i.avatarUrl=((n?t.provider?.avatarUri:void 0)??(0,ot.dM)(this.container,t,this._panel.webview.asWebviewUri.bind(this._panel.webview)))?.toString(!0))}o[t]=i}return o}getIncludeOnlyRefs(e){if(null==e)return;const t=this.getFiltersByRepo(e),i=t?.includeOnlyRefs;if(null==i||0===Object.keys(i).length)return;const s={};for(const[t,r]of Object.entries(i)){let i;if("HEAD"===r.id){if(i=(0,ye.sE)(e.branches.values(),(e=>e.current)),null==i)continue;s[i.id]={...r,id:i.id,name:i.name}}else s[t]=r;if("head"===r.type&&(i=i??e.branches.get(r.name),null!=i?.upstream&&!i.upstream.missing)){const t=(0,p.Vx)(e.repoPath,!0,i.upstream.name);s[t]={id:t,type:"remote",name:(0,p.S3)(i.upstream.name),owner:(0,p.Lo)(i.upstream.name)}}}return s}getFiltersByRepo(e){if(null==e)return;const t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e.repoPath]}getColumnSettings(e){const t={...Gg};if(null!=e)for(const[i,s]of Object.entries(e))t[i]={...Gg[i],...s};return t}getColumnHeaderContext(e){const t=[];for(const[i,s]of Object.entries(e))s.isHidden&&t.push(i);return(0,Ht.BH)({webviewItem:"gitlens:graph:columns",webviewItemValue:t.join(",")})}getComponentConfig(){return{avatars:r.D.get("graph.avatars"),dateFormat:r.D.get("graph.dateFormat")??r.D.get("defaultDateFormat")??"short+short",dateStyle:r.D.get("graph.dateStyle")??r.D.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:r.D.get("graph.dimMergeCommits"),enableMultiSelection:!1,highlightRowsOnRefHover:r.D.get("graph.highlightRowsOnRefHover"),minimap:r.D.get("graph.experimental.minimap.enabled"),enabledMinimapMarkerTypes:this.getEnabledGraphMinimapMarkers(),scrollRowPadding:r.D.get("graph.scrollRowPadding"),enabledScrollMarkerTypes:this.getEnabledGraphScrollMarkers(),showGhostRefsOnRowHover:r.D.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:r.D.get("graph.showRemoteNames"),idLength:r.D.get("advanced.abbreviatedShaLength")}}getEnabledGraphScrollMarkers(){if(!r.D.get("graph.scrollMarkers.enabled"))return[];return[og.Selection,og.Highlights,og.Head,og.Upstream,...r.D.get("graph.scrollMarkers.additionalTypes")]}getEnabledGraphMinimapMarkers(){if(!r.D.get("graph.experimental.minimap.enabled"))return[];return[ag.Selection,ag.Highlights,ag.Head,ag.Upstream,...r.D.get("graph.experimental.minimap.additionalTypes")]}getEnabledRefMetadataTypes(){const e=[];return r.D.get("graph.pullRequests.enabled")&&e.push(ng.PullRequest),r.D.get("graph.showUpstreamStatus")&&e.push(ng.Upstream),e}async getGraphAccess(){let e=await this.container.git.access(et.x.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(await this.container.subscription.startPreviewTrial(!0),e=await this.container.git.access(et.x.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){const t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;const e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,Ht.BH)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,P.CL,nt.e.Working)}})}}async getState(e){if(0===this.container.git.repositoryCount)return{debugging:this.container.debugging,allowed:!0,repositories:[]};if(null==this.trialBanner){const e=this.container.storage.getWorkspace("graph:banners:dismissed");null==this.trialBanner&&(this.trialBanner=!e?.trial)}if(null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{debugging:this.container.debugging,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.title=`${this.originalTitle}: ${this.repository.formattedName}`;const{defaultItemLimit:t}=r.D.get("graph"),i=Math.max(t,this._graph?.ids.size??t),s=null==this._selectedId||this._selectedId===P.CL?"HEAD":this._selectedId,n=this.getColumns(),o=this.getColumnSettings(n),a=this.container.git.getCommitsForGraph(this.repository.path,this._panel.webview.asWebviewUri.bind(this._panel.webview),{include:{stats:r.D.get("graph.experimental.minimap.enabled")||!o.changes.isHidden},limit:i,ref:s}),[l,c]=await Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats()]),[h,u]=(0,Nt.Sb)(l)??[];let d;e?queueMicrotask((async()=>{const e=await a;this.setGraph(e),this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)})):(d=await a,this.setGraph(d),this.setSelectedRows(d.id));const p=await this.repository.getLastFetched(),m=await this.repository.getBranch();return{windowFocused:this.isWindowFocused,trialBanner:this.trialBanner,repositories:Hg(this.container.git.openRepositories),selectedRepository:this.repository.path,selectedRepositoryVisibility:u,branchName:m?.name,lastFetched:new Date(p),selectedRows:this._selectedRows,subscription:h?.subscription.current,allowed:!1!==(h?.allowed??!1),avatars:null!=d?Object.fromEntries(d.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rows:d?.rows,downstreams:null!=d?Object.fromEntries(d.downstreams):void 0,paging:null!=d?{startingCursor:d.paging?.startingCursor,hasMore:d.paging?.hasMore??!1}:void 0,columns:o,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(o)},excludeRefs:null!=d?this.getExcludedRefs(d)??{}:{},excludeTypes:this.getExcludedTypes(d)??{},includeOnlyRefs:null!=d?this.getIncludeOnlyRefs(d)??{}:{},nonce:this.cspNonce,workingTreeStats:(0,Nt.Sb)(c)??{added:0,deleted:0,modified:0},debugging:this.container.debugging}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(const[i,s]of Object.entries(e))t=(0,$m.iC)(t,i,s);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==t||0===t.length)return;let s=this.getFiltersByRepo(e)?.excludeRefs??{};for(const e of t)s=(0,$m.iC)(s,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:s}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)throw new Error("Cannot save repository filters since Graph is undefined");const i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,$m.iC)(i,e.repoPath,{...i?.[e.repoPath],...t}))}updateIncludeOnlyRefs(e,t){let i;if(null==t||0===t.length){if(null==this.getFiltersByRepo(e)?.includeOnlyRefs)return;i=void 0}else{i={};for(const e of t)i[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner}}this.updateFiltersByRepo(e,{includeOnlyRefs:i}),this.notifyDidChangeRefsVisibility()}updateExcludedType(e,{key:t,value:i}){let s=this.getFiltersByRepo(e)?.excludeTypes;(null!=s&&0!==Object.keys(s).length||!1!==i)&&(s=(0,$m.iC)(s,t,i),this.updateFiltersByRepo(e,{excludeTypes:s}),this.notifyDidChangeRefsVisibility())}resetRefsMetadata(){return this._refsMetadata=(0,Ci.fw)(c.zf.HasConnectedRemotes)?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this._searchCancellation?.dispose(),this._searchCancellation=void 0}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===P.CL&&(e=nt.e.Working),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e&&(this.resetRefsMetadata(),this.resetSearchState())}async updateGraphWithMoreRows(e,t,i){const{defaultItemLimit:s,pageItemLimit:n}=r.D.get("graph"),o=await(e.more?.(n??s,t));if(null!=o&&(this.setGraph(o),i?.paging?.hasMore)){const e=(0,ye.Z$)(i.results)?.[0];null!=e&&(o.ids.has(e)||o.skippedIds?.has(e))&&queueMicrotask((()=>{this.onSearch({search:i.query,more:!0})}))}}updateStatusBar(){r.D.get("graph.statusBar.enabled")&&(0,Ci.fw)(c.zf.Enabled)&&Ka()?(null==this._statusBarItem&&(this._statusBarItem=s.window.createStatusBarItem("gitlens.graph",s.StatusBarAlignment.Left,9997),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command=c.Gh.ShowGraphPage,this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new s.MarkdownString("Visualize commits on the Commit Graph ✨"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}fetch(e){const t=this.getGraphItemRef(e,"branch");Us(this.repository,t)}pull(e){const t=this.getGraphItemRef(e,"branch");Gs(this.repository,t)}push(e){const t=this.getGraphItemRef(e);Hs(this.repository,void 0,t)}createBranch(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():gs(t.repoPath,t)}deleteBranch(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;return fs(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;return Ns(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(qg(e,"branch")){const{ref:i}=e.webviewItemValue;return(0,ki.P0)(c.Gh.OpenOnRemote,{repoPath:i.repoPath,resource:{type:at.J.Branch,branch:i.name},remote:i.upstream?.name,clipboard:t})}return Promise.resolve()}rebase(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():Vs(t.repoPath,t)}rebaseToRemote(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;if(null!=t.upstream)return Vs(t.repoPath,(0,u.xB)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;return ws(t.repoPath,t)}return Promise.resolve()}cherryPick(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():Ls(t.repoPath,t)}async copy(e){const t=this.getGraphItemRef(e);if(null!=t)await s.env.clipboard.writeText("revision"===t.refType&&t.message?`${t.name}: ${t.message}`:t.name);else if(Qg(e,"contributor")){const{name:t,email:i}=e.webviewItemValue;await s.env.clipboard.writeText(`${t}${i?` <${i}>`:""}`)}else if(Qg(e,"pullrequest")){const{url:t}=e.webviewItemValue;await s.env.clipboard.writeText(t)}return Promise.resolve()}copyMessage(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,ki.P0)(c.Gh.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,u.D3)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,ki.P0)(c.Gh.CopyShaToClipboard,{sha:i})}openInDetailsView(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,ki.P0)(c.Gh.ShowInDetailsView,{repoPath:t.repoPath,refs:[t.ref]})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,ki.dO)(c.nA.ShowSCM)}openCommitOnRemote(e,t){const i=this.getGraphItemRef(e,"revision");return null==i?Promise.resolve():(0,ki.P0)(c.Gh.OpenOnRemote,{repoPath:i.repoPath,resource:{type:at.J.Commit,sha:i.ref},clipboard:t})}copyDeepLinkToBranch(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;return(0,ki.P0)(c.Gh.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,ki.P0)(c.Gh.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;return t.remote?(0,ki.P0)(c.Gh.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,p.Lo)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(qg(e,"tag")){const{ref:t}=e.webviewItemValue;return(0,ki.P0)(c.Gh.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}resetCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():Qs(t.repoPath,(0,u.xB)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():Qs(t.repoPath,t)}revertCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():qs(t.repoPath,t)}switchTo(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():Ys(t.repoPath,t)}hideRef(e,t){let i;if(t?.group&&function(e){return null!=e&&(function(e){return null!=e&&((0,Ht.dH)(e)&&"gitlens.graph"===e.webview)}(e)&&"object"==typeof e.webviewItemGroupValue&&"refGroup"===e.webviewItemGroupValue.type)}(e))({refs:i}=e.webviewItemGroupValue);else if(!t?.group&&qg(e)){const{ref:t}=e.webviewItemValue;null!=t.id&&(i=[t])}return null!=i&&this.updateExcludedRefs(this._graph,i.map((e=>{const i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,p.S3)(e.name):e.name,owner:i?(0,p.Lo)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}})),!1),Promise.resolve()}switchToAnother(e){const t=this.getGraphItemRef(e);return Ys(null==t?this.repository?.path:t.repoPath)}async undoCommit(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();const i=await this.container.git.getOrOpenScmRepository(t.repoPath),r=await(i?.getCommit("HEAD"));r?.hash===t.ref?(0,ki.Zv)(c.S8.UndoCommit,t.repoPath):s.window.showWarningMessage(`Commit ${(0,u.Wh)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`)}saveStash(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():Js(t.repoPath)}applyStash(e){const t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():zs(t.repoPath,t)}deleteStash(e){const t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():Ks(t.repoPath,t)}async createTag(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():er(t.repoPath,t)}deleteTag(e){if(qg(e,"tag")){const{ref:t}=e.webviewItemValue;return tr(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():sr(t.repoPath,void 0,t)}async createPullRequest(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),s=await(i?.getBranch(t.name)),r=await(s?.getRemote());return(0,ki.SI)("createPullRequest",{repoPath:t.repoPath,remote:null!=r?{name:r.name,provider:null!=r.provider?{id:r.provider.id,name:r.provider.name,domain:r.provider.domain}:void 0,url:r.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequestOnRemote(e,t){if(Vg(e)&&"object"==typeof e.webviewItemValue&&"pullrequest"===e.webviewItemValue.type){const{url:i}=e.webviewItemValue;return(0,ki.P0)(c.Gh.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();const i=await this.container.git.getBranch(t.repoPath);if(null==i)return;const s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);return null!=s?this.container.searchAndCompareView.compare(t.repoPath,{ref:s,label:`ancestry with ${t.ref} (${(0,u.zL)(s)})`},""):void 0}compareHeadWith(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"HEAD",t.ref)}compareWithUpstream(e){if(qg(e,"branch")){const{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}addAuthor(e){if(Qg(e,"contributor")){const{repoPath:t,name:i,email:s,current:r}=e.webviewItemValue;return Bs(t,new rt.V(t,i,s,0,void 0,r))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.isHidden=!t:s={isHidden:!t},i=(0,$m.iC)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||s.isHidden||this._graph?.includes?.stats||this.updateState()}getGraphItemRef(e,t){if(null==e){const e=this.activeSelection;return null==e||null!=t&&t!==e.refType?void 0:e}switch(t){case"branch":return qg(e,"branch")||Qg(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return qg(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return qg(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return qg(e,"tag")?e.webviewItemValue.ref:void 0;default:return qg(e)?e.webviewItemValue.ref:void 0}}}function Hg(e){return 0===e.length?[]:e.map((e=>({formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual})))}function Vg(e){return null!=e&&((0,Ht.tM)(e)&&"gitlens.graph"===e.webview)}function Qg(e,t){return null!=e&&(Vg(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t)}function qg(e,t){return null!=e&&(Vg(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t))}function Yg(e){return e.split("|",1)[0]}Ng([(0,d.fF)({args:{0:e=>e.toString()}})],GraphWebview.prototype,"onRepositoryChanged",1),Ng([(0,d.fF)({args:!1})],GraphWebview.prototype,"onRepositoryFileSystemChanged",1),Ng([(0,d.fF)({args:!1})],GraphWebview.prototype,"onSubscriptionChanged",1),Ng([(0,d.fF)()],GraphWebview.prototype,"onEnsureRow",1),Ng([(0,Wt.H)(),(0,d.fF)()],GraphWebview.prototype,"onGetMoreRows",1),Ng([(0,d.fF)()],GraphWebview.prototype,"onSearch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"updateState",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeWindowFocus",1),Ng([(0,d.fF)()],GraphWebview.prototype,"updateAvatars",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeAvatars",1),Ng([(0,d.fF)()],GraphWebview.prototype,"updateRefsMetadata",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeRefsMetadata",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeColumns",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeRefsVisibility",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeConfiguration",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidFetch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeRows",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeWorkingTree",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeSelection",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeSubscription",1),Ng([(0,d.fF)()],GraphWebview.prototype,"notifyDidChangeState",1),Ng([(0,d.fF)()],GraphWebview.prototype,"fetch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"pull",1),Ng([(0,d.fF)()],GraphWebview.prototype,"push",1),Ng([(0,d.fF)()],GraphWebview.prototype,"createBranch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"deleteBranch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"mergeBranchInto",1),Ng([(0,d.fF)()],GraphWebview.prototype,"openBranchOnRemote",1),Ng([(0,d.fF)()],GraphWebview.prototype,"rebase",1),Ng([(0,d.fF)()],GraphWebview.prototype,"rebaseToRemote",1),Ng([(0,d.fF)()],GraphWebview.prototype,"renameBranch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"cherryPick",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copy",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copyMessage",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copySha",1),Ng([(0,d.fF)()],GraphWebview.prototype,"openInDetailsView",1),Ng([(0,d.fF)()],GraphWebview.prototype,"openSCM",1),Ng([(0,d.fF)()],GraphWebview.prototype,"openCommitOnRemote",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copyDeepLinkToBranch",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copyDeepLinkToCommit",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copyDeepLinkToRepo",1),Ng([(0,d.fF)()],GraphWebview.prototype,"copyDeepLinkToTag",1),Ng([(0,d.fF)()],GraphWebview.prototype,"resetCommit",1),Ng([(0,d.fF)()],GraphWebview.prototype,"resetToCommit",1),Ng([(0,d.fF)()],GraphWebview.prototype,"revertCommit",1),Ng([(0,d.fF)()],GraphWebview.prototype,"switchTo",1),Ng([(0,d.fF)()],GraphWebview.prototype,"hideRef",1),Ng([(0,d.fF)()],GraphWebview.prototype,"switchToAnother",1),Ng([(0,d.fF)()],GraphWebview.prototype,"undoCommit",1),Ng([(0,d.fF)()],GraphWebview.prototype,"saveStash",1),Ng([(0,d.fF)()],GraphWebview.prototype,"applyStash",1),Ng([(0,d.fF)()],GraphWebview.prototype,"deleteStash",1),Ng([(0,d.fF)()],GraphWebview.prototype,"createTag",1),Ng([(0,d.fF)()],GraphWebview.prototype,"deleteTag",1),Ng([(0,d.fF)()],GraphWebview.prototype,"createWorktree",1),Ng([(0,d.fF)()],GraphWebview.prototype,"createPullRequest",1),Ng([(0,d.fF)()],GraphWebview.prototype,"openPullRequestOnRemote",1),Ng([(0,d.fF)()],GraphWebview.prototype,"compareAncestryWithWorking",1),Ng([(0,d.fF)()],GraphWebview.prototype,"compareHeadWith",1),Ng([(0,d.fF)()],GraphWebview.prototype,"compareWithUpstream",1),Ng([(0,d.fF)()],GraphWebview.prototype,"compareWorkingWith",1),Ng([(0,d.fF)()],GraphWebview.prototype,"addAuthor",1),Ng([(0,d.fF)()],GraphWebview.prototype,"toggleColumn",1);const jg=new IpcNotificationType("timeline/didChange"),zg=new IpcCommandType("timeline/point/open"),Kg=new IpcCommandType("timeline/period/update");var Jg=Object.defineProperty,Zg=Object.getOwnPropertyDescriptor,Xg=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Zg(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Jg(t,i,n),n};const ef=2**30;let tf=0;let sf=class{constructor(e,t,i,r,n,o){this.container=e,this.id=t,this.fileName=i,this.contextKeyPrefix=n,this.trackingFeature=o,this.disposables=[],this.isReady=!1,this._cspNonce=(0,ze.Vu)(),this._title=r,this.disposables.push(s.window.registerWebviewViewProvider(t,this))}dispose(){this.disposables.forEach((e=>{e.dispose()})),this._disposableView?.dispose()}get description(){return this._view?.description}set description(e){null!=this._view&&(this._view.description=e)}get title(){return this._view?.title??this._title}set title(e){this._title=e,null!=this._view&&(this._view.title=e)}get visible(){return this._view?.visible??!1}async show(e){const t=(0,Ut.UH)();try{await(0,ki.P0)(`${this.id}.focus`,e)}catch(e){be.Yd.error(e,t)}}get cspNonce(){return this._cspNonce}async resolveWebviewView(e,t,i){this._view=e,e.webview.options={enableCommandUris:!0,enableScripts:!0},e.title=this._title,this._disposableView=s.Disposable.from(this._view.onDidDispose(this.onViewDisposed,this),this._view.onDidChangeVisibility((()=>this.onViewVisibilityChanged(this.visible)),this),this._view.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),s.window.onDidChangeWindowState(this.onWindowStateChanged,this),...this.onInitializing?.()??[],...this.registerCommands?.()??[]),await this.refresh(),this.onVisibilityChanged?.(!0)}async refresh(e){if(null==this._view)return;this.isReady=!1;const t=await this.getHtml(this._view.webview);e&&(this._view.webview.html=""),this._view.webview.html!==t?this._view.webview.html=t:this.isReady=!0}resetContextKeys(){(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,!1),(0,Ci.v)(`${this.contextKeyPrefix}:focus`,!1)}setContextKeys(e,t){(0,Ci.v)(`${this.contextKeyPrefix}:focus`,e),(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,t)}onViewDisposed(){this.resetContextKeys(),this.onFocusChanged?.(!1),this.onVisibilityChanged?.(!1),this.isReady=!1,this._disposableView?.dispose(),this._disposableView=void 0,this._view=void 0}onViewFocusChanged(e){this.setContextKeys(e.focused,e.inputFocused),this.onFocusChanged?.(e.focused)}async onViewVisibilityChanged(e){e?(this.container.usage.track(`${this.trackingFeature}:shown`),await this.refresh()):(this.resetContextKeys(),this.onFocusChanged?.(!1)),this.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&this.onWindowFocusChanged?.(e.focused)}onMessageReceivedCore(e){if(null!=e)switch(e.method){case Gm.method:Nm(Gm,e,(()=>{this.isReady=!0,this.onReady?.()}));break;case Hm.method:Nm(Hm,e,(e=>{this.onViewFocusChanged(e)}));break;case Vm.method:Nm(Vm,e,(e=>{null!=e.args?(0,ki.P0)(e.command,...e.args):(0,ki.P0)(e.command)}));break;default:this.onMessageReceived?.(e)}}getWebRoot(){if(null==this._view)return;const e=s.Uri.joinPath(this.container.context.extensionUri,"dist","webviews");return this._view.webview.asWebviewUri(e).toString()}async getHtml(e){const t=s.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=s.Uri.joinPath(t,this.fileName),r=new TextDecoder("utf8").decode(await s.workspace.fs.readFile(i)),[n,o,a,l]=await Promise.all([this.includeBootstrap?.(),this.includeHead?.(),this.includeBody?.(),this.includeEndOfBody?.()]),c=e.cspSource,h=e.asWebviewUri(this.container.context.extensionUri).toString(),u=e.asWebviewUri(t).toString();return r.replace(/#{(head|body|endOfBody|placement|cspSource|cspNonce|root|webroot)}/g,((e,t)=>{switch(t){case"head":return o??"";case"body":return a??"";case"endOfBody":return`${null!=n?`<script type="text/javascript" nonce="${this.cspNonce}">window.bootstrap=${JSON.stringify(n)};<\/script>`:""}${l??""}`;case"placement":return"view";case"cspSource":return c;case"cspNonce":return this.cspNonce;case"root":return h;case"webroot":return u;default:return""}}))}nextIpcId(){return tf===ef?tf=1:tf++,`host:${tf}`}notify(e,t,i){return this.postMessage({id:this.nextIpcId(),method:e.method,params:t,completionId:i})}postMessage(e){return null!=this._view&&this.isReady?Promise.race([this._view.webview.postMessage(e),new Promise((e=>setTimeout(e,5e3,!1)))]):Promise.resolve(!1)}};Xg([(0,d.cM)()],sf.prototype,"show",1),Xg([(0,d.fF)({args:!1})],sf.prototype,"resolveWebviewView",1),Xg([(0,d.fF)()],sf.prototype,"refresh",1),Xg([(0,d.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],sf.prototype,"onViewFocusChanged",1),Xg([(0,d.fF)()],sf.prototype,"onViewVisibilityChanged",1),Xg([(0,d.fF)({args:{0:e=>null!=e?`${e.id}: method=${e.method}`:"<undefined>"}})],sf.prototype,"onMessageReceivedCore",1),Xg([Um(),(0,d.fF)({args:{0:e=>`{"id":${e.id},"method":${e.method}${e.completionId?`,"completionId":${e.completionId}`:""}}`}})],sf.prototype,"postMessage",1),sf=Xg([(0,d.hJ)(((e,t)=>`${t}(${e.id})`))],sf);var rf=Object.defineProperty,nf=Object.getOwnPropertyDescriptor,of=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?nf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&rf(t,i,n),n};const af="3|M";class TimelineWebviewView extends sf{constructor(e){super(e,"gitlens.views.timeline","timeline.html","Visual File History",`${c.zf.WebviewViewPrefix}timeline`,"timelineView"),this._bootstraping=!0,this._notifyDidChangeStateDebounced=void 0,this._context={uri:void 0,period:af,etagRepositories:0,etagRepository:0,etagSubscription:0}}async show(e){if(await Ja())return super.show(e)}onInitializing(){return this._context={uri:void 0,period:af,etagRepositories:this.container.git.etag,etagRepository:0,etagSubscription:this.container.subscription.etag},this.updatePendingEditor(s.window.activeTextEditor),this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,[this.container.subscription.onDidChange(this.onSubscriptionChanged,this),s.window.onDidChangeActiveTextEditor((0,Lt.Ds)(this.onActiveEditorChanged,250),this),this.container.events.on("file:selected",(0,Lt.Ds)(this.onFileSelected,250),this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this)]}async includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){return[(0,ki.xR)(`${this.id}.refresh`,(()=>this.refresh()),this),(0,ki.xR)(`${this.id}.openInTab`,(()=>this.openInTab()),this)]}onVisibilityChanged(e){e&&(this._bootstraping&&(this._bootstraping=!1,null==this._pendingContext||!("uri"in this._pendingContext))||this.updateState())}onMessageReceived(e){switch(e.method){case zg.method:Nm(zg,e,(async e=>{if(null==e.data||!e.data.selected||null==this._context.uri)return;const t=this.container.git.getRepository(this._context.uri);if(null==t)return;const i=await t.getCommit(e.data.id);null!=i&&this.container.events.fire("commit:selected",{commit:i,pin:!1,preserveFocus:!1,preserveVisibility:!1},{source:this.id})}));break;case Kg.method:Nm(Kg,e,(e=>{this.updatePendingContext({period:e.period})&&this.updateState(!0)}))}}onActiveEditorChanged(e){if(null!=e){if(!(0,Pi.PH)(e))return;this.container.git.isTrackable(e.document.uri)||(e=void 0)}this.updatePendingEditor(e)&&this.updateState()}onFileSelected(e){if(null==e.data)return;let t=e.data.uri;null!=t&&(this.container.git.isTrackable(t)||(t=void 0)),this.updatePendingUri(t)&&this.updateState()}onRepositoriesChanged(e){const t=this.updatePendingUri(this._context.uri);(this.updatePendingContext({etagRepositories:e.etag})||t)&&this.updateState()}onRepositoryChanged(e){e.changed(lt.I6.Heads,lt.I6.Index,lt.du.Any)&&this.updatePendingContext({etagRepository:e.repository.etag})&&this.updateState()}onSubscriptionChanged(e){this.updatePendingContext({etagSubscription:e.etag})&&this.updateState()}async getState(e){const t=r.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=r.D.get("defaultDateShortFormat")??"short",n=e.period??af;if(null==e.uri){return{emptyMessage:"There are no editors open that can provide file history information",period:n,title:"",dateFormat:t,shortDateFormat:i,access:await this.container.git.access(et.x.Timeline)}}const o=await st.YY.fromUri(e.uri),a=o.repoPath,l=await this.container.git.access(et.x.Timeline,a);if(!1===l.allowed){return{dataset:lf().sort(((e,t)=>t.sort-e.sort)),period:n,title:"src/app/index.ts",uri:s.Uri.file("src/app/index.ts").toString(),dateFormat:t,shortDateFormat:i,access:l}}const c=o.relativePath;this.description=o.fileName;const[h,u]=await Promise.all([this.container.git.getCurrentUser(a),this.container.git.getLogForFile(a,o.fsPath,{limit:0,ref:o.sha,since:this.getPeriodDate(n).toISOString()})]);if(null==u)return{dataset:[],emptyMessage:"No commits found for the specified time period",period:n,title:c,sha:o.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:l};let d=[...(0,ye.hX)(u.commits.values(),(e=>null==e.file?.stats&&1!==(0,A.By)(e.stats?.changedFiles)))];if(0!==d.length){const t=r.D.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(e.uri),n=i?.provider.name;d.length>t&&(s.window.showWarningMessage(`Unable able to show more than the first ${t} commits for the specified time period because of ${n?`${n} `:""}rate limits.`),d=d.slice(0,20)),await Promise.allSettled(d.map((e=>e.ensureFullDetails())))}const p=h?.name?`${h.name} (you)`:"You",m=[];for(const e of u.commits.values()){const t=e.file?.stats??(1===(0,A.By)(e.stats?.changedFiles)?e.stats:void 0);m.push({author:"You"===e.author.name?p:e.author.name,additions:t?.additions,deletions:t?.deletions,commit:e.sha,date:e.date.toISOString(),message:e.message??e.summary,sort:e.date.getTime()})}return m.sort(((e,t)=>t.sort-e.sort)),{dataset:m,period:n,title:c,sha:o.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:l}}getPeriodDate(e){const[t,i]=e.split("|");switch(i){case"D":return(0,ie.IH)(new Date,{days:-parseInt(t,10)});case"M":return(0,ie.IH)(new Date,{months:-parseInt(t,10)});case"Y":return(0,ie.IH)(new Date,{years:-parseInt(t,10)});default:return(0,ie.IH)(new Date,{months:-3})}}openInTab(){const e=this._context.uri;null!=e&&s.commands.executeCommand(c.Gh.ShowTimelinePage,e)}updatePendingContext(e){let t=!1;for(const[i,r]of Object.entries(e)){const e=this._context[i];e===r||(e instanceof s.Uri||r instanceof s.Uri)&&e?.toString()===r?.toString()||(null==this._pendingContext&&(this._pendingContext={}),this._pendingContext[i]=r,t=!0)}return t}updatePendingEditor(e){return(null!=e||!(0,Pi.JM)())&&(!(null!=e&&!(0,Pi.PH)(e))&&this.updatePendingUri(e?.document.uri))}updatePendingUri(e){let t;if(null!=e){const i=this.container.git.getRepository(e);t=i?.etag??0}else t=0;return this.updatePendingContext({uri:e,etagRepository:t})}updateState(e=!1){this.isReady&&this.visible&&(null==this._pendingContext&&this.updatePendingEditor(s.window.activeTextEditor),e?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,Lt.Ds)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()))}async notifyDidChangeState(){if(!this.isReady||!this.visible)return!1;if(this._notifyDidChangeStateDebounced?.cancel(),null==this._pendingContext)return!1;const e={...this._context,...this._pendingContext};return s.window.withProgress({location:{viewId:this.id}},(async()=>{await this.notify(jg,{state:await this.getState(e)})&&(this._context=e,this._pendingContext=void 0)}))}}function lf(){const e=[],t=["Eric Amodio","Justin Roberts","Ada Lovelace","Grace Hopper"];for(let i=0;i<10;i++){const s=new Date((new Date).getTime()-Math.floor(7776e6*Math.random()));e.push({commit:String(i),author:t[Math.floor(Math.random()*t.length)],date:s.toISOString(),message:"",additions:0===i?2:9===i?50:Math.floor(20*Math.random())+1,deletions:0===i?1:9===i?25:Math.floor(20*Math.random())+1,sort:s.getTime()})}return e}of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"onActiveEditorChanged",1),of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"onFileSelected",1),of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"onRepositoriesChanged",1),of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"onRepositoryChanged",1),of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"onSubscriptionChanged",1),of([(0,d.fF)({args:!1})],TimelineWebviewView.prototype,"getState",1),of([(0,d.fF)()],TimelineWebviewView.prototype,"updateState",1),of([(0,d.fF)()],TimelineWebviewView.prototype,"notifyDidChangeState",1);var cf=Object.defineProperty,hf=Object.getOwnPropertyDescriptor,uf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?hf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&cf(t,i,n),n};const df="3|M";class TimelineWebview extends tg{constructor(e){super(e,"gitlens.timeline","timeline.html","images/gitlens-icon.png","Visual File History",`${c.zf.WebviewPrefix}timeline`,"timelineWebview",c.Gh.ShowTimelinePage),this._bootstraping=!0,this._notifyDidChangeStateDebounced=void 0,this._context={uri:void 0,period:df,etagRepository:0,etagSubscription:0}}async show(e,...t){if(await Ja())return super.show(e,...t)}onInitializing(){return this._context={uri:void 0,period:df,etagRepository:0,etagSubscription:this.container.subscription.etag},this.updatePendingEditor(s.window.activeTextEditor),this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,[this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)]}onShowCommand(e){null!=e?this.updatePendingUri(e):this.updatePendingEditor(s.window.activeTextEditor),this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,super.onShowCommand()}async includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){return[(0,ki.xR)(c.Gh.RefreshTimelinePage,(()=>this.refresh(!0)))]}onVisibilityChanged(e){e&&(this._bootstraping&&(this._bootstraping=!1,null==this._pendingContext||!("uri"in this._pendingContext))||this.updateState())}onMessageReceived(e){switch(e.method){case zg.method:Nm(zg,e,(async e=>{if(null==e.data||!e.data.selected||null==this._context.uri)return;const t=this.container.git.getRepository(this._context.uri);if(null==t)return;const i=await t.getCommit(e.data.id);null!=i&&Os(i,{pin:!1,preserveFocus:!0})}));break;case Kg.method:Nm(Kg,e,(e=>{this.updatePendingContext({period:e.period})&&this.updateState(!0)}))}}onRepositoryChanged(e){e.changed(lt.I6.Heads,lt.I6.Index,lt.du.Any)&&this.updatePendingContext({etagRepository:e.repository.etag})&&this.updateState()}onSubscriptionChanged(e){this.updatePendingContext({etagSubscription:e.etag})&&this.updateState()}async getState(e){const t=r.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=r.D.get("defaultDateShortFormat")??"short",n=e.period??df;if(null==e.uri){return{emptyMessage:"There are no editors open that can provide file history information",period:n,title:"",dateFormat:t,shortDateFormat:i,access:await this.container.git.access(et.x.Timeline)}}const o=await st.YY.fromUri(e.uri),a=o.repoPath,l=await this.container.git.access(et.x.Timeline,a);if(!1===l.allowed){return{dataset:lf().sort(((e,t)=>t.sort-e.sort)),period:n,title:"src/app/index.ts",uri:s.Uri.file("src/app/index.ts").toString(),dateFormat:t,shortDateFormat:i,access:l}}const c=o.relativePath;this.title=`${this.originalTitle}: ${o.fileName}`;const[h,u]=await Promise.all([this.container.git.getCurrentUser(a),this.container.git.getLogForFile(a,o.fsPath,{limit:0,ref:o.sha,since:this.getPeriodDate(n).toISOString()})]);if(null==u)return{dataset:[],emptyMessage:"No commits found for the specified time period",period:n,title:c,sha:o.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:l};let d=[...(0,ye.hX)(u.commits.values(),(e=>null==e.file?.stats&&1!==(0,A.By)(e.stats?.changedFiles)))];if(0!==d.length){const t=r.D.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(e.uri),n=i?.provider.name;d.length>t&&(s.window.showWarningMessage(`Unable able to show more than the first ${t} commits for the specified time period because of ${n?`${n} `:""}rate limits.`),d=d.slice(0,20)),await Promise.allSettled(d.map((e=>e.ensureFullDetails())))}const p=h?.name?`${h.name} (you)`:"You",m=[];for(const e of u.commits.values()){const t=e.file?.stats??(1===(0,A.By)(e.stats?.changedFiles)?e.stats:void 0);m.push({author:"You"===e.author.name?p:e.author.name,additions:t?.additions,deletions:t?.deletions,commit:e.sha,date:e.date.toISOString(),message:e.message??e.summary,sort:e.date.getTime()})}return m.sort(((e,t)=>t.sort-e.sort)),{dataset:m,period:n,title:c,sha:o.shortSha,uri:e.uri.toString(),dateFormat:t,shortDateFormat:i,access:l}}getPeriodDate(e){const[t,i]=e.split("|");switch(i){case"D":return(0,ie.IH)(new Date,{days:-parseInt(t,10)});case"M":return(0,ie.IH)(new Date,{months:-parseInt(t,10)});case"Y":return(0,ie.IH)(new Date,{years:-parseInt(t,10)});default:return(0,ie.IH)(new Date,{months:-3})}}updatePendingContext(e){let t=!1;for(const[i,r]of Object.entries(e)){const e=this._context[i];e===r||(e instanceof s.Uri||r instanceof s.Uri)&&e?.toString()===r?.toString()||(null==this._pendingContext&&(this._pendingContext={}),this._pendingContext[i]=r,t=!0)}return t}updatePendingEditor(e){return(null!=e||!(0,Pi.JM)())&&(!(null!=e&&!(0,Pi.PH)(e))&&this.updatePendingUri(e?.document.uri))}updatePendingUri(e){let t;if(null!=e){const i=this.container.git.getRepository(e);t=i?.etag??0}else t=0;return this.updatePendingContext({uri:e,etagRepository:t})}updateState(e=!1){this.isReady&&this.visible&&(e?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,Lt.Ds)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()))}async notifyDidChangeState(){if(!this.isReady||!this.visible)return!1;if(this._notifyDidChangeStateDebounced?.cancel(),null==this._pendingContext)return!1;const e={...this._context,...this._pendingContext};return s.window.withProgress({location:{viewId:this.id}},(async()=>{await this.notify(jg,{state:await this.getState(e)})&&(this._context=e,this._pendingContext=void 0)}))}}uf([(0,d.fF)({args:!1})],TimelineWebview.prototype,"onRepositoryChanged",1),uf([(0,d.fF)({args:!1})],TimelineWebview.prototype,"onSubscriptionChanged",1),uf([(0,d.fF)({args:!1})],TimelineWebview.prototype,"getState",1),uf([(0,d.fF)()],TimelineWebview.prototype,"updateState",1),uf([(0,d.fF)()],TimelineWebview.prototype,"notifyDidChangeState",1);var pf=Object.defineProperty,mf=Object.getOwnPropertyDescriptor,gf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?mf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&pf(t,i,n),n};class StatusBarController{constructor(e){this.container=e,this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this),r.D.onDidChange(this.onConfigurationChanged,this))}dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(r.D.changed(e,"mode")){const t=r.D.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){const i="left"!==r.D.get("mode.statusBar.alignment")?s.StatusBarAlignment.Right:s.StatusBarAlignment.Left;r.D.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??s.window.createStatusBarItem("gitlens.mode",i,i===s.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command=c.Gh.SwitchMode,this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new s.MarkdownString(`**${t.statusBarItemName}** ${c.NE.Dash} ${t.description}\n\n---\n\nClick to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}\nClick to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(r.D.changed(e,"statusBar"))if(r.D.get("statusBar.enabled")){const t="left"!==r.D.get("statusBar.alignment")?s.StatusBarAlignment.Right:s.StatusBarAlignment.Left;r.D.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??s.window.createStatusBarItem("gitlens.blame",t,t===s.StatusBarAlignment.Right?1e3:0),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=r.D.get("statusBar.command"),r.D.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else r.D.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}onActiveLinesChanged(e){let t=!(r.D.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){const i=this.container.lineTracker.getState(e.selections[0].active);if(null!=i?.commit)return void this.updateBlame(e.editor,i.commit);t=!0}t?this.clearBlame():null!=this._statusBarBlame&&(this._statusBarBlame.text=this._statusBarBlame.text.replace("$(git-commit)","$(watch)"))}clearBlame(){this._pullRequestCancellation?.cancel(),this._tooltipCancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t,i){const n=r.D.get("statusBar");if(!n.enabled||null==this._statusBarBlame||!(0,Pi.PH)(e))return;const o=(0,Ut.UH)(),a=n.pullRequests.enabled&&(CommitFormatter.has(n.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||CommitFormatter.has(n.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")),[l,h]=await Promise.all([CommitFormatter.has(n.format,"tips")||CommitFormatter.has(n.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsFn(t.repoPath):void 0,a&&void 0===i?.pr?this.getPullRequest(t,{timeout:100}):i?.pr??void 0]);let u;switch(null!=h&&(this._pullRequestCancellation?.cancel(),this._pullRequestCancellation=new s.CancellationTokenSource,this.waitForPendingPullRequest(e,t,h,this._pullRequestCancellation.token,100,o)),this._statusBarBlame.text=`$(git-commit) ${CommitFormatter.fromTemplate(n.format,t,{dateFormat:null===n.dateFormat?r.D.get("defaultDateFormat"):n.dateFormat,getBranchAndTagTips:l,messageTruncateAtNewLine:!0,pullRequestOrRemote:h,pullRequestPendingMessage:"PR $(watch)"})}`,n.command){case te.ef.CopyRemoteCommitUrl:u="Click to Copy Remote Commit URL";break;case te.ef.CopyRemoteFileUrl:this._statusBarBlame.command=c.Gh.CopyRemoteFileUrl,u="Click to Copy Remote File Revision URL";break;case te.ef.DiffWithPrevious:this._statusBarBlame.command=c.Gh.DiffLineWithPrevious,u="Click to Open Line Changes with Previous Revision";break;case te.ef.DiffWithWorking:this._statusBarBlame.command=c.Gh.DiffLineWithWorking,u="Click to Open Line Changes with Working File";break;case te.ef.OpenCommitOnRemote:u="Click to Open Commit on Remote";break;case te.ef.OpenFileOnRemote:u="Click to Open Revision on Remote";break;case te.ef.RevealCommitInView:u="Click to Reveal Commit in the Side Bar";break;case te.ef.ShowCommitsInView:u="Click to Search for Commit";break;case te.ef.ShowQuickCommitDetails:u="Click to Show Commit";break;case te.ef.ShowQuickCommitFileDetails:u="Click to Show Commit (file)";break;case te.ef.ShowQuickCurrentBranchHistory:u="Click to Show Branch History";break;case te.ef.ShowQuickFileHistory:u="Click to Show File History";break;case te.ef.ToggleCodeLens:u="Click to Toggle Git CodeLens";break;case te.ef.ToggleFileBlame:u="Click to Toggle File Blame";break;case te.ef.ToggleFileChanges:null!=t.file&&(this._statusBarBlame.command=(0,ki._N)({title:"Toggle File Changes",command:c.Gh.ToggleFileChanges,arguments:[t.file.uri,{type:te.VP.Changes,context:{sha:t.sha,only:!1,selection:!1}}]})),u="Click to Toggle File Changes";break;case te.ef.ToggleFileChangesOnly:null!=t.file&&(this._statusBarBlame.command=(0,ki._N)({title:"Toggle File Changes",command:c.Gh.ToggleFileChanges,arguments:[t.file.uri,{type:te.VP.Changes,context:{sha:t.sha,only:!0,selection:!1}}]})),u="Click to Toggle File Changes";break;case te.ef.ToggleFileHeatmap:u="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=u,this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}\n${u}`},null!=this._tooltipDelayTimer&&clearTimeout(this._tooltipDelayTimer),this._tooltipCancellation?.cancel(),this._tooltipDelayTimer=setTimeout((()=>{this._tooltipDelayTimer=void 0,this._tooltipCancellation=new s.CancellationTokenSource,this.updateCommitTooltip(this._statusBarBlame,t,u,l,{enabled:a||null!=h,pr:h},this._tooltipCancellation.token)}),500),this._statusBarBlame.show()}async getPullRequest(e,{timeout:t}={}){const i=await this.container.git.getBestRemoteWithRichProvider(e.repoPath);if(null==i?.provider)return;const{provider:s}=i;try{return await this.container.git.getPullRequestForCommit(e.ref,s,{timeout:t})}catch(e){return e instanceof Nt.PK?e:void 0}}async updateCommitTooltip(e,t,i,s,n,o){if(o.isCancellationRequested)return;const a=await Rp(t,t.getGitUri(),t.lines[0].line,r.D.get("statusBar.tooltipFormat"),r.D.get("defaultDateFormat"),{autolinks:!0,cancellationToken:o,getBranchAndTagTips:s,pullRequests:n});o.isCancellationRequested||(a.appendMarkdown(`\n\n---\n\n${i}`),e.tooltip=a,e.accessibilityInformation={label:`${e.text}\n${i}`})}async waitForPendingPullRequest(e,t,i,s,r,n){!s.isCancellationRequested&&i instanceof Nt.PK&&(be.Yd.debug(n,`${c.NE.Dot} pull request query took too long (over ${r} ms)`),i=await i.promise,s.isCancellationRequested||(be.Yd.debug(n,`${c.NE.Dot} pull request query completed; refreshing...`),this.updateBlame(e,t,{pr:i??null})))}}gf([(0,d.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),gf([(0,d.fF)({args:!1})],StatusBarController.prototype,"updateBlame",1);var ff=Object.defineProperty,wf=Object.getOwnPropertyDescriptor,vf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?wf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&ff(t,i,n),n};const yf=Object.create(null),bf=["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"],Cf=[];class KeyboardScope{constructor(e){this._paused=!0,this._mapping=e;for(const e in this._mapping)this._mapping[e]=this._mapping[e]??yf;Cf.push(this._mapping)}async dispose(){const e=Cf.indexOf(this._mapping),t=(0,Ut.UH)();null!=t&&(t.exitDetails=` • index=${e}`),e===Cf.length-1?(Cf.pop(),await this.updateKeyCommandsContext(Cf[Cf.length-1])):Cf.splice(e,1)}get paused(){return this._paused}async clearKeyCommand(e){const t=(0,Ut.UH)(),i=Cf[Cf.length-1];i===this._mapping&&null!=i[e]?(i[e]=void 0,await(0,Ci.v)(`${c.zf.KeyPrefix}${e}`,!1)):null!=t&&(t.exitDetails=" • skipped")}async pause(e){if(this._paused)return;this._paused=!0;const t=Object.keys(this._mapping).reduce(((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t)),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){const i=(0,Ut.UH)(),s=Cf[Cf.length-1];if(s!==this._mapping)return void(null!=i&&(i.exitDetails=" • skipped"));const r=Boolean(s[e]);s[e]=t,r||await(0,Ci.v)(`${c.zf.KeyPrefix}${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(bf.map((t=>(0,Ci.v)(`${c.zf.KeyPrefix}${t}`,Boolean(e?.[t])))))}}vf([(0,d.cM)({args:!1,prefix:e=>`${e.prefix}[${Cf.length}]`})],KeyboardScope.prototype,"dispose",1),vf([(0,d.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${Cf.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),vf([(0,d.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),vf([(0,d.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),vf([(0,d.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${Cf.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);class Keyboard{constructor(){const e=bf.map((e=>(0,ki.xR)(`${c.zh}.key.${e}`,(()=>this.execute(e)),this)));this._disposable=s.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){const t=this.createScope(e);return await t.start(),t}async execute(e){const t=(0,Ut.UH)();if(Cf.length)try{let i=Cf[Cf.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey)return void(null!=t&&(t.exitDetails=" • skipped, no callback"));await i.onDidPressKey(e)}catch(e){be.Yd.error(e,t)}else null!=t&&(t.exitDetails=" • skipped, no mappings")}}vf([(0,d.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${Cf.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),vf([(0,d.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${Cf.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),vf([(0,d.cM)()],Keyboard.prototype,"execute",1);class TelemetryService{constructor(e){this.container=e,this._enabled=!1,this.globalAttributes=new Map,this.eventQueue=[],e.context.subscriptions.push(r.D.onDidChange((t=>{t.affectsConfiguration("telemetry.enabled")&&this.ensureTelemetry(e)})),s.env.onDidChangeTelemetryEnabled((()=>this.ensureTelemetry(e)))),this.ensureTelemetry(e)}get enabled(){return this._enabled}dispose(){this.provider?.dispose(),this.provider=void 0}ensureTelemetry(e){if(this._enabled=s.env.isTelemetryEnabled&&r.D.get("telemetry.enabled",void 0,!0),!this._enabled)return null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),void(this.provider=void 0);null==this._initializationTimer&&(this._initializationTimer=setTimeout((()=>this.initializeTelemetry(e)),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new((await i.e(913).then(i.bind(i,1132))).OpenTelemetryProvider)({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:s.env.machineId,sessionId:s.env.sessionId,language:s.env.language,platform:(0,Je.Xf)(),vscodeEdition:s.env.appName,vscodeHost:s.env.appHost,vscodeRemoteName:s.env.remoteName??"",vscodeShell:s.env.shell,vscodeUIKind:String(s.env.uiKind),vscodeVersion:s.version},(0,Ke.Nx)(),e.debugging),this.eventQueue.length){const e=[...this.eventQueue];this.eventQueue.length=0;for(const{type:t,name:i,data:s,global:r}of e)"sendEvent"===t&&(this.provider.setGlobalAttributes(r),this.provider.sendEvent(i,Af(s)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,t,i,s){this._enabled&&(null!=this.provider?this.provider.sendEvent(e,Af(t),i,s):this.eventQueue.push({type:"sendEvent",name:e,data:t,global:new Map([...this.globalAttributes]),startTime:i??Date.now(),endTime:s??Date.now()}))}startEvent(e,t,i){if(this._enabled){if(null!=this.provider){const s=this.provider.startEvent(e,Af(t),i);return{dispose:()=>s?.end()}}return i=i??Date.now(),{dispose:()=>this.sendEvent(e,t,i,Date.now())}}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(e):this.globalAttributes.set(e,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(const[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(t):this.globalAttributes.set(t,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(e),this.provider?.setGlobalAttributes(this.globalAttributes)}}function Af(e){if(null==e)return;const t=Object.create(null);for(const[i,s]of Object.entries(e))null!=s&&(t[i]=s);return t}class UsageTracker{constructor(e,t){this.container=e,this.storage=t,this._onDidChange=new s.EventEmitter}get onDidChange(){return this._onDidChange.event}dispose(){}get(e){return this.storage.get("usages")?.[e]}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e)return await this.storage.delete("usages"),void this._onDidChange.fire(void 0);t=(0,$m.iC)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));const i=Date.now();let s=t[e];null==s?(s={count:0,firstUsedAt:i,lastUsedAt:i},t[e]=s):(s.count!==Number.MAX_SAFE_INTEGER&&s.count++,s.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":s.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:s})}}const Pf=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,Df=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ,~^:?*[\\]+[^ ./])\b/gi,Sf=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,kf=/^[0-9a-f]{7,40}$/;class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=s.window.registerTerminalLinkProvider(this)}dispose(){this.disposable.dispose()}async provideTerminalLinks(e){if(0===e.line.trim().length)return[];const t=this.container.git.highlander?.path;if(!t)return[];const i=r.D.get("terminalLinks.showDetailsView"),s=[];let n,o;const a=new RegExp(Df,Df.flags),l=new RegExp(Pf,Pf.flags);let h;for(;;){if(h=l.exec(e.line),null!=h){const[e,t,i]=h,r={startIndex:h.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:{command:c.Gh.GitCommands,args:{command:i}}};s.push(r)}if(h=a.exec(e.line),null==h)break;const[r,d]=h;if("HEAD"===d.toUpperCase()){const e={startIndex:h.index,length:d.length,tooltip:"Show HEAD",command:{command:c.Gh.ShowQuickBranchHistory,args:{branch:"HEAD",repoPath:t}}};s.push(e);continue}void 0===n&&(n=await this.container.git.getBranches(t));let m=n.values.find((e=>e.name===d));if(null==m&&(m=n.values.find((e=>(0,p.S3)(e.name)===d))),null!=m){const e={startIndex:h.index,length:d.length,tooltip:"Show Branch",command:{command:c.Gh.ShowQuickBranchHistory,args:{repoPath:t,branch:m.name}}};s.push(e);continue}void 0===o&&(o=await this.container.git.getTags(t));const g=o.values.find((e=>e.name===d));if(null==g){if(kf.test(d)){if(await this.container.git.validateReference(t,d)){const e={startIndex:h.index,length:d.length,tooltip:"Show Commit",command:i?{command:c.Gh.ShowInDetailsView,args:{repoPath:t,refs:[d]}}:{command:c.Gh.ShowQuickCommit,args:{repoPath:t,sha:d}}};s.push(e)}}else if(Sf.test(d)){const e={startIndex:h.index,length:d.length,tooltip:"Show Commits",command:{command:c.Gh.GitCommands,args:{command:"log",state:{repo:t,reference:(0,u.xB)(d,t,{refType:"revision"})}}}};s.push(e)}}else{const e={startIndex:h.index,length:d.length,tooltip:"Show Tag",command:{command:c.Gh.ShowQuickBranchHistory,args:{repoPath:t,tag:g.name}}};s.push(e)}}return s}handleTerminalLink(e){s.commands.executeCommand(e.command.command,e.command.args)}}var Rf=Object.defineProperty,Ff=Object.getOwnPropertyDescriptor,$f=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ff(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Rf(t,i,n),n};const Tf=class{constructor(){this._onDidChangeActiveLines=new s.EventEmitter,this._state=new Map,this._subscriptions=new Map,this._suspended=!1}get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}dispose(){for(const e of this._subscriptions.keys())this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,Pi.PH)(e))&&(this.reset(),this._editor=e,this._selections=Tf.toLineSelections(e?.selections),this.trigger("editor"))}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,Pi.PH)(e.textEditor))return;const t=Tf.toLineSelections(e.selections);this._editor===e.textEditor&&this.includes(t)||(this.reset(),this._editor=e.textEditor,this._selections=t,this.trigger(this._editor===e.textEditor?"selection":"editor"))}getState(e){return this._state.get(e)}setState(e,t){this._state.set(e,t)}get selections(){return this._selections}includes(e,t){if("number"!=typeof e)return Tf.includes(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;const i=e,s=t?.activeOnly??!0;for(const e of this._selections)if(i===e.active||!s&&(e.anchor>=i&&i>=e.active||e.active>=i&&i>=e.anchor))return!0;return!1}refresh(){this.trigger("editor")}reset(){this._state.clear()}subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){const i=(0,Ut.UH)(),r={dispose:()=>this.unsubscribe(e)},n=0===this._subscriptions.size;let o=this._subscriptions.get(e);return null==o?(o=[t],this._subscriptions.set(e,o)):o.push(t),n&&(be.Yd.debug(i,"Starting line tracker..."),this._disposable=s.Disposable.from(s.window.onDidChangeActiveTextEditor((0,Lt.Ds)(this.onActiveTextEditorChanged,0),this),s.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.onStart?.()??{dispose:()=>{}}),queueMicrotask((()=>this.onActiveTextEditorChanged(s.window.activeTextEditor)))),r}unsubscribe(e){const t=this._subscriptions.get(e);if(null!=t){this._subscriptions.delete(e);for(const e of t)e.dispose();0===this._subscriptions.size&&(null!=this._linesChangedDebounced&&this._linesChangedDebounced.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}get suspended(){return this._suspended}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this.onResume?.(),this.trigger("editor"))}suspend(e){!e?.force&&this._suspended||(this._suspended=!0,this.onSuspend?.(),this.trigger("editor"))}fireLinesChanged(e){this._onDidChangeActiveLines.fire(e)}trigger(e){this.onLinesChanged({editor:this._editor,selections:this.selections,reason:e})}onLinesChanged(e){null!=e.selections?(null==this._linesChangedDebounced&&(this._linesChangedDebounced=(0,Lt.Ds)((e=>{e.editor===s.window.activeTextEditor&&Tf.includes(e.selections,Tf.toLineSelections(e.editor?.selections))&&this.fireLinesChanged(e)}),250,{track:!0})),this._linesChangedDebounced.pending?.()||this.fireLinesChanged({...e,pending:!0}),this._linesChangedDebounced(e)):queueMicrotask((()=>{e.editor===s.window.activeTextEditor&&(null!=this._linesChangedDebounced&&this._linesChangedDebounced.cancel(),this.fireLinesChanged(e))}))}static includes(e,t){if(null==e&&null==t)return!0;if(null==e||null==t||e.length!==t.length)return!1;let i;return e.every(((e,s)=>(i=t[s],e.active===i.active&&e.anchor===i.anchor)))}static toLineSelections(e){return e?.map((e=>({active:e.active.line,anchor:e.anchor.line})))}};let xf=Tf;$f([(0,d.fF)({args:!1})],xf.prototype,"subscribe",1),$f([(0,d.fF)({args:!1})],xf.prototype,"unsubscribe",1),$f([(0,d.fF)()],xf.prototype,"resume",1),$f([(0,d.fF)()],xf.prototype,"suspend",1);var If=Object.defineProperty,_f=Object.getOwnPropertyDescriptor,Of=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?_f(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&If(t,i,n),n};class GitLineState{constructor(e){this.commit=e,null!=e&&e.file}}class GitLineTracker extends xf{constructor(e){super(),this.container=e}async fireLinesChanged(e){this.reset();let t=!1;return this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),super.fireLinesChanged(t?e:{...e,selections:void 0})}onStart(){return this.onResume(),s.Disposable.from({dispose:()=>this.onSuspend()},this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}onResume(){null==this._subscriptionOnlyWhenActive&&(this._subscriptionOnlyWhenActive=this.container.tracker.onDidChangeContent(this.onContentChanged,this))}onSuspend(){this._subscriptionOnlyWhenActive?.dispose(),this._subscriptionOnlyWhenActive=void 0}onBlameStateChanged(e){this.trigger("editor")}onContentChanged(e){e.contentChanges.some((e=>this.selections?.some((t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))))&&this.trigger("editor")}onDirtyIdleTriggered(e){const t=r.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}async updateState(e,t){const i=(0,Ut.UH)();if(!this.includes(e))return null!=i&&(i.exitDetails=` ${c.NE.Dot} lines no longer match`),!1;const s=await this.container.tracker.getOrAdd(t.document);if(!s.isBlameable)return null!=i&&(i.exitDetails=` ${c.NE.Dot} document is not blameable`),!1;if(1===e.length){const r=await this.container.git.getBlameForLine(s.uri,e[0].active,t?.document);if(null==r)return null!=i&&(i.exitDetails=` ${c.NE.Dot} blame failed`),!1;this.setState(r.line.line-1,new GitLineState(r.commit))}else{const r=await this.container.git.getBlame(s.uri,t.document);if(null==r)return null!=i&&(i.exitDetails=` ${c.NE.Dot} blame failed`),!1;for(const t of e){const e=r.lines[t.active];this.setState(t.active,new GitLineState(r.commits.get(e.sha)))}}return this.includes(e)?s.isBlameable?(t.document.isDirty&&s.setForceDirtyStateChangeOnNextDocumentChange(),!0):(null!=i&&(i.exitDetails=` ${c.NE.Dot} document is not blameable`),!1):(null!=i&&(i.exitDetails=` ${c.NE.Dot} lines no longer match`),!1)}}Of([(0,d.fF)({args:{0:e=>`editor=${e.editor.document.uri.toString(!0)}, doc=${e.document.uri.toString(!0)}, blameable=${e.blameable}`}})],GitLineTracker.prototype,"onBlameStateChanged",1),Of([(0,d.fF)({args:{0:e=>`editor=${e.editor.document.uri.toString(!0)}, doc=${e.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onContentChanged",1),Of([(0,d.fF)({args:{0:e=>`editor=${e.editor.document.uri.toString(!0)}, doc=${e.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onDirtyIdleTriggered",1),Of([(0,d.fF)({args:{0:e=>`editor=${e.editor.document.uri.toString(!0)}, doc=${e.document.uri.toString(!0)}, dirty=${e.dirty}`}})],GitLineTracker.prototype,"onDirtyStateChanged",1),Of([(0,d.fF)({args:{0:e=>e?.map((e=>e.active)).join(","),1:e=>e.document.uri.toString(!0)},exit:e=>`returned ${e}`})],GitLineTracker.prototype,"updateState",1);class DeepLinkService{constructor(e){this.container=e,this._disposables=[],this._context={state:jl.Idle},this._disposables.push(e.uri.onDidReceiveUri((async e=>{const t=Yl(e);if(null!=t&&this._context.state===jl.Idle){if(!t.repoId||!t.type||!t.remoteUrl)return s.window.showErrorMessage("Unable to resolve link"),void be.Yd.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);if(!Object.values(Ql).includes(t.type))return s.window.showErrorMessage("Unable to resolve link"),void be.Yd.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);if(t.type!==Ql.Repository&&!t.targetId)return s.window.showErrorMessage("Unable to resolve link"),void be.Yd.warn(`Unable to resolve link - no target id provided: ${e.toString()}`);this.setContextFromDeepLink(t,e.toString()),await this.processDeepLink()}})));const t=this.container.storage.get("deepLinks:pending");null!=t&&(this.container.storage.delete("deepLinks:pending"),this.processPendingDeepLink(t))}dispose(){s.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:jl.Idle,url:void 0,repoId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,targetId:void 0,targetType:void 0,targetSha:void 0}}setContextFromDeepLink(e,t){this._context={...this._context,repoId:e.repoId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,targetId:e.targetId}}async processPendingDeepLink(e){if(null==e.url)return;const t=Yl(s.Uri.parse(e.url));if(null==t)return;this._context={state:jl.CloneOrAddRepo},this.setContextFromDeepLink(t,e.url);let i=zl.OpenRepo;if(null!=e.repoPath){const t=s.Uri.parse(e.repoPath);try{const e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});null!=e&&(this._context.repo=e,i=zl.RepoOpened)}catch{}}queueMicrotask((()=>{this.processDeepLink(i)}))}async getShaForTarget(){const{repo:e,remote:t,targetType:i,targetId:s}=this._context;if(e&&t&&i!==Ql.Repository&&s){if(i===Ql.Branch){const i=`${t.name}/${s}`;let r=await e.getBranch(i);return r?r.sha:(r=await e.getBranch(s),r?r.sha:void 0)}if(i===Ql.Tag){const t=await e.getTag(s);return t?t.sha:void 0}return i===Ql.Commit&&await this.container.git.validateReference(e.path,s)?s:void 0}}async showOpenTypePrompt(){const e=await s.window.showInformationMessage("No matching repository found. Please choose an option.",{modal:!0},{title:"Open Folder",action:Kl.Folder},{title:"Open Workspace",action:Kl.Workspace},{title:"Cancel",isCloseAffordance:!0});return e?.action}async showOpenLocationPrompt(e){const t=[{title:"Open",action:Pi.Tc.CurrentWindow},{title:"Open in New Window",action:Pi.Tc.NewWindow}];e===Kl.Folder&&t.push({title:"Add to Workspace",action:Pi.Tc.AddToWorkspace}),t.push({title:"Cancel",isCloseAffordance:!0});const i=await s.window.showInformationMessage(`Please choose an option to open the repository ${e}.`,{modal:!0},...t);return i?.action}async processDeepLink(e=zl.DeepLinkEventFired){let t,i,r,n="",o=e,a=[],l="",h="";for(;;){this._context.state=Jl[this._context.state][o];const{state:e,repoId:d,repo:p,url:m,remoteUrl:g,remote:f,targetSha:w,targetType:v}=this._context;switch(e){case jl.Idle:return o===zl.DeepLinkErrored&&(s.window.showErrorMessage("Unable to resolve link"),be.Yd.warn(`Unable to resolve link - ${n}: ${m}`)),void this.resetContext();case jl.RepoMatch:case jl.AddedRepoMatch:if(!d||!g){o=zl.DeepLinkErrored,n="No repository id or remote url was provided.";break}[,l,h]=(0,yt.Sk)(g);for(const e of this.container.git.repositories){if(a=await e.getRemotes({filter:e=>e.matches(l,h)}),a.length>0){this._context.repo=e,this._context.remote=a[0],o=zl.RepoMatchedWithRemoteUrl;break}if(await this.container.git.validateReference(e.path,d)){this._context.repo=e,o=zl.RepoMatchedWithId;break}}this._context.repo||(e===jl.RepoMatch?o=zl.RepoMatchFailed:(o=zl.DeepLinkErrored,n="No matching repository found."));break;case jl.CloneOrAddRepo:if(!d||!g){o=zl.DeepLinkErrored,n="Missing repository id or remote url.";break}if(t=await this.showOpenTypePrompt(),!t){o=zl.DeepLinkCancelled;break}if(i=await this.showOpenLocationPrompt(t),!i){o=zl.DeepLinkCancelled;break}if(r=(await s.window.showOpenDialog({title:`Open ${t} for link`,canSelectFiles:t===Kl.Workspace,canSelectFolders:t===Kl.Folder,canSelectMany:!1,...t===Kl.Workspace&&{filters:{Workspaces:["code-workspace"]}}}))?.[0],!r){o=zl.DeepLinkCancelled;break}i===Pi.Tc.AddToWorkspace&&(s.workspace.workspaceFolders?.length||0)>1?o=zl.OpenRepo:(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:r.toString()}),o=zl.DeepLinkStored),(0,Pi.ic)(r,{location:i});break;case jl.OpeningRepo:return void queueMicrotask((()=>{s.window.withProgress({cancellable:!0,location:s.ProgressLocation.Notification,title:`Opening repository for link: ${m}`},((e,t)=>new Promise((e=>{t.onCancellationRequested((()=>{queueMicrotask((()=>this.processDeepLink(zl.DeepLinkCancelled))),e()})),this._disposables.push((0,Ai.IH)(this.container.git.onDidChangeRepositories)((()=>{queueMicrotask((()=>this.processDeepLink(zl.RepoAdded))),e()})))}))))}));case jl.RemoteMatch:if(!p||!g){o=zl.DeepLinkErrored,n="Missing repository or remote url.";break}if(a=await p.getRemotes({filter:e=>e.url===g}),a.length>0){this._context.remote=a[0],o=zl.RemoteMatched;break}this._context.remote||(o=zl.RemoteMatchFailed);break;case jl.AddRemote:if(!p||!g){o=zl.DeepLinkErrored,n="Missing repository or remote url.";break}o=zl.DeepLinkErrored,n="No matching remote found.";break;case jl.TargetMatch:case jl.FetchedTargetMatch:if(!p||!f||!v){o=zl.DeepLinkErrored,n="Missing repository, remote, or target type.";break}if(v===Ql.Repository){o=zl.TargetMatched;break}if(this._context.targetSha=await this.getShaForTarget(),!this._context.targetSha){e===jl.TargetMatch?o=zl.TargetMatchFailed:(o=zl.DeepLinkErrored,n="No matching target found.");break}o=zl.TargetMatched;break;case jl.Fetch:if(!p||!f){o=zl.DeepLinkErrored,n="Missing repository or remote.";break}o=zl.DeepLinkErrored,n="No matching target found.";break;case jl.OpenGraph:if(!p||!v){o=zl.DeepLinkErrored,n="Missing repository or target type.";break}if(v===Ql.Repository){await(0,ki.P0)(c.Gh.ShowInCommitGraph,p),o=zl.DeepLinkResolved;break}if(!w){o=zl.DeepLinkErrored,n=`Cannot find target ${v} in repo.`;break}await(0,ki.P0)(c.Gh.ShowInCommitGraph,{ref:(0,u.xB)(w,p.path)}),o=zl.DeepLinkResolved;break;default:o=zl.DeepLinkErrored,n="Unknown state."}}}async copyDeepLinkUrl(e,t,i,r){const n=await("string"!=typeof e?this.generateDeepLinkUrl(e,t):this.generateDeepLinkUrl(e,t,i,r));await s.env.clipboard.writeText(n.toString())}async generateDeepLinkUrl(e,t,i,n){const o="string"!=typeof e?e.repoPath:e,a=await this.container.git.getUniqueRepositoryId(o)??"0";if("string"!=typeof e)switch(e.refType){case"branch":i=Ql.Branch,n=e.remote?(0,p.S3)(e.name):e.name;break;case"revision":i=Ql.Commit,n=e.ref;break;case"tag":i=Ql.Tag,n=e.name}const l=r.D.get("deepLinks.schemeOverride"),c=l?!0===l?s.env.uriScheme:l:"vscode",h=null!=i&&i!==Ql.Repository?`/${i}/${n}`:"",u=new URL(`${c}://${this.container.context.extension.id}/${Vl.DeepLink}/${Ql.Repository}/${a}${h}`);u.searchParams.set("url",t);return(new URLSearchParams).set("url",t),u}}var Bf=Object.defineProperty,Ef=Object.getOwnPropertyDescriptor;class UriService{constructor(e){this.container=e,this._onDidReceiveAuthenticationUri=new s.EventEmitter,this._onDidReceiveUri=new s.EventEmitter,this._disposable=s.window.registerUriHandler(this)}get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}get onDidReceiveUri(){return this._onDidReceiveUri.event}dispose(){this._disposable.dispose()}handleUri(e){const[,t]=e.path.split("/");t!==Rm?this._onDidReceiveUri.fire(e):this._onDidReceiveAuthenticationUri.fire(e)}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?Ef(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&Bf(t,i,n)})([(0,d.cM)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var Mf=Object.defineProperty,Wf=Object.getOwnPropertyDescriptor,Lf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Wf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Mf(t,i,n),n};class BranchesRepositoryNode extends $i.vb{async getChildren(){return null==this.child&&(this.child=new za(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(lt.I6.Config,lt.I6.Heads,lt.I6.Index,lt.I6.Remotes,lt.I6.RemoteProviders,lt.I6.Status,lt.I6.Unknown,lt.du.Any)}}class BranchesViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No branches could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new BranchesRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getBranches({filter:e=>!e.remote});return 0===t.values.length?(this.view.message="No branches could be found.",this.view.title="Branches",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Branches (${t.values.length})`,e.getChildren())}return this.view.title="Branches",this.children}getTreeItem(){return new s.TreeItem("Branches",s.TreeItemCollapsibleState.Expanded)}}class BranchesView extends ViewBase{constructor(e){super(e,"gitlens.views.branches","Branches","branchesView"),this.configKey="branches"}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showBranches")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches"),this.refresh(!0))),this),la(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout(te.CZ.List)),this),la(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout(te.CZ.Tree)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),la(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(e.remote)return;const i=al.getId(e.repoPath);return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.id.startsWith(i),token:t})}async findCommit(e,t){const i=al.getId(e.repoPath),s=await this.container.git.getCommitBranches(e.repoPath,e.ref,(0,A.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==s.length)return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.id.startsWith(i):!!(t instanceof ba&&s.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}revealBranch(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findBranch(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealCommit(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findCommit(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return r.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return r.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&te.DH.Branch)}async setShowBranchPullRequest(e){await r.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await r.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}Lf([(0,Wt.H)((()=>""))],BranchesView.prototype,"revealBranch",1),Lf([(0,Wt.H)((()=>""))],BranchesView.prototype,"revealCommit",1),Lf([(0,Wt.H)((()=>""))],BranchesView.prototype,"revealRepository",1);var Uf=Object.defineProperty,Nf=Object.getOwnPropertyDescriptor,Gf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Nf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Uf(t,i,n),n};class CommitsRepositoryNode extends $i.vb{async getChildren(){if(null==this.child){const e=await this.repo.getBranch();if(null==e)return this.view.message="No commits could be found.",[];let t;if(this.view.message=void 0,this.view.state.myCommitsOnly){const e=await this.view.container.git.getCurrentUser(this.repo.path);null!=e&&(t=[{name:e.name,email:e.email,username:e.username,id:e.id}])}this.child=new ba(this.uri,this.view,this.splatted?this.parent??this:this,e,!0,{expanded:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showCurrent:!1,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=lt._j.getLastFetchedUpdateInterval(e);return 0!==e&&t>0?s.Disposable.from(await super.subscribe(),(0,Lt.DH)((()=>{t!==lt._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),t)):super.subscribe()}changed(e){return e.changed(lt.I6.Config,lt.I6.Heads,lt.I6.Index,lt.I6.Remotes,lt.I6.RemoteProviders,lt.I6.Status,lt.I6.Unknown,lt.du.Any)}}Gf([(0,Wt.H)(),(0,d.fF)()],CommitsRepositoryNode.prototype,"refresh",1),Gf([(0,d.fF)()],CommitsRepositoryNode.prototype,"subscribe",1);class CommitsViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No commits could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new CommitsRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0})))}const e=r.D.get("plusFeatures.enabled")&&null==this.view.container.usage.get("graphWebview:shown")?new CommandMessageNode(this.view,this,{command:c.Gh.ShowGraphPage,title:"Show Commit Graph"},"Visualize commits on the Commit Graph","✨ GitLens+ feature","Visualize commits on the Commit Graph ✨",new s.ThemeIcon("gitlens-graph")):void 0;if(1===this.children.length){const[t]=this.children,i=await t.repo.getBranch();if(null!=i){const e=await t.repo.getLastFetched()??0,s=i.getTrackingStatus();this.view.description=`${s?`${s} ${c.NE.Dot} `:""}${i.name}${i.rebasing?" (Rebasing)":""}${e?` ${c.NE.Dot} Last fetched ${lt._j.formatLastFetched(e)}`:""}`}return null==e?t.getChildren():[e,...await t.getChildren()]}return null==e?this.children:[e,...this.children]}getTreeItem(){return new s.TreeItem("Commits",s.TreeItemCollapsibleState.Expanded)}}class CommitsView extends ViewBase{constructor(e){super(e,"gitlens.views.commits","Commits","commitsView"),this.configKey="commits",this._state={},this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){null!=e&&"graphWebview:shown"!==e.key||this.refresh()}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showCommits")}get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0))),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setMyCommitsOnlyOn"),(()=>this.setMyCommitsOnly(!0)),this),la(this.getQualifiedCommand("setMyCommitsOnlyOff"),(()=>this.setMyCommitsOnly(!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),la(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),la(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"plusFeatures.enabled"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof Ao||e instanceof FileRevisionAsCommitNode||e instanceof fo)&&this.container.events.fire("commit:selected",{commit:e.commit,pin:!1,preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e instanceof FileRevisionAsCommitNode||e instanceof fo)&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}async findCommit(e,t){const i=al.getId(e.repoPath),s=await this.container.git.getBranch(e.repoPath);if(null==s)return;return(await this.container.git.getCommitBranches(e.repoPath,e.ref,{branch:s.name,commitDate:(0,A.f_)(e)?e.committer.date:void 0})).length?this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await(t.getSplattedChild?.());return i instanceof CommitsRepositoryNode&&(i=await(i.getSplattedChild?.()),i instanceof ba&&await i.loadMore({until:e.ref})),!0}if(t instanceof CommitsRepositoryNode&&t.id.startsWith(i)){const i=await(t.getSplattedChild?.());if(i instanceof ba)return await i.loadMore({until:e.ref}),!0}return t instanceof Ro&&t.id.startsWith(i)},token:t}):void 0}async revealCommit(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findCommit(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setMyCommitsOnly(e){(0,Ci.v)(c.zf.ViewsCommitsMyCommitsOnly,e),this.state.myCommitsOnly=e,this.refresh(!0)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return r.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&te.DH.Working)}async setShowBranchPullRequest(e){await r.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await r.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}Gf([(0,Wt.H)((()=>""))],CommitsView.prototype,"revealCommit",1),Gf([(0,Wt.H)((()=>""))],CommitsView.prototype,"revealRepository",1);var Hf=Object.defineProperty,Vf=Object.getOwnPropertyDescriptor,Qf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Vf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Hf(t,i,n),n};class ContributorsRepositoryNode extends $i.vb{async getChildren(){return null==this.child&&(this.child=new ka(this.uri,this.view,this,this.repo)),this.child.getChildren()}async subscribe(){return s.Disposable.from(await super.subscribe(),(0,Ze.cL)((e=>this.child?.updateAvatar(e.email))))}changed(e){return e.changed(lt.I6.Config,lt.I6.Heads,lt.I6.Remotes,lt.I6.Unknown,lt.du.Any)}}Qf([(0,d.fF)()],ContributorsRepositoryNode.prototype,"subscribe",1);class ContributorsViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No contributors could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new ContributorsRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",this.view.title="Contributors",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Contributors (${t.length})`,t)}return this.view.title="Contributors",this.children}getTreeItem(){return new s.TreeItem("Contributors",s.TreeItemCollapsibleState.Expanded)}}class ContributorsView extends ViewBase{constructor(e){super(e,"gitlens.views.contributors","Contributors","contributorsView"),this.configKey="contributors"}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showContributors")}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("contributors"),this.refresh(!0))),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),la(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("setShowStatisticsOn"),(()=>this.setShowStatistics(!0)),this),la(this.getQualifiedCommand("setShowStatisticsOff"),(()=>this.setShowStatistics(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat")||r.D.changed(e,"sortContributorsBy"))}findContributor(e,t){const i=al.getId(e.repoPath);return this.findNode(Qo.getId(e.repoPath,e.name,e.email,e.username),{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.id.startsWith(i),token:t})}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findContributor(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return r.D.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return r.D.updateEffective(`views.${this.configKey}.showStatistics`,e)}}Qf([(0,Wt.H)((()=>""))],ContributorsView.prototype,"revealRepository",1),Qf([(0,Wt.H)((()=>""))],ContributorsView.prototype,"revealContributor",1);const qf=" (pinned)";class LineHistoryView extends ViewBase{constructor(e){super(e,"gitlens.views.lineHistory","Line History","lineHistoryView"),this.configKey="lineHistory",(0,Ci.v)(c.zf.ViewsLineHistoryEditorFollowing,!0)}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),la(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),la(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),la(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat"))}changeBase(){this.root?.changeBase()}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&((0,Ci.v)(c.zf.ViewsLineHistoryEditorFollowing,e),this.root?.setEditorFollowing(e),this.description?.endsWith(qf)?e&&(this.description=this.description.substr(0,this.description.length-qf.length)):e||null==this.description||(this.description+=qf),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}}class ComparePickerNode extends $i.Re{constructor(e,t,i){super(st.Wj,e,t),this.selectedRef=i,this.order=Date.now(),this.pinned=!1}get canDismiss(){return!0}getChildren(){return[]}getTreeItem(){const e=this.selectedRef,t=e?.repoPath;let i,r;if(void 0!==t&&this.view.container.git.repositoryCount>1){const e=this.view.container.git.getRepository(t);i=e?.formattedName??t}return null==e?(r=new s.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",s.TreeItemCollapsibleState.None),r.contextValue=$i.Td.ComparePicker,r.description=i,r.tooltip=`Click to select or enter a reference for compare${c.NE.Ellipsis}`,r.command={title:`Compare${c.NE.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):(r=new s.TreeItem(`Compare ${e.label} with <branch, tag, or ref>`,s.TreeItemCollapsibleState.None),r.contextValue=$i.Td.ComparePickerWithRef,r.description=i,r.tooltip=`Click to compare ${e.label} with${c.NE.Ellipsis}`,r.command={title:`Compare ${e.label} with${c.NE.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),r}}var Yf=Object.defineProperty,jf=Object.getOwnPropertyDescriptor,zf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?jf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Yf(t,i,n),n};class SearchAndCompareViewNode extends $i.Re{constructor(e){super(st.Wj,e),this.splatted=!0}get children(){if(null==this._children){this._children=[];const e=this.view.getPinned();0!==e.length&&this._children.push(...e)}return this._children}getChildren(){return 0===this.children.length?[]:(this.view.message=void 0,this.children.sort(((e,t)=>(e.pinned?-1:1)-(t.pinned?-1:1)||t.order-e.order)))}getTreeItem(){this.splatted=!1;const e=new s.TreeItem("SearchAndCompare",s.TreeItemCollapsibleState.Expanded);return e.contextValue=$i.Td.SearchAndCompare,e}addOrReplace(e,t){this.children.includes(e)||(t&&this.clear(),this.children.push(e),this.view.triggerNodeChange())}clear(e=!1){if(0===this.children.length)return;this.removeComparePicker(!0);const t=this._children.findIndex((e=>!e.pinned));-1!==t&&this._children.splice(t,this._children.length),e||this.view.triggerNodeChange()}dismiss(e){if(e===this.comparePicker)return void this.removeComparePicker();if(0===this.children.length)return;const t=this.children.indexOf(e);-1!==t&&(this.children.splice(t,1),this.view.triggerNodeChange())}async refresh(){if(0===this.children.length)return;const e=[...(0,y.DZ)(this.children,(e=>{const t=void 0!==e.refresh&&e.refresh();return(0,Nt.tI)(t)?t:void 0}))];await Promise.all(e)}async compareWithSelected(e,t){const i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath)return void this.selectForCompare(e,t);if(null==t){const s=await Bn(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:On.BranchesAndTags|On.HEAD,sort:{branches:{current:!0}}});if(null==s)return void(null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0})));t=s.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){if(null==e&&(e=(await _l("Compare"))?.path),null==e)return;this.removeComparePicker(!0);let s,r=i?.prompt??!1;if(null==t){const i=await Bn(e,"Compare","Choose a reference to compare",{allowEnteringRefs:{ranges:!0},include:On.BranchesAndTags|On.HEAD|On.WorkingTree,sort:{branches:{current:!0},tags:{}}});if(null==i)return void await this.triggerChange();if(t=i.ref,(0,u.yk)(t)){const e=(0,u.t6)(t);null!=e&&(t=e.ref1||"HEAD",s=e.ref2||"HEAD")}r=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t}),this.children.splice(0,0,this.comparePicker),(0,Ci.v)(c.zf.ViewsCanCompare,!0),await this.triggerChange(),await this.view.reveal(this.comparePicker,{focus:!1,select:!0}),r&&await this.compareWithSelected(e,s)}getRefName(e){return"string"==typeof e?(0,u.zL)(e,{strings:{working:"Working Tree"}}):e.label??(0,u.zL)(e.ref)}removeComparePicker(e=!1){if((0,Ci.v)(c.zf.ViewsCanCompare,!1),null!=this.comparePicker){const t=this.children.indexOf(this.comparePicker);-1!==t&&(this.children.splice(t,1),e||this.triggerChange()),this.comparePicker=void 0}}}zf([(0,d.cM)()],SearchAndCompareViewNode.prototype,"clear",1),zf([(0,d.cM)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),zf([(0,Wt.H)(),(0,d.fF)()],SearchAndCompareViewNode.prototype,"refresh",1);class SearchAndCompareView extends ViewBase{constructor(e){super(e,"gitlens.views.searchAndCompare","Search & Compare","searchAndCompareView"),this.configKey="searchAndCompare",(0,Ci.v)(c.zf.ViewsSearchAndCompareKeepResults,this.keepResults)}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("clear"),(()=>this.clear()),this),la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this),la(this.getQualifiedCommand("setKeepResultsToOn"),(()=>this.setKeepResults(!0)),this),la(this.getQualifiedCommand("setKeepResultsToOff"),(()=>this.setKeepResults(!1)),this),la(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),la(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),la(this.getQualifiedCommand("pin"),this.pin,this),la(this.getQualifiedCommand("unpin"),this.unpin,this),la(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),la(this.getQualifiedCommand("selectForCompare"),(()=>this.selectForCompare())),la(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this),la(this.getQualifiedCommand("setFilesFilterOnLeft"),(e=>this.setFilesFilter(e,_o.Left)),this),la(this.getQualifiedCommand("setFilesFilterOnRight"),(e=>this.setFilesFilter(e,_o.Right)),this),la(this.getQualifiedCommand("setFilesFilterOff"),(e=>this.setFilesFilter(e,void 0)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat"))}get keepResults(){return this.container.storage.getWorkspace("views:searchAndCompare:keepResults",!0)}clear(){this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof vc||e instanceof pl)&&e.canDismiss&&this.root.dismiss(e)}compare(e,t,i){return this.addResults(new vc(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i))}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:s},r,n){this.visible||await this.show();const o={label:`Results ${"string"==typeof i?i:i.label}`,queryLabel:i};null==n?await this.addResults(new pl(this,this.root,e,t,o,r),s):await n.edit({pattern:t,labels:o,log:r})}getPinned(){let e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e){const t=this.container.storage.getWorkspace("pinned:comparisons");if(null==t)return[];e=Object.create(null);for(const i of Object.values(t))e[vc.getPinnableId(i.path,i.ref1.ref,i.ref2.ref)]={type:"comparison",timestamp:Date.now(),path:i.path,ref1:i.ref1,ref2:i.ref2};this.container.storage.storeWorkspace("views:searchAndCompare:pinned",e),this.container.storage.deleteWorkspace("pinned:comparisons")}const t=Object.create(null);let i=!1;const s=this.ensureRoot(),r=Object.entries(e).sort((([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0))).map((([e,r])=>{if("comparison"===r.type){const n=vc.getPinnableId(r.path,r.ref1.ref,r.ref2.ref);return e!==n?(i=!0,t[n]=r):t[e]=r,new vc(this,s,r.path,{label:r.ref1.label,ref:r.ref1.ref??r.ref1.name??r.ref1.sha},{label:r.ref2.label,ref:r.ref2.ref??r.ref2.name??r.ref2.sha},r.timestamp)}const n=pl.getPinnableId(r.path,r.search);return e!==n?(i=!0,t[n]=r):t[e]=r,new pl(this,s,r.path,(0,Et.uP)(r.search),r.labels,void 0,r.timestamp)}));return i&&this.container.storage.storeWorkspace("views:searchAndCompare:pinned",t),r}async updatePinned(e,t){let i=this.container.storage.getWorkspace("views:searchAndCompare:pinned");i=(0,$m.iC)(i,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",i),this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}async addResults(e,t={expand:!0,focus:!0,select:!0}){this.visible||await this.show();this.ensureRoot().addOrReplace(e,!this.keepResults),queueMicrotask((()=>this.reveal(e,t)))}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setKeepResults(e){this.container.storage.storeWorkspace("views:searchAndCompare:keepResults",e),(0,Ci.v)(c.zf.ViewsSearchAndCompareKeepResults,e)}setShowAvatars(e){return r.D.updateEffective(`views.${this.configKey}.avatars`,e)}pin(e){if(e instanceof vc||e instanceof pl)return e.pin()}setFilesFilter(e,t){e instanceof ResultsFilesNode&&(e.filter=t)}swapComparison(e){if(e instanceof vc)return e.swap()}unpin(e){if(e instanceof vc||e instanceof pl)return e.unpin()}}zf([(0,Wt.H)((()=>""))],SearchAndCompareView.prototype,"revealRepository",1);var Kf=Object.defineProperty,Jf=Object.getOwnPropertyDescriptor,Zf=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Jf(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Kf(t,i,n),n};class StashesRepositoryNode extends $i.vb{async getChildren(){return null==this.child&&(this.child=new Ga(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(lt.I6.Stash,lt.I6.Unknown,lt.du.Any)}}class StashesViewNode extends $i.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No stashes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new StashesRepositoryNode(st.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getStash();return null==t||0===t.commits.size?(this.view.message="No stashes could be found.",this.view.title="Stashes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Stashes (${t.commits.size})`,e.getChildren())}return this.view.title="Stashes",this.children}getTreeItem(){return new s.TreeItem("Stashes",s.TreeItemCollapsibleState.Expanded)}}class StashesView extends ViewBase{constructor(e){super(e,"gitlens.views.stashes","Stashes","stashesView"),this.configKey="stashes"}get canReveal(){return this.config.reveal||!r.D.get("views.repositories.showStashes")}getRoot(){return new StashesViewNode(this)}registerCommands(){return this.container.viewCommands,[la(this.getQualifiedCommand("copy"),(()=>(0,ki.P0)(c.Gh.ViewsCopy,this.activeSelection,this.selection)),this),la(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("stashes"),this.refresh(!0))),this),la(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout(te.Vc.Auto)),this),la(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout(te.Vc.List)),this),la(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout(te.Vc.Tree)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||r.D.changed(e,"defaultDateFormat")||r.D.changed(e,"defaultDateLocale")||r.D.changed(e,"defaultDateShortFormat")||r.D.changed(e,"defaultDateSource")||r.D.changed(e,"defaultDateStyle")||r.D.changed(e,"defaultGravatarsStyle")||r.D.changed(e,"defaultTimeFormat"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof Yo||e instanceof StashFileNode)&&this.container.events.fire("commit:selected",{commit:e.commit,pin:!1,preserveFocus:!0,preserveVisibility:!0},{source:this.id}),e instanceof StashFileNode&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}findStash(e,t){const i=al.getId(e.repoPath);return this.findNode(Yo.getId(e.repoPath,e.ref),{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.id.startsWith(i),token:t})}async revealRepository(e,t){const i=await this.findNode($i.vb.getId(e),{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof $i.vb});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return s.window.withProgress({location:s.ProgressLocation.Notification,title:`Revealing ${(0,u.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,s)=>{const r=await this.findStash(e,s);if(null!=r)return await this.ensureRevealNode(r,t),r}))}setFilesLayout(e){return r.D.updateEffective(`views.${this.configKey}.files.layout`,e)}}Zf([(0,Wt.H)((()=>""))],StashesView.prototype,"revealRepository",1),Zf([(0,Wt.H)((()=>""))],StashesView.prototype,"revealStash",1);class ViewFileDecorationProvider{constructor(){this._onDidChange=new s.EventEmitter,this.disposable=s.Disposable.from(s.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme)return"branch"===e.authority?this.provideBranchCurrentDecoration(e,t):"remote"===e.authority?this.provideRemoteDefaultDecoration(e,t):void 0}}),s.window.registerFileDecorationProvider(this))}get onDidChange(){return this._onDidChange.event}dispose(){this.disposable.dispose()}provideFileDecoration(e,t){if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchStatusDecoration(e,t);case"commit-file":return this.provideCommitFileStatusDecoration(e,t)}}provideCommitFileStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case"!":return{badge:"I",color:new s.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new s.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new s.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new s.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new s.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new s.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"};default:return}}provideBranchStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case p.Yu.Ahead:return{badge:"▲",color:new s.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};case p.Yu.Behind:return{badge:"▼",color:new s.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};case p.Yu.Diverged:return{badge:"▼▲",color:new s.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};case p.Yu.MissingUpstream:return{badge:"!",color:new s.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};case p.Yu.UpToDate:return{badge:"",color:new s.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};case p.Yu.Unpublished:return{badge:"▲+",color:new s.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};default:return}}provideBranchCurrentDecoration(e,t){const[,,i,r]=e.path.split("/");if(!r)return;let n;switch(i){case p.Yu.Ahead:n=new s.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case p.Yu.Behind:n=new s.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case p.Yu.Diverged:n=new s.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case p.Yu.UpToDate:n=new s.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor");break;case p.Yu.Unpublished:n=new s.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor")}return{badge:c.NE.Check,color:n,tooltip:"Current Branch"}}provideRemoteDefaultDecoration(e,t){const[,i]=e.path.split("/");if(i)return{badge:c.NE.Check,tooltip:"Default Remote"}}}class RequestType{constructor(e){this.name=e}}const Xf=new RequestType("git"),ew=new RequestType("repositories/inFolder");var tw=Object.defineProperty,iw=Object.getOwnPropertyDescriptor,sw=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?iw(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&tw(t,i,n),n};const rw=()=>!0,nw=new Map([["blame",rw],["branch",e=>"--contains"===e[1]],["cat-file",rw],["check-mailmap",rw],["check-ref-format",rw],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",rw],["difftool",rw],["for-each-ref",rw],["log",rw],["ls-files",rw],["ls-tree",rw],["merge-base",rw],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",rw],["rev-parse",rw],["show",rw],["show-ref",rw],["stash",e=>"list"===e[1]],["status",rw],["symbolic-ref",rw],["tag",e=>"-l"===e[1]]]),ow=/^[/|\\]/,aw=class{constructor(e,t,i){this._api=e,this._service=t,this.container=i,this._localToSharedPaths=new Map,this._sharedToLocalPaths=new Map,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=s.Disposable.from(s.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(Xf,this.onGitCommandRequest.bind(this)),this.onRequest(ew,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static async share(e,t){const i=await e.shareService(this.ServiceId);if(null==i)throw new Error("Failed to share host service");return new aw(e,i,t)}dispose(){this._disposable.dispose(),this._api.unshareService(aw.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,((e,i)=>t(e[0],i)))}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){if(null==s.workspace.workspaceFolders||0===s.workspace.workspaceFolders.length)return;const t=(0,Ut.UH)();let i,r;this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear();for(const e of s.workspace.workspaceFolders)i=(0,b.AH)(e.uri.fsPath),r=(0,b.AH)(this.convertLocalUriToShared(e.uri).toString()),be.Yd.debug(t,`shared='${r}' ↔ local='${i}'`),this._localToSharedPaths.set(i,r),this._sharedToLocalPaths.set(r,i);let n=(0,ye.v_)(this._sharedToLocalPaths.values(),"|");n=n.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=new RegExp(`(${n})`,"gi");let o=(0,ye.v_)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=new RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){const{options:i,args:s}=e,r=nw.get(e.args[0]);if(null==r||!r(e.args))throw new Error(`Git ${e.args[0]} command is not allowed`);let n=!1;if(null!=i.cwd&&i.cwd.length>0&&null!=this._sharedToLocalPaths)if(this._sharedPathsRegex?.test(i.cwd))i.cwd=(0,b.AH)(i.cwd).replace(this._sharedPathsRegex,((e,t)=>{n||(n="/~0"===t);const i=this._sharedToLocalPaths.get(t);return null!=i?i:t}));else if(ow.test(i.cwd)){const e=this._sharedToLocalPaths.get("vsls:/~0");null!=e&&(n=!0,i.cwd=(0,b.AH)(this.container.git.getAbsoluteUri(i.cwd,e).fsPath))}let o=!1,a=-1;for(const e of s)a++,"--"!==e?o&&"string"==typeof e&&(n&&ow.test(e[0])&&s.splice(a,1,e.substr(1)),this._sharedPathsRegex?.test(e)&&s.splice(a,1,(0,b.AH)(e).replace(this._sharedPathsRegex,((e,t)=>{const i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))):o=!0;let l=await function(e,...t){return ci().git(e,...t)}(i,...s);return"string"==typeof l?(null!=this._localPathsRegex&&l.length>0&&(l=l.replace(this._localPathsRegex,((e,t)=>{const i=this._localToSharedPaths.get((0,b.AH)(t));return null!=i?i:t}))),{data:l}):{data:l.toString("binary"),isBuffer:!0}}async onGetRepositoriesForUriRequest(e,t){const i=[],r=this.convertSharedUriToLocal(s.Uri.parse(e.folderUri,!0)),n=this.container.git.getRepository(r);if(null!=n){const e=this.convertLocalUriToShared(n.uri);i.push({folderUri:e.toString(),root:n.root,closed:n.closed})}return{repositories:i}}convertLocalUriToShared(e){const t=(0,Ut.UH)();let i=this._api.convertLocalUriToShared(e);be.Yd.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);const r=e.path;let n=i.path;if(i.authority.length>0&&(n=`/${i.authority}${n}`),new RegExp(`${r}$`,"i").test(n))if(n.length===r.length){const t=s.workspace.getWorkspaceFolder(e);i=i.with({path:`/~${t.index}`})}else i=i.with({path:n.substr(0,n.length-r.length)});else if(!n.startsWith("/~")){const t=s.workspace.getWorkspaceFolder(e);i=i.with({path:`/~${t.index}${n}`})}return i}convertSharedUriToLocal(e){(0,b.tD)(e.path)&&(e=e.with({path:`${e.path}/`}));const t=this._api.convertSharedUriToLocal(e);let i=t.path;const s=e.path;return i.endsWith(s)&&(i=i.substr(0,i.length-s.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};let lw=aw;lw.ServiceId="proxy",sw([(0,d.cM)()],lw.prototype,"onAvailabilityChanged",1),sw([(0,d.fF)()],lw.prototype,"onWorkspaceFoldersChanged",1),sw([(0,d.cM)()],lw.prototype,"onGitCommandRequest",1),sw([(0,d.cM)()],lw.prototype,"onGetRepositoriesForUriRequest",1),sw([(0,d.fF)({exit:e=>`returned ${e.toString(!0)}`})],lw.prototype,"convertLocalUriToShared",1),sw([(0,d.cM)()],lw,"share",1);var cw=Object.defineProperty,hw=Object.getOwnPropertyDescriptor,uw=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?hw(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&cw(t,i,n),n};const dw=class{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){const i=(0,Ut.UH)();try{const i=await e.getSharedService(lw.ServiceId);if(null==i)throw new Error("Failed to connect to host service");return new dw(e,i,t)}catch(e){return void be.Yd.error(e,i)}}dispose(){}onAvailabilityChanged(e){e?this.container.git.setEnabledContext(!0):(this.container.git.setEnabledContext(!1),s.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed."))}async git(e,...t){const i=await this.sendRequest(Xf,{options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async getRepositoriesForUri(e){return(await this.sendRequest(ew,{folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t])}};let pw=dw;uw([(0,d.cM)()],pw.prototype,"onAvailabilityChanged",1),uw([(0,d.cM)()],pw.prototype,"git",1),uw([(0,d.cM)()],pw.prototype,"getRepositoriesForUri",1),uw([(0,d.fF)()],pw.prototype,"sendRequest",1),uw([(0,d.cM)()],pw,"connect",1);var mw=Object.defineProperty,gw=Object.getOwnPropertyDescriptor,fw=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?gw(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&mw(t,i,n),n};function ww(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}class VslsController{constructor(e){this.container=e,this._readonly=!1,this._ready=(0,Nt.PQ)(),this._disposable=s.Disposable.from((0,Ai.IH)(e.onReady)(this.onReady,this))}dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){s.workspace.workspaceFolders?.some((e=>e.uri.scheme===c.sN.Vsls))&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();const e=await this._api;if(null==e)return(0,Ci.v)(c.zf.Vsls,!1),void this._ready.fulfill();(0,Ci.v)(c.zf.Vsls,!0),this._disposable=s.Disposable.from(this._disposable,e.onDidChangeSession((t=>this.onLiveShareSessionChanged(e,t)),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){be.Yd.error(e)}}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,Ci.v)(c.zf.Vsls,"host"),r.D.get("liveshare.allowGuestAccess")&&(this._host=await lw.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,Ci.v)(c.zf.Vsls,"guest"),this._guest=await pw.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,Ci.v)(c.zf.Vsls,!0),this._ready=(0,Nt.PQ)()}}async getLiveShareApi(){try{const e=s.extensions.getExtension("ms-vsliveshare.vsliveshare");if(null!=e){const t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch{}}get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,Ci.v)(c.zf.Readonly,!!e||void 0)}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;const t=await this._api;if(null==t)return;return(await t.getContacts([e])).contacts[e]}async getContacts(e){const t=await this._api;if(null==t)return;const i=await t.getContacts(e);return Object.values(i.contacts)}async getContactPresence(e){const t=await this.getContact(e);if(null!=t)return ww(t.status)}async getContactsPresence(e){const t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map((e=>[e.email,ww(e.status)])))}maybeGetPresence(e){return this.getContactPresence(e)}async invite(e){if(null==e)return;const t=await this.getContact(e);return null!=t?t.invite():void 0}async startSession(){const e=await this._api;if(null!=e)return e.share()}}fw([(0,d.fF)()],VslsController.prototype,"getContact",1),fw([(0,d.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),fw([(0,d.fF)()],VslsController.prototype,"getContactPresence",1),fw([(0,d.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1),fw([(0,d.fF)(),Ca(250)],VslsController.prototype,"maybeGetPresence",1);const vw=new IpcCommandType("commit/actions"),yw=new IpcCommandType("commit/file/actions"),bw=new IpcCommandType("commit/file/open"),Cw=new IpcCommandType("commit/file/openOnRemote"),Aw=new IpcCommandType("commit/file/compareWorking"),Pw=new IpcCommandType("commit/file/comparePrevious"),Dw=new IpcCommandType("commit/pickCommit"),Sw=new IpcCommandType("commit/searchCommit"),kw=new IpcCommandType("commit/autolinkSettings"),Rw=new IpcCommandType("commit/pin"),Fw=new IpcCommandType("commit/preferences"),$w=new IpcNotificationType("commit/didChange");new IpcNotificationType("commit/didChange/rich");var Tw=Object.defineProperty,xw=Object.getOwnPropertyDescriptor,Iw=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?xw(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Tw(t,i,n),n};class CommitDetailsWebviewView extends sf{constructor(e){super(e,"gitlens.views.commitDetails","commitDetails.html","Commit Details",`${c.zf.WebviewViewPrefix}commitDetails`,"commitDetailsView"),this._bootstraping=!0,this._pinned=!1,this._cancellationTokenSource=void 0,this._notifyDidChangeStateDebounced=void 0,this._context={pinned:!1,commit:void 0,preferences:void 0,richStateLoaded:!1,formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,dateFormat:r.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",indentGuides:r.D.getAny("workbench.tree.renderIndentGuides")??"onHover"},this.disposables.push(r.D.onDidChange(this.onConfigurationChanged,this),r.D.onDidChangeAny(this.onAnyConfigurationChanged,this),this.container.events.on("commit:selected",(0,Lt.Ds)(this.onCommitSelected,250),this))}onCommitSelected(e){null!=e.data&&this.show(e.data)}async show(e){if(!this._pinned||e?.pin||!this.visible){if(null!=e){let t,i;if(({commit:t,pin:i,...e}=e),null==t&&(t=this.getBestCommitOrStash()),null!=t&&!this._context.commit?.ref.startsWith(t.ref)){if(!(0,A.f_)(t))if("stash"===t.refType){const e=await this.container.git.getStash(t.repoPath);t=e?.commits.get(t.ref)}else t=await this.container.git.getCommit(t.repoPath,t.ref);this.updateCommit(t,{pinned:i??!1})}}if(!e?.preserveVisibility)return super.show(e)}}async includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}onInitializing(){if(null==this._context.preferences&&this.updatePendingContext({preferences:{autolinksExpanded:this.container.storage.getWorkspace("views:commitDetails:autolinksExpanded"),avatars:r.D.get("views.commitDetails.avatars"),dismissed:this.container.storage.get("views:commitDetails:dismissed"),files:r.D.get("views.commitDetails.files")}}),null==this._context.commit){const e=this.getBestCommitOrStash();null!=e&&this.updateCommit(e,{immediate:!1})}}onVisibilityChanged(e){this.ensureTrackers(),e&&(this._bootstraping&&(this._bootstraping=!1,null==this._pendingContext)||this.updateState(!0))}onAnyConfigurationChanged(e){e.affectsConfiguration("workbench.tree.renderIndentGuides")&&(this.updatePendingContext({indentGuides:r.D.getAny("workbench.tree.renderIndentGuides")??"onHover"}),this.updateState())}onConfigurationChanged(e){r.D.changed(e,"defaultDateFormat")&&(this.updatePendingContext({dateFormat:r.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma"}),this.updateState()),r.D.changed(e,"views.commitDetails")&&((r.D.changed(e,"views.commitDetails.files")||r.D.changed(e,"views.commitDetails.avatars"))&&this.updatePendingContext({preferences:{...this._context.preferences,...this._pendingContext?.preferences,avatars:r.D.get("views.commitDetails.avatars"),files:r.D.get("views.commitDetails.files")}}),null!=this._context.commit&&(r.D.changed(e,"views.commitDetails.autolinks")||r.D.changed(e,"views.commitDetails.pullRequests"))&&this.updateCommit(this._context.commit,{force:!0}),this.updateState())}ensureTrackers(){if(this._visibilityDisposable?.dispose(),this._visibilityDisposable=void 0,this._pinned||!this.visible)return;const{lineTracker:e}=this.container;this._visibilityDisposable=s.Disposable.from(e.subscribe(this,e.onDidChangeActiveLines(this.onActiveLinesChanged,this)));const t=this._pendingContext?.commit??this.getBestCommitOrStash();this.updateCommit(t,{immediate:!1})}onReady(){this.updateState(!1)}onMessageReceived(e){switch(e.method){case Cw.method:Nm(Cw,e,(e=>{this.openFileOnRemote(e)}));break;case bw.method:Nm(bw,e,(e=>{this.openFile(e)}));break;case Aw.method:Nm(Aw,e,(e=>{this.openFileComparisonWithWorking(e)}));break;case Pw.method:Nm(Pw,e,(e=>{this.openFileComparisonWithPrevious(e)}));break;case yw.method:Nm(yw,e,(e=>{this.showFileActions(e)}));break;case vw.method:Nm(vw,e,(e=>{switch(e.action){case"graph":if(null==this._context.commit)return;(0,ki.P0)(c.Gh.ShowInCommitGraph,{ref:(0,u.qj)(this._context.commit)});break;case"more":this.showCommitActions();break;case"scm":(0,ki.dO)(c.nA.ShowSCM);break;case"sha":e.alt?this.showCommitPicker():null!=this._context.commit&&(0,ki.P0)(c.Gh.CopyShaToClipboard,{sha:this._context.commit.sha})}}));break;case Dw.method:Nm(Dw,e,(e=>this.showCommitPicker()));break;case Sw.method:Nm(Sw,e,(e=>this.showCommitSearch()));break;case kw.method:Nm(kw,e,(e=>this.showAutolinkSettings()));break;case Rw.method:Nm(Rw,e,(e=>this.updatePinned(e.pin??!1,!0)));break;case Fw.method:Nm(Fw,e,(e=>this.updatePreferences(e)))}}onActiveLinesChanged(e){if(e.pending)return;let t;null==e.editor&&((0,Ci.fw)("gitlens:webview:graph:active")||(0,Ci.fw)("gitlens:webview:rebaseEditor:active"))&&(t=this._pendingContext?.commit??this._context.commit,null==t)||(null==t&&(t=null!=e.selections?this.container.lineTracker.getState(e.selections[0].active)?.commit:void 0),this.updateCommit(t))}async getState(e){let t;if(null!=this._cancellationTokenSource&&(this._cancellationTokenSource.cancel(),this._cancellationTokenSource.dispose(),this._cancellationTokenSource=void 0),null!=e.commit&&(t=await this.getDetailsModel(e.commit,e.formattedMessage),!e.richStateLoaded)){this._cancellationTokenSource=new s.CancellationTokenSource;const t=this._cancellationTokenSource.token;setTimeout((()=>{t.isCancellationRequested||this.updateRichState(e,t)}),100)}return function(e){try{let t=function(e,t){if(t instanceof Date)return t.getTime();if(t instanceof Map||t instanceof Set)return[...t.entries()];if(t instanceof Function||t instanceof Error)return;if(t instanceof RegExp)return t.toString();const i=this[e];return i instanceof Date?i.getTime():t};return JSON.parse(JSON.stringify(e,t))}catch(e){throw e}}({pinned:e.pinned,includeRichContent:e.richStateLoaded,preferences:e.preferences,selected:t,autolinkedIssues:e.autolinkedIssues?.map(hi.Gj),pullRequest:null!=e.pullRequest?(0,mn.l1)(e.pullRequest):void 0,dateFormat:e.dateFormat,indentGuides:e.indentGuides})}async updateRichState(e,t){const{commit:i}=e;if(null==i)return;const s=await this.container.git.getBestRemoteWithRichProvider(i.repoPath);if(t.isCancellationRequested)return;let n,o;if(null!=s?.provider){const[e,a]=await Promise.allSettled([r.D.get("views.commitDetails.autolinks.enabled")&&r.D.get("views.commitDetails.autolinks.enhanced")?this.container.autolinks.getLinkedIssuesAndPullRequests(i.message??i.summary,s):void 0,r.D.get("views.commitDetails.pullRequests.enabled")?i.getAssociatedPullRequest({remote:s}):void 0]);if(t.isCancellationRequested)return;n=(0,Nt.Sb)(e),o=(0,Nt.Sb)(a)}const a=this.getFormattedMessage(i,s,n);null!=o&&n?.delete(o.id),this.updatePendingContext({richStateLoaded:!0,formattedMessage:a,autolinkedIssues:null!=n?[...n.values()]:void 0,pullRequest:o}),this.updateState()}updateCommit(e,t){if(t?.force||this._context.commit?.sha!==e?.sha){if(this._commitDisposable?.dispose(),e?.isUncommitted){const t=this.container.git.getRepository(e.repoPath);this._commitDisposable=s.Disposable.from(t.startWatchingFileSystem(),t.onDidChangeFileSystem((()=>{this.updatePendingContext({commit:e},!0),this.updateState()})))}this.updatePendingContext({commit:e,richStateLoaded:Boolean(e?.isUncommitted)||!(0,Ci.fw)(c.zf.HasConnectedRemotes),formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0},t?.force),null!=t?.pinned&&this.updatePinned(t?.pinned),this.updateState(t?.immediate??!0)}}updatePinned(e,t){e!==this._context.pinned&&(this._pinned=e,this.ensureTrackers(),this.updatePendingContext({pinned:e}),this.updateState(t))}updatePreferences(e){if(this._context.preferences?.autolinksExpanded===e.autolinksExpanded&&this._context.preferences?.avatars===e.avatars&&this._context.preferences?.dismissed===e.dismissed&&this._context.preferences?.files===e.files&&this._context.preferences?.files?.compact===e.files?.compact&&this._context.preferences?.files?.layout===e.files?.layout&&this._context.preferences?.files?.threshold===e.files?.threshold)return;const t={...this._context.preferences,...this._pendingContext?.preferences};null!=e.autolinksExpanded&&this._context.preferences?.autolinksExpanded!==e.autolinksExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:autolinksExpanded",e.autolinksExpanded),t.autolinksExpanded=e.autolinksExpanded),null!=e.avatars&&this._context.preferences?.avatars!==e.avatars&&(r.D.updateEffective("views.commitDetails.avatars",e.avatars),t.avatars=e.avatars),null!=e.dismissed&&this._context.preferences?.dismissed!==e.dismissed&&(this.container.storage.store("views:commitDetails:dismissed",e.dismissed),t.dismissed=e.dismissed),null!=e.files&&this._context.preferences?.files!==e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&r.D.updateEffective("views.commitDetails.files.compact",e.files?.compact),this._context.preferences?.files?.layout!==e.files?.layout&&r.D.updateEffective("views.commitDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&r.D.updateEffective("views.commitDetails.files.threshold",e.files?.threshold),t.files=e.files),this.updatePendingContext({preferences:t})}updatePendingContext(e,t=!1){let i=!1;for(const[r,n]of Object.entries(e)){const e=this._context[r];!t&&(e instanceof s.Uri||n instanceof s.Uri)&&e?.toString()===n?.toString()||(t||e!==n||void 0===n&&!(r in this._context)||null!=this._pendingContext&&r in this._pendingContext)&&(null==this._pendingContext&&(this._pendingContext={}),this._pendingContext[r]=n,i=!0)}return i}updateState(e=!1){this.isReady&&this.visible&&(e?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,Lt.Ds)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()))}async notifyDidChangeState(){if(!this.isReady||!this.visible)return!1;const e=(0,Ut.UH)();if(this._notifyDidChangeStateDebounced?.cancel(),null==this._pendingContext)return!1;const t={...this._context,...this._pendingContext};return s.window.withProgress({location:{viewId:this.id}},(async()=>{try{await this.notify($w,{state:await this.getState(t)})&&(this._context=t,this._pendingContext=void 0)}catch(t){be.Yd.error(e,t)}}))}getBestCommitOrStash(){if(this._pinned)return;let e;if(null!=s.window.activeTextEditor){const{lineTracker:t}=this.container,i=t.selections?.[0].active;if(null!=i&&(e=t.getState(i)?.commit,null!=e))return e}else if(((0,Ci.fw)("gitlens:webview:graph:active")||(0,Ci.fw)("gitlens:webview:rebaseEditor:active"))&&(e=this._pendingContext?.commit??this._context.commit,null!=e))return e;const{commitsView:t}=this.container;let i=t.activeSelection;if(null!=i&&(i instanceof Ao||i instanceof FileRevisionAsCommitNode||i instanceof fo)&&(e=i.commit,null!=e))return e;const{stashesView:r}=this.container;return i=r.activeSelection,null!=i&&(i instanceof Yo||i instanceof StashFileNode)&&(e=i.commit),e}async getDetailsModel(e,t){const[i,r,n]=await Promise.allSettled([e.hasFullDetails()?e:e.ensureFullDetails().then((()=>e)),e.author.getAvatarUri(e,{size:32}),this.container.git.getBestRemoteWithRichProvider(e.repoPath,{includeDisconnected:!0})]);e=(0,Nt.Sb)(i,e);const o=(0,Nt.Sb)(r),a=(0,Nt.Sb)(n);let l;if(null==t&&(t=this.getFormattedMessage(e,a)),null!=e.message){const t=this.container.autolinks.getAutolinks(e.message);if(null!=a){const i=this.container.autolinks.getAutolinks(e.message,a);l=new Map((0,ye.G0)(i,t))}else l=t}return{sha:e.sha,shortSha:e.shortSha,isStash:"stash"===e.refType,message:t,author:{...e.author,avatar:o?.toString(!0)},files:e.files?.map((({status:e,repoPath:t,path:i,originalPath:r})=>{const n=(0,D.tK)(e);return{path:i,originalPath:r,status:e,repoPath:t,icon:{dark:this._view.webview.asWebviewUri(s.Uri.joinPath(this.container.context.extensionUri,"images","dark",n)).toString(),light:this._view.webview.asWebviewUri(s.Uri.joinPath(this.container.context.extensionUri,"images","light",n)).toString()}}})),stats:e.stats,autolinks:null!=l?[...(0,ye.UI)(l.values(),wi)]:void 0}}getFormattedMessage(e,t,i){let s=CommitFormatter.fromTemplate("${message}",e);const n=s.indexOf("\n");return-1!==n&&(s=`${s.substring(0,n)}\0\n\0${s.substring(n+1)}`),r.D.get("views.commitDetails.autolinks.enabled")?this.container.autolinks.linkify(s,"html",null!=t?[t]:void 0,i):s}async getFileCommitFromParams(e){const t=await(this._context.commit?.getCommitForFile(e.path));return null!=t?[t,t.file]:void 0}showAutolinkSettings(){(0,ki.P0)(c.Gh.ShowSettingsPageAndJumpToAutolinks)}showCommitSearch(){Ri({command:"search",state:{openPickInView:!0}})}showCommitPicker(){Ri({command:"log",state:{reference:"HEAD",repo:this._context.commit?.repoPath,openPickInView:!0}})}showCommitActions(){null==this._context.commit||this._context.commit.isUncommitted||_s(this._context.commit)}async showFileActions(e){const t=await this.getFileCommitFromParams(e);if(null==t)return;const[i,s]=t;this.updatePinned(!0,!0),_s(i,s)}async openFileComparisonWithWorking(e){const t=await this.getFileCommitFromParams(e);if(null==t)return;const[i,s]=t;this.updatePinned(!0,!0),Ss(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileComparisonWithPrevious(e){const t=await this.getFileCommitFromParams(e);if(null==t)return;const[i,s]=t;this.updatePinned(!0,!0),Ps(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}),this.container.events.fire("file:selected",{uri:s.uri},{source:this.id})}async openFile(e){const t=await this.getFileCommitFromParams(e);if(null==t)return;const[i,s]=t;this.updatePinned(!0,!0),Rs(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileOnRemote(e){const t=await this.getFileCommitFromParams(e);if(null==t)return;const[i,r]=t;!async function(e,t){let i;if(e instanceof s.Uri)i=e;else{if(null==t)throw new Error("Invalid arguments");if(i=st.YY.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await(0,ki.P0)(c.Gh.OpenFileOnRemote,i,{sha:t?.ref})}(r.path,i)}getShowOptions(e){return(0,Ci.fw)("gitlens:webview:graph:active")||(0,Ci.fw)("gitlens:webview:rebaseEditor:active")?{...e.showOptions,viewColumn:s.ViewColumn.Beside}:e.showOptions}}Iw([(0,d.cM)({args:{0:e=>`{"commit":${e?.commit?.ref},"pin":${e?.pin},"preserveFocus":${e?.preserveFocus},"preserveVisibility":${e?.preserveVisibility}}`}})],CommitDetailsWebviewView.prototype,"show",1),Iw([(0,d.fF)({args:!1})],CommitDetailsWebviewView.prototype,"getState",1);var _w=(e=>(e.DismissedWelcome="dismissed:welcome",e.OpenedSCM="opened:scm",e))(_w||{});const Ow=new IpcCommandType("home/step/complete"),Bw=new IpcCommandType("home/section/dismiss"),Ew=new IpcCommandType("home/status/dismiss"),Mw=new IpcCommandType("home/banner/dismiss"),Ww=new IpcNotificationType("subscription/didChange"),Lw=new IpcNotificationType("extensionEnabled/didChange"),Uw=new IpcNotificationType("configuration/didChange"),Nw=new IpcNotificationType("layout/didChange");class HomeWebviewView extends sf{constructor(e){super(e,"gitlens.views.home","home.html","Home",`${c.zf.WebviewViewPrefix}home`,"homeView"),this._validateSubscriptionDebounced=void 0,this.disposables.push(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,Ci.ve)((e=>{e===c.zf.Disabled&&this.notifyExtensionEnabled()})),r.D.onDidChange((e=>{this.onConfigurationChanged(e)}),this),this.container.storage.onDidChange((e=>{this.onStorageChanged(e)})))}async show(e){if(await Ja())return super.show(e)}async onSubscriptionChanged(e){await this.container.storage.store("home:status:pinned",!0),this.notifyDidChangeData(e.current)}onConfigurationChanged(e){r.D.changed(e,"plusFeatures.enabled")&&this.notifyDidChangeConfiguration()}onStorageChanged(e){"views:layout"===e.key&&this.notifyDidChangeLayout()}onVisibilityChanged(e){e?queueMicrotask((()=>{this.validateSubscription()})):this._validateSubscriptionDebounced?.cancel()}onWindowFocusChanged(e){e&&this.visible?queueMicrotask((()=>{this.validateSubscription()})):this._validateSubscriptionDebounced?.cancel()}registerCommands(){return[(0,ki.xR)(`${this.id}.refresh`,(()=>this.refresh()),this),(0,ki.xR)("gitlens.home.toggleWelcome",(async()=>{const e=!this.welcomeVisible;await this.container.storage.store("views:welcome:visible",e),e&&(await this.container.storage.store("home:actions:completed",[]),await this.container.storage.store("home:steps:completed",[]),await this.container.storage.store("home:sections:dismissed",[])),this.refresh()})),(0,ki.xR)("gitlens.home.restoreWelcome",(async()=>{await this.container.storage.store("home:steps:completed",[]),await this.container.storage.store("home:sections:dismissed",[]),this.refresh()})),(0,ki.xR)("gitlens.home.showSCM",(async()=>{const e=this.container.storage.get("home:actions:completed",[]);e.includes(_w.OpenedSCM)||(e.push(_w.OpenedSCM),await this.container.storage.store("home:actions:completed",e),this.notifyDidChangeData()),await(0,ki.dO)(c.nA.ShowSCM)}))]}onMessageReceived(e){switch(e.method){case Ow.method:Nm(Ow,e,(e=>this.completeStep(e)));break;case Bw.method:Nm(Bw,e,(e=>this.dismissSection(e)));break;case Ew.method:Nm(Ew,e,(e=>this.dismissPinStatus()));break;case Mw.method:Nm(Mw,e,(e=>this.dismissBanner(e)))}}completeStep({id:e,completed:t=!1}){const i=this.container.storage.get("home:steps:completed",[]),s=i.includes(e);!s&&t?i.push(e):s&&!t&&i.splice(i.indexOf(e),1),this.container.storage.store("home:steps:completed",i)}dismissSection(e){const t=this.container.storage.get("home:sections:dismissed",[]);t.includes(e.id)||(t.push(e.id),this.container.storage.store("home:sections:dismissed",t))}dismissBanner(e){const t=this.container.storage.get("home:banners:dismissed",[]);t.includes(e.id)||t.push(e.id),this.container.storage.store("home:banners:dismissed",t)}dismissPinStatus(){this.container.storage.store("home:status:pinned",!1)}async includeBootstrap(){return this.getState()}get welcomeVisible(){return this.container.storage.get("views:welcome:visible",!0)}async getRepoVisibility(){return await this.container.git.visibility()}async getSubscription(e){const t=[...this.container.storage.get("home:actions:completed",[])];this.welcomeVisible||t.push(_w.DismissedWelcome);const i=e??await this.container.subscription.getSubscription(!0);let s;return s=i.account?.email?(0,Ze.GV)(i.account.email,34).toString():`${this.getWebRoot()??""}/media/gitlens-logo.webp`,{subscription:i,completedActions:t,avatar:s}}getPinStatus(){return this.container.storage.get("home:status:pinned")??!0}async getState(e){const t=await this.getSubscription(e),i=this.container.storage.get("home:steps:completed",[]),s=this.container.storage.get("home:sections:dismissed",[]),r=this.container.storage.get("home:banners:dismissed",[]);return{extensionEnabled:this.getExtensionEnabled(),webroot:this.getWebRoot(),subscription:t.subscription,completedActions:t.completedActions,plusEnabled:this.getPlusEnabled(),visibility:await this.getRepoVisibility(),completedSteps:i,dismissedSections:s,avatar:t.avatar,layout:this.getLayout(),pinStatus:this.getPinStatus(),dismissedBanners:r}}notifyDidChangeData(e){if(!this.isReady)return!1;const t=async()=>({...await this.getSubscription(e),pinStatus:this.getPinStatus()});return s.window.withProgress({location:{viewId:this.id}},(async()=>this.notify(Ww,await t())))}getExtensionEnabled(){return!(0,Ci.fw)(c.zf.Disabled,!1)}notifyExtensionEnabled(){this.isReady&&this.notify(Lw,{extensionEnabled:this.getExtensionEnabled()})}getPlusEnabled(){return r.D.get("plusFeatures.enabled")}notifyDidChangeConfiguration(){this.isReady&&this.notify(Uw,{plusEnabled:this.getPlusEnabled()})}getLayout(){const e=this.container.storage.get("views:layout");return null!=e?e:qu.SourceControl}notifyDidChangeLayout(){this.isReady&&this.notify(Nw,{layout:this.getLayout()})}async validateSubscription(){null==this._validateSubscriptionDebounced&&(this._validateSubscriptionDebounced=(0,Lt.Ds)(this.validateSubscriptionCore,1e3)),await this._validateSubscriptionDebounced()}async validateSubscriptionCore(){if(null==this._validating){this._validating=this.container.subscription.validate();try{await this._validating}finally{this._validating=void 0}}}}const Gw=new IpcCommandType("rebase/abort"),Hw=new IpcCommandType("rebase/disable"),Vw=new IpcCommandType("rebase/search"),Qw=new IpcCommandType("rebase/start"),qw=new IpcCommandType("rebase/switch"),Yw=new IpcCommandType("rebase/reorder"),jw=new IpcCommandType("rebase/change/entry"),zw=new IpcCommandType("rebase/move/entry"),Kw=new IpcCommandType("rebase/selection/update"),Jw=new IpcNotificationType("rebase/didChange");var Zw=Object.defineProperty,Xw=Object.getOwnPropertyDescriptor,ev=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?Xw(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&Zw(t,i,n),n};const tv=2**30;let iv=0;let sv=0;const rv=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,nv=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,ov=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);class RebaseEditorProvider{constructor(e){this.container=e,this.ascending=!1,this._disableAfterNextUse=!1,this._disposable=s.Disposable.from(s.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===r.D.get("rebaseEditor.ordering")}dispose(){this._disposable.dispose()}get contextKeyPrefix(){return`${c.zf.WebviewPrefix}rebaseEditor`}get enabled(){const e=r.D.inspectAny("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){const t=e.find((e=>"git-rebase-todo"===e.filenamePattern));return null==t||"gitlens.rebase"===t.viewType}const t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;const t=r.D.inspectAny("workbench.editorAssociations");let i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce(((e,t)=>(e[t.filenamePattern]=t.viewType,e)),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await r.D.updateAny("workbench.editorAssociations",i,s.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown");const r=(0,b.AH)(s.Uri.joinPath(e.uri,"..","..","..").fsPath),n=this.container.git.getRepository(r),o=[],a={dispose:()=>{s.Disposable.from(...o).dispose()},id:(sv===tv?sv=1:sv++,sv),subscriptions:o,document:e,panel:t,repoPath:n?.path??r,firstSelection:!0};o.push(t.onDidDispose((()=>{this.resetContextKeys(),s.Disposable.from(...o).dispose()})),t.onDidChangeViewState((e=>this.onViewStateChanged(a,e))),t.webview.onDidReceiveMessage((e=>this.onMessageReceived(a,e))),s.workspace.onDidChangeTextDocument((t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(a,!0)})),s.workspace.onDidSaveTextDocument((t=>{t.uri.toString()===e.uri.toString()&&this.updateState(a,!0)}))),null!=n&&o.push(n.onDidChange((e=>{e.changed(lt.I6.Rebase,lt.du.Any)&&this.updateState(a)}))),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(a),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}resetContextKeys(){(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,!1),(0,Ci.v)(`${this.contextKeyPrefix}:focus`,!1),(0,Ci.v)(`${this.contextKeyPrefix}:active`,!1)}setContextKeys(e,t,i){null!=e&&((0,Ci.v)(`${this.contextKeyPrefix}:active`,e),e||(t=!1,i=!1)),null!=t&&(0,Ci.v)(`${this.contextKeyPrefix}:focus`,t),null!=i&&(0,Ci.v)(`${this.contextKeyPrefix}:inputFocus`,i)}onViewFocusChanged(e){this.setContextKeys(e.focused,e.focused,e.inputFocused)}onViewStateChanged(e,t){const{active:i,visible:s}=t.webviewPanel;s?this.setContextKeys(i):this.resetContextKeys(),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){const t=await this.container.git.getBranch(e.repoPath);e.branchName=t?.name??null}return await this.parseRebaseTodo(e)}async postMessage(e,t){try{const i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return be.Yd.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(t.method){case Hm.method:Nm(Hm,t,(e=>{this.onViewFocusChanged(e)}));break;case Gw.method:Nm(Gw,t,(()=>this.abort(e)));break;case Hw.method:Nm(Hw,t,(()=>this.disable(e)));break;case Vw.method:Nm(Vw,t,(()=>(0,ki.dO)(c.nA.CustomEditorShowFindWidget)));break;case Qw.method:Nm(Qw,t,(()=>this.rebase(e)));break;case qw.method:Nm(qw,t,(()=>this.switchToText(e)));break;case Yw.method:Nm(Yw,t,(t=>this.swapOrdering(t,e)));break;case jw.method:Nm(jw,t,(t=>this.onEntryChanged(e,t)));break;case zw.method:Nm(zw,t,(t=>this.onEntryMoved(e,t)));break;case Kw.method:Nm(Kw,t,(t=>this.onSelectionChanged(e,t)))}}async onEntryChanged(e,t){const i=av(e.document),r=i.find((e=>e.sha===t.sha));if(null==r)return;const n=e.document.positionAt(r.index),o=e.document.validateRange(new s.Range(new s.Position(n.line,0),new s.Position(n.line,tv)));let a=t.action;const l=new s.WorkspaceEdit,c=[...i];c.splice(i.indexOf(r),1,{...r,action:t.action});let h=!1;for(const e of c)"squash"===e.action||"fixup"===e.action?h=!0:h&&"drop"!==e.action&&(h=!1);if(h){const t=c[c.length-1];if(r.sha===t.sha)a="pick";else{const i=e.document.positionAt(t.index),r=e.document.validateRange(new s.Range(new s.Position(i.line,0),new s.Position(i.line,tv)));l.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}l.replace(e.document.uri,o,`${a} ${r.sha} ${r.message}`),await s.workspace.applyEdit(l)}async onEntryMoved(e,t){const i=av(e.document),r=i.find((e=>e.sha===t.sha));if(null==r)return;const n=i.findIndex((e=>e.sha===t.sha));let o;if(t.relative){if(-1===t.to&&0===n||1===t.to&&n===i.length-1)return;o=n+t.to}else{if(n===t.to)return;o=t.to}const a=i[o];let l=e.document.positionAt(a.index).line;o<n&&l++;const c=e.document.positionAt(r.index),h=e.document.validateRange(new s.Range(new s.Position(c.line,0),new s.Position(c.line+1,0))),u=[...i];u.splice(n,1),u.splice(o,0,r);let d=!1;for(const e of u)"squash"===e.action||"fixup"===e.action?d=!0:d&&"drop"!==e.action&&(d=!1);const p=new s.WorkspaceEdit;let m=r.action;if(d){const t=u[u.length-1];if(r.sha===t.sha)m="pick";else{const i=e.document.positionAt(t.index),r=e.document.validateRange(new s.Range(new s.Position(i.line,0),new s.Position(i.line,tv)));p.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}p.delete(e.document.uri,h),p.insert(e.document.uri,new s.Position(l,0),`${m} ${r.sha} ${r.message}\n`),await s.workspace.applyEdit(p)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,Lt.Ds)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;const i=r.D.get("rebaseEditor.showDetailsView");t=e.commits?.find((e=>e.sha.startsWith(t)))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,u.xB)(t,e.repoPath,{refType:"revision"}),pin:!1,preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t)return e.notifyDidChangeStateDebounced?.cancel(),void this.notifyDidChangeState(e);null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,Lt.Ds)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible)return void(e.pendingChange=!0);const t=await this.parseState(e);this.postMessage(e,{id:(iv===tv?iv=1:iv++,`host:${iv}`),method:Jw.method,params:{state:t}})}async abort(e){e.dispose();const t=new s.WorkspaceEdit;t.replace(e.document.uri,new s.Range(0,0,e.document.lineCount,0),""),await s.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,r.D.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,Mt.QP)(),(0,ki.dO)(c.nA.Open,e.document.uri,{override:!1,preview:!1})}async getHtml(e){const t=s.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=s.Uri.joinPath(t,"rebase.html"),r=new TextDecoder("utf8").decode(await s.workspace.fs.readFile(i)),n=await this.parseState(e),o=e.panel.webview.cspSource,a=(0,ze.Vu)(),l=e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),c=e.panel.webview.asWebviewUri(t).toString();return r.replace(/#{(head|body|endOfBody|placement|cspSource|cspNonce|root|webroot)}/g,((e,t)=>{switch(t){case"endOfBody":return`<script type="text/javascript" nonce="${a}">window.bootstrap=${JSON.stringify(n)};<\/script>`;case"placement":return"editor";case"cspSource":return o;case"cspNonce":return a;case"root":return l;case"webroot":return c;default:return""}}))}async parseRebaseTodo(e){const t=e.document.getText(),i=av(t);let[,,,s]=rv.exec(t)??["","",""];null!=e.authors&&null!=e.commits||await this.loadRichCommitData(e,s,i);const n=r.D.get("defaultDateFormat"),o=Xu.getMarkdownCommandArgs("${commit}",e.repoPath),a=s?e.commits?.find((e=>e.sha.startsWith(s))):void 0;let l;for(const t of i)l=e.commits?.find((e=>e.sha.startsWith(t.sha))),null!=l&&(l.sha===a?.sha&&(s=""),t.commit={sha:l.sha,author:l.author.name,committer:l.committer.name,date:l.formatDate(n),dateFromNow:l.formatDateFromNow(),message:(0,Xe.X)(l.message??l.summary)});return{branch:e.branchName??"",onto:s?{sha:s,commit:null!=a?{sha:a.sha,author:a.author.name,committer:a.committer.name,date:a.formatDate(n),dateFromNow:a.formatDateFromNow(),message:(0,Xe.X)(a.message||"root")}:void 0}:void 0,entries:i,authors:null!=e.authors?Object.fromEntries(e.authors):{},commands:{commit:o},ascending:this.ascending}}async loadRichCommitData(e,t,i){e.commits=[],e.authors=new Map;const s=await this.container.git.richSearchCommits(e.repoPath,{query:`${t?`#:${t} `:""}${(0,ye.v_)((0,ye.UI)(i,(e=>`#:${e.sha}`))," ")}`},{limit:0});if(null!=s)for(const t of s.commits.values())if(e.commits.push(t),e.authors.has(t.author.name)||e.authors.set(t.author.name,{author:t.author.name,avatarUrl:(await t.getAvatarUri()).toString(!0),email:t.author.email}),!e.authors.has(t.committer.name)){const i=await t.committer.getAvatarUri(t);e.authors.set(t.committer.name,{author:t.committer.name,avatarUrl:i.toString(!0),email:t.committer.email})}}}function av(e){const t="string"==typeof e?e:e.getText(),i=[];let s,r,n,o;for(;;){if(s=nv.exec(t),null==s)break;[,r,n,o]=s,i.push({index:s.index,action:ov.get(r)??"pick",sha:` ${n}`.substr(1),message:null==o||0===o.length?"":` ${o}`.substr(1)})}return i.reverse()}ev([(0,d.fF)({args:{0:e=>e.uri.toString(!0)}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),ev([(0,d.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),ev([(0,d.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),ev([(0,d.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),ev([(0,d.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),ev([(0,d.cM)({args:!1})],RebaseEditorProvider.prototype,"abort",1),ev([(0,d.cM)({args:!1})],RebaseEditorProvider.prototype,"disable",1),ev([(0,d.cM)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),ev([(0,d.cM)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),ev([(0,d.cM)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1),ev([(0,d.fF)({args:!1})],RebaseEditorProvider.prototype,"parseRebaseTodo",1),ev([(0,d.fF)({args:!1})],RebaseEditorProvider.prototype,"loadRichCommitData",1);class WebviewWithConfigBase extends tg{constructor(e,t,i,s,n,o,a,l){super(e,t,i,s,n,o,a,l),this.disposables.push(r.D.onDidChange(this.onConfigurationChanged,this),r.D.onDidChangeAny(this.onAnyConfigurationChanged,this))}onAnyConfigurationChanged(e){let t=!1;for(const i of this.customSettings.values())if(e.affectsConfiguration(i.name)){t=!0;break}t&&this.notifyDidChangeConfiguration()}onConfigurationChanged(e){this.notifyDidChangeConfiguration()}onViewStateChanged(e){super.onViewStateChanged(e),e.webviewPanel.active&&this.notifyDidChangeConfiguration()}onMessageReceivedCore(e){if(null!=e)switch(e.method){case qm.method:be.Yd.debug(`Webview(${this.id}).onMessageReceived: method=${e.method}`),Nm(qm,e,(async e=>{const t="workspace"===e.scope?s.ConfigurationTarget.Workspace:s.ConfigurationTarget.Global;let i;for(i in e.changes){let s=e.changes[i];if(cv(i)){const e=this.customSettings.get(i);null!=e&&"boolean"==typeof s&&await e.update(s);continue}const n=r.D.inspect(i);if(null!=s)if("workspace"===e.scope){if(s===n.workspaceValue)continue}else{if(s===n.globalValue&&s!==n.defaultValue)continue;s===n.defaultValue&&(s=void 0)}await r.D.update(i,s,t)}for(const i of e.removes)await r.D.update(i,void 0,t)}));break;case Qm.method:be.Yd.debug(`Webview(${this.id}).onMessageReceived: method=${e.method}`),Nm(Qm,e,(async t=>{switch(t.type){case"commit":case"commit-uncommitted":{const i=new A.aM(this.container,"~/code/eamodio/vscode-gitlens-demo","fe26af408293cba5b4bfd77306e1ac9ff7ccaef8",new A._j("You","eamodio@gmail.com",new Date("2016-11-12T20:41:00.000Z")),new A._j("You","eamodio@gmail.com",new Date("2020-11-01T06:57:21.000Z")),"commit-uncommitted"===t.type?"Uncommitted changes":"Supercharged",["3ac1d3f51d7cf5f438cc69f25f6740536ad80fef"],"commit-uncommitted"===t.type?"Uncommitted changes":"Supercharged",new D.K8("~/code/eamodio/vscode-gitlens-demo","code.ts",D.NV.Modified),void 0,[]);let s,n,o=!1;switch(t.key){case r.D.name("currentLine.format"):o=r.D.get("currentLine.pullRequests.enabled");break;case r.D.name("statusBar.format"):o=r.D.get("statusBar.pullRequests.enabled")}o&&(s=new mn.i7({id:"github",name:"GitHub",domain:"github.com",icon:"github"},{name:"Eric Amodio",avatarUrl:"https://avatars1.githubusercontent.com/u/641685?s=32&v=4",url:"https://github.com/eamodio"},"1","Supercharged","https://github.com/gitkraken/vscode-gitlens/pulls/1",mn.o0.Merged,new Date("Sat, 12 Nov 2016 19:41:00 GMT"),void 0,new Date("Sat, 12 Nov 2016 20:41:00 GMT")));try{n=CommitFormatter.fromTemplate(t.format,i,{dateFormat:r.D.get("defaultDateFormat"),pullRequestOrRemote:s,messageTruncateAtNewLine:!0})}catch{n="Invalid format"}await this.notify(jm,{preview:n},e.completionId)}}}));break;default:super.onMessageReceivedCore(e)}}get customSettings(){return null==this._customSettings&&(this._customSettings=new Map([["rebaseEditor.enabled",{name:"workbench.editorAssociations",enabled:()=>this.container.rebaseEditor.enabled,update:this.container.rebaseEditor.setEnabled}],["currentLine.useUncommittedChangesFormat",{name:"currentLine.useUncommittedChangesFormat",enabled:()=>null!=r.D.get("currentLine.uncommittedChangesFormat"),update:async e=>r.D.updateEffective("currentLine.uncommittedChangesFormat",e?"✏️ ${ago}":null)}]])),this._customSettings}getCustomSettings(){const e=Object.create(null);for(const[t,i]of this.customSettings)e[t]=i.enabled();return e}notifyDidChangeConfiguration(){return this.notify(Ym,{config:r.D.getAll(!0),customSettings:this.getCustomSettings()})}}const lv=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function cv(e){return lv.includes(e)}const hv=/.*?#(.*)/;class SettingsWebview extends WebviewWithConfigBase{constructor(e){super(e,"gitlens.settings","settings.html","images/gitlens-icon.png","GitLens Settings",`${c.zf.WebviewPrefix}settings`,"settingsWebview",c.Gh.ShowSettingsPage),this.disposables.push(...[c.Gh.ShowSettingsPageAndJumpToBranchesView,c.Gh.ShowSettingsPageAndJumpToCommitsView,c.Gh.ShowSettingsPageAndJumpToContributorsView,c.Gh.ShowSettingsPageAndJumpToFileHistoryView,c.Gh.ShowSettingsPageAndJumpToLineHistoryView,c.Gh.ShowSettingsPageAndJumpToRemotesView,c.Gh.ShowSettingsPageAndJumpToRepositoriesView,c.Gh.ShowSettingsPageAndJumpToSearchAndCompareView,c.Gh.ShowSettingsPageAndJumpToStashesView,c.Gh.ShowSettingsPageAndJumpToTagsView,c.Gh.ShowSettingsPageAndJumpToWorkTreesView,c.Gh.ShowSettingsPageAndJumpToViews,c.Gh.ShowSettingsPageAndJumpToCommitGraph,c.Gh.ShowSettingsPageAndJumpToAutolinks].map((e=>{let t;const i=hv.exec(e);return null!=i&&([,t]=i),(0,ki.xR)(e,((...e)=>this.onShowAnchorCommand(t,...e)),this)})))}onReady(){if(null!=this._pendingJumpToAnchor){const e=this._pendingJumpToAnchor;this._pendingJumpToAnchor=void 0,this.notify(zm,{anchor:e,scrollBehavior:"auto"})}}onShowAnchorCommand(e,...t){if(e){if(this.isReady&&this.visible)return void queueMicrotask((()=>{this.notify(zm,{anchor:e,scrollBehavior:"smooth"})}));this._pendingJumpToAnchor=e}this.onShowCommand(...t)}includeBootstrap(){const e=[["user","User"]];return s.workspace.workspaceFolders?.length&&e.push(["workspace","Workspace"]),{config:r.D.getAll(!0),customSettings:this.getCustomSettings(),scope:"user",scopes:e}}}class WelcomeWebview extends WebviewWithConfigBase{constructor(e){super(e,"gitlens.welcome","welcome.html","images/gitlens-icon.png","Welcome to GitLens",`${c.zf.WebviewPrefix}welcome`,"welcomeWebview",c.Gh.ShowWelcomePage)}includeBootstrap(){return{config:r.D.getAll(!0)}}}var uv=Object.defineProperty,dv=Object.getOwnPropertyDescriptor,pv=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?dv(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&uv(t,i,n),n};const mv=class{constructor(e,t,i,n,o){this._onReady=new s.EventEmitter,this.BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=r.D.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=r.D.get("defaultDateStyle")}},this.CommitDateFormatting={dateFormat:null,dateSource:te.Vn.Authored,dateStyle:te.Dn.Relative,reset:()=>{this.CommitDateFormatting.dateFormat=r.D.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=r.D.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=r.D.get("defaultDateStyle")}},this.CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,r.D.get("advanced.abbreviatedShaLength"))}},this.PullRequestDateFormatting={dateFormat:null,dateStyle:te.Dn.Relative,reset:()=>{this.PullRequestDateFormatting.dateFormat=r.D.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=r.D.get("defaultDateStyle")}},this.TagDateFormatting={dateFormat:null,dateStyle:te.Dn.Relative,reset:()=>{this.TagDateFormatting.dateFormat=r.D.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=r.D.get("defaultDateStyle")}},this._deactivating=!1,this._ready=!1,this._context=e,this._prerelease=i,this._version=n,this.ensureModeApplied(),e.subscriptions.splice(0,0,this._storage=t),e.subscriptions.splice(0,0,this._telemetry=new TelemetryService(this)),e.subscriptions.splice(0,0,this._usage=new UsageTracker(this,t)),e.subscriptions.splice(0,0,r.D.onWillChange(this.onConfigurationChanging,this)),this._richRemoteProviders=new RichRemoteProviderService(this);const a=new ServerConnection(this);e.subscriptions.splice(0,0,a),e.subscriptions.splice(0,0,this._subscriptionAuthentication=new SubscriptionAuthenticationProvider(this,a)),e.subscriptions.splice(0,0,this._subscription=new Bm(this,o)),e.subscriptions.splice(0,0,this._git=new GitProviderService(this)),e.subscriptions.splice(0,0,new GitFileSystemProvider(this)),e.subscriptions.splice(0,0,this._uri=new UriService(this)),e.subscriptions.splice(0,0,this._deepLinks=new DeepLinkService(this)),e.subscriptions.splice(0,0,this._actionRunners=new jp.AR(this)),e.subscriptions.splice(0,0,this._tracker=new Vt.rC(this)),e.subscriptions.splice(0,0,this._lineTracker=new GitLineTracker(this)),e.subscriptions.splice(0,0,this._keyboard=new Keyboard),e.subscriptions.splice(0,0,this._vsls=new VslsController(this)),e.subscriptions.splice(0,0,this._eventBus=new EventBus),e.subscriptions.splice(0,0,this._fileAnnotationController=new FileAnnotationController(this)),e.subscriptions.splice(0,0,this._lineAnnotationController=new LineAnnotationController(this)),e.subscriptions.splice(0,0,this._lineHoverController=new LineHoverController(this)),e.subscriptions.splice(0,0,this._statusBarController=new StatusBarController(this)),e.subscriptions.splice(0,0,this._codeLensController=new GitCodeLensController(this)),e.subscriptions.splice(0,0,this._settingsWebview=new SettingsWebview(this)),e.subscriptions.splice(0,0,this._timelineWebview=new TimelineWebview(this)),e.subscriptions.splice(0,0,this._welcomeWebview=new WelcomeWebview(this)),e.subscriptions.splice(0,0,this._rebaseEditor=new RebaseEditorProvider(this)),e.subscriptions.splice(0,0,this._graphWebview=new GraphWebview(this)),e.subscriptions.splice(0,0,this._focusWebview=new FocusWebview(this)),e.subscriptions.splice(0,0,new ViewFileDecorationProvider),e.subscriptions.splice(0,0,this._repositoriesView=new RepositoriesView(this)),e.subscriptions.splice(0,0,this._commitDetailsView=new CommitDetailsWebviewView(this)),e.subscriptions.splice(0,0,this._commitsView=new CommitsView(this)),e.subscriptions.splice(0,0,this._fileHistoryView=new FileHistoryView(this)),e.subscriptions.splice(0,0,this._lineHistoryView=new LineHistoryView(this)),e.subscriptions.splice(0,0,this._branchesView=new BranchesView(this)),e.subscriptions.splice(0,0,this._remotesView=new RemotesView(this)),e.subscriptions.splice(0,0,this._stashesView=new StashesView(this)),e.subscriptions.splice(0,0,this._tagsView=new TagsView(this)),e.subscriptions.splice(0,0,this._worktreesView=new WorktreesView(this)),e.subscriptions.splice(0,0,this._contributorsView=new ContributorsView(this)),e.subscriptions.splice(0,0,this._searchAndCompareView=new SearchAndCompareView(this)),e.subscriptions.splice(0,0,this._homeView=new HomeWebviewView(this)),e.subscriptions.splice(0,0,this._timelineView=new TimelineWebviewView(this)),r.D.get("terminalLinks.enabled")&&e.subscriptions.splice(0,0,this._terminalLinks=new GitTerminalLinkProvider(this)),e.subscriptions.splice(0,0,r.D.onDidChange((t=>{r.D.changed(t,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),r.D.get("terminalLinks.enabled")&&e.subscriptions.splice(0,0,this._terminalLinks=new GitTerminalLinkProvider(this)))})))}static#e;static#t=new Proxy({},{get:function(e,t){if(null!=mv.#e)return mv.#e[t];if("config"===t)return r.D.getAll();throw new Error("Container is not initialized")}});static create(e,t,i,s,r){if(null!=mv.#e)throw new Error("Container is already initialized");return mv.#e=new mv(e,t,i,s,r),mv.#e}static get instance(){return mv.#e??mv.#t}get onReady(){return this._onReady.event}deactivate(){this._deactivating=!0}get deactivating(){return this._deactivating}async ready(){if(this._ready)throw new Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask((()=>this._onReady.fire()))}async registerGitProviders(){const e=await async function(e){const t=ci(),s=[new LocalGitProvider(e,t),new VslsGitProvider(e,new VslsGit(t))];if(r.D.get("virtualRepositories.enabled")){const t=(await i.e(457).then(i.bind(i,5168))).GitHubGitProvider;s.push(new t(e))}return s}(this);for(const t of e)this._context.subscriptions.splice(0,0,this._git.register(t.descriptor.id,t));this._git.registrationComplete()}onConfigurationChanging(e){this._mode=void 0,r.D.changed(e,"outputLevel")&&(be.Yd.logLevel=(0,te.oE)(r.D.get("outputLevel"))),r.D.changed(e,"defaultGravatarsStyle")&&(0,Ze.Wr)(r.D.get("defaultGravatarsStyle")),r.D.changed(e,"mode")&&this.ensureModeApplied()}get actionRunners(){return null==this._actionRunners&&this._context.subscriptions.splice(0,0,this._actionRunners=new jp.AR(this)),this._actionRunners}get autolinks(){return null==this._autolinks&&this._context.subscriptions.splice(0,0,this._autolinks=new Autolinks(this)),this._autolinks}get codeLens(){return this._codeLensController}get branchesView(){return null==this._branchesView&&this._context.subscriptions.splice(0,0,this._branchesView=new BranchesView(this)),this._branchesView}get commitsView(){return null==this._commitsView&&this._context.subscriptions.splice(0,0,this._commitsView=new CommitsView(this)),this._commitsView}get commitDetailsView(){return null==this._commitDetailsView&&this._context.subscriptions.splice(0,0,this._commitDetailsView=new CommitDetailsWebviewView(this)),this._commitDetailsView}get context(){return this._context}get contributorsView(){return null==this._contributorsView&&this._context.subscriptions.splice(0,0,this._contributorsView=new ContributorsView(this)),this._contributorsView}get debugging(){return this._context.extensionMode===s.ExtensionMode.Development}get env(){if(this.prereleaseOrDebugging){const e=r.D.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}get events(){return this._eventBus}get fileAnnotations(){return this._fileAnnotationController}get fileHistoryView(){return null==this._fileHistoryView&&this._context.subscriptions.splice(0,0,this._fileHistoryView=new FileHistoryView(this)),this._fileHistoryView}get git(){return this._git}get uri(){return this._uri}get deepLinks(){return this._deepLinks}get github(){return null==this._github&&(this._github=this._loadGitHubApi()),this._github}async _loadGitHubApi(){try{const e=new((await i.e(457).then(i.bind(i,9616))).GitHubApi)(this);return this._context.subscriptions.splice(0,0,e),e}catch(e){return void be.Yd.error(e)}}get gitlab(){return null==this._gitlab&&(this._gitlab=this._loadGitLabApi()),this._gitlab}async _loadGitLabApi(){try{const e=new((await i.e(449).then(i.bind(i,1848))).GitLabApi)(this);return this._context.subscriptions.splice(0,0,e),e}catch(e){return void be.Yd.error(e)}}get homeView(){return null==this._homeView&&this._context.subscriptions.splice(0,0,this._homeView=new HomeWebviewView(this)),this._homeView}get id(){return this._context.extension.id}get integrationAuthentication(){return null==this._integrationAuthentication&&this._context.subscriptions.splice(0,0,this._integrationAuthentication=new IntegrationAuthenticationService(this),new um.z4(this),new dm.h(this)),this._integrationAuthentication}get keyboard(){return this._keyboard}get lineAnnotations(){return this._lineAnnotationController}get lineHistoryView(){return null==this._lineHistoryView&&this._context.subscriptions.splice(0,0,this._lineHistoryView=new LineHistoryView(this)),this._lineHistoryView}get lineHovers(){return this._lineHoverController}get lineTracker(){return this._lineTracker}get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}get rebaseEditor(){return null==this._rebaseEditor&&this._context.subscriptions.splice(0,0,this._rebaseEditor=new RebaseEditorProvider(this)),this._rebaseEditor}get remotesView(){return null==this._remotesView&&this._context.subscriptions.splice(0,0,this._remotesView=new RemotesView(this)),this._remotesView}get repositoriesView(){return null==this._repositoriesView&&this._context.subscriptions.splice(0,0,this._repositoriesView=new RepositoriesView(this)),this._repositoriesView}get searchAndCompareView(){return null==this._searchAndCompareView&&this._context.subscriptions.splice(0,0,this._searchAndCompareView=new SearchAndCompareView(this)),this._searchAndCompareView}get subscription(){return this._subscription}get subscriptionAuthentication(){return this._subscriptionAuthentication}get settingsWebview(){return this._settingsWebview}get graphWebview(){return this._graphWebview}get focusWebview(){return this._focusWebview}get richRemoteProviders(){return this._richRemoteProviders}get stashesView(){return null==this._stashesView&&this._context.subscriptions.splice(0,0,this._stashesView=new StashesView(this)),this._stashesView}get statusBar(){return this._statusBarController}get storage(){return this._storage}get tagsView(){return null==this._tagsView&&this._context.subscriptions.splice(0,0,this._tagsView=new TagsView(this)),this._tagsView}get telemetry(){return this._telemetry}get timelineView(){return this._timelineView}get timelineWebview(){return this._timelineWebview}get tracker(){return this._tracker}get usage(){return this._usage}get version(){return this._version}get viewCommands(){return null==this._viewCommands&&(this._viewCommands=new ViewCommands(this)),this._viewCommands}get vsls(){return this._vsls}get welcomeWebview(){return this._welcomeWebview}get worktreesView(){return null==this._worktreesView&&this._context.subscriptions.splice(0,0,this._worktreesView=new WorktreesView(this)),this._worktreesView}get mode(){return null==this._mode&&(this._mode=r.D.get("modes")?.[r.D.get("mode.active")]),this._mode}ensureModeApplied(){const e=this.mode;if(null!=e){if(null!=e.annotations){let t;switch(e.annotations){case"blame":t=c.Gh.ToggleFileBlame;break;case"changes":t=c.Gh.ToggleFileChanges;break;case"heatmap":t=c.Gh.ToggleFileHeatmap}if(null!=t){const i={type:e.annotations,on:!0};setTimeout(ki.P0,50,t,i)}}r.D.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(r.D.matches(`${e.annotations}.toggleMode`,t,i))return i=te.TF.Window;if(r.D.matches(e.annotations,t,i))return i.toggleMode=te.TF.Window,i}for(const s of["codeLens","currentLine","hovers","statusBar"])if(null!=e[s]){if(r.D.matches(`${s}.enabled`,t,i))return i=e[s];if(r.D.matches(s,t,i))return i.enabled=e[s],i}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode=te.TF.Window),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onChange:e=>{if(r.D.changed(e,["mode","modes"])){null==this._configAffectedByModeRegex&&(this._configAffectedByModeRegex=new RegExp(`^gitlens\\.(?:${r.D.name("mode")}|${r.D.name("modes")}|${r.D.name("blame")}|${r.D.name("changes")}|${r.D.name("heatmap")}|${r.D.name("codeLens")}|${r.D.name("currentLine")}|${r.D.name("hovers")}|${r.D.name("statusBar")})\\b`));const t=e.affectsConfiguration;e={...e,affectsConfiguration:(e,i)=>!!this._configAffectedByModeRegex.test(e)||t(e,i)}}return e}})}else r.D.clearOverrides()}};let gv=mv;function fv(e){return e instanceof gv}pv([(0,d.cM)()],gv.prototype,"registerGitProviders",1),pv([(0,se.H)()],gv.prototype,"debugging",1),pv([(0,se.H)()],gv.prototype,"env",1),pv([(0,se.H)()],gv.prototype,"id",1),pv([(0,se.H)()],gv.prototype,"prereleaseOrDebugging",1)},6631:(e,t,i)=>{i.d(t,{fw:()=>l,v:()=>c,ve:()=>a});var s=i(9496),r=i(5255);const n=new Map,o=new s.EventEmitter,a=o.event;function l(e,t){return n.get(e)??t}async function c(e,t){n.set(e,t),await s.commands.executeCommand(r.nA.SetContext,e,t),o.fire(e)}},9938:(e,t,i)=>{i.d(t,{X:()=>a});const s="";var r=i(4627);const n=/:([-+_a-z0-9]+):/g;let o;function a(e){return null==o&&(o=JSON.parse((0,r.QC)(s))),e.replace(n,((e,t)=>o[t]||e))}},3951:(e,t,i)=>{i.d(t,{Vu:()=>r,FB:()=>n,Vj:()=>o});const s=require("crypto");function r(){return(0,s.randomBytes)(16).toString("base64")}function n(e,t="hex"){return(0,s.createHash)("md5").update(e).digest(t)}function o(){return(0,s.randomUUID)()}},1177:(e,t,i)=>{i.d(t,{Nx:()=>c,a_:()=>h,he:()=>o.ZP});var s=i(7282),r=i(7310),n=i(6018),o=i(6292),a=i(5148),l=i(4336);function c(e){let t;const i=a.D.get("proxy");if(null!=i)t=i.url??void 0,e=e??i.strictSSL;else{"off"===a.D.getAny("http.proxySupport",void 0,"override")?e=e??!0:(e=e??a.D.getAny("http.proxyStrictSSL",void 0,!0),t=a.D.getAny("http.proxy")||s.env.HTTPS_PROXY||s.env.HTTP_PROXY)}return t?(l.Yd.debug(`Using https proxy: ${t}`),new n.HttpsProxyAgent({...r.parse(t),rejectUnauthorized:e})):!1===e?new n.HttpsProxyAgent({rejectUnauthorized:!1}):void 0}async function h(e,t){if("force"!==e)return t();const i=s.env.NODE_TLS_REJECT_UNAUTHORIZED;s.env.NODE_TLS_REJECT_UNAUTHORIZED="0";try{return await t()}finally{s.env.NODE_TLS_REJECT_UNAUTHORIZED=i}}},6150:(e,t,i)=>{function s(e){return Buffer.from(e,"utf8").toString("hex")}function r(e){return Buffer.from(e,"hex").toString("utf8")}i.d(t,{d:()=>r,e:()=>s})},4372:(e,t,i)=>{i.d(t,{a:()=>s.hrtime});var s=i(7282)},7338:(e,t,i)=>{i.d(t,{$L:()=>n,ED:()=>l,IJ:()=>o,Xf:()=>c});var s=i(7282),r=i(9496);const n=r.env.uiKind===r.UIKind.Web,o="linux"===s.platform,a="darwin"===s.platform,l="win32"===s.platform;function c(){return l?"windows":a?"macOS":o?"linux":n?"web":"unknown"}},4575:(e,t,i)=>{i.d(t,{$y:()=>AccessDeniedError,Bn:()=>ProviderRequestClientError,Jx:()=>r,MO:()=>ProviderNotFoundError,R5:()=>ExtensionNotFoundError,Ww:()=>ProviderRequestNotFoundError,Xq:()=>ProviderFetchError,_7:()=>AuthenticationError,dt:()=>AccountValidationError,kX:()=>OpenVirtualRepositoryError,sh:()=>n,yx:()=>ProviderRequestRateLimitError});var s=i(4968);class AccessDeniedError extends Error{constructor(e,t){let i;i=!1===e.account?.verified?"Email verification required":null!=t&&(0,s.aG)(t)?"Paid subscription required":"Subscription required",super(i),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}}class AccountValidationError extends Error{constructor(e,t,i,s){super(e+=`; status=${i}: ${s}`),this.original=t,this.statusCode=i,this.statusText=s,Error.captureStackTrace?.(this,AccountValidationError)}}var r=(e=>(e[e.UserDidNotConsent=1]="UserDidNotConsent",e[e.Unauthorized=2]="Unauthorized",e[e.Forbidden=3]="Forbidden",e))(r||{});class AuthenticationError extends Error{constructor(e,t,i){let s,r;if(null==t)s=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)s=t,r=void 0;else switch(r=t,r){case 1:s=`'${e}' authentication is required for this operation`;break;case 2:s=`Your '${e}' credentials are either invalid or expired`;break;case 3:s=`Your '${e}' credentials do not have the required access`}super(s),this.id=e,this.original=i,this.reason=r,Error.captureStackTrace?.(this,AuthenticationError)}}class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}}var n=(e=>(e[e.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",e[e.NotAGitHubRepository=2]="NotAGitHubRepository",e[e.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",e[e.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",e))(n||{});class OpenVirtualRepositoryError extends Error{constructor(e,t,i){let s,r;if(null==t)s=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)s=t,r=void 0;else switch(r=t,s=`Unable to open the virtual repository: ${e}; `,r){case 1:s+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:s+="Only GitHub repositories are supported currently";break;case 3:s+="Unable to get required GitHub authentication";break;case 4:s+="GitHub authentication is required"}super(s),this.original=i,this.reason=r,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}}class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${t.ok?"":`(${t.status}) ${t.statusText}. `}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}}class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}}class ProviderRequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestClientError)}}class ProviderRequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestNotFoundError)}}class ProviderRequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,ProviderRequestRateLimitError)}}},8887:(e,t,i)=>{i.d(t,{A:()=>s,x:()=>r});var s=(e=>(e.Stashes="stashes",e.Timeline="timeline",e.Worktrees="worktrees",e))(s||{}),r=(e=>(e.Timeline="timeline",e.Worktrees="worktrees",e.Graph="graph",e.Focus="focus",e))(r||{})},6592:(e,t,i)=>{i.d(t,{Nk:()=>WorktreeDeleteError,P6:()=>WorktreeCreateError,bk:()=>s,ef:()=>StashApplyError,hK:()=>r,l0:()=>GitSearchError,xe:()=>n});class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}}var s=(e=>(e[e.WorkingChanges=1]="WorkingChanges",e))(s||{});class StashApplyError extends Error{constructor(e,t){let i,s;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,s=void 0):(s=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=s,Error.captureStackTrace?.(this,StashApplyError)}static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}}var r=(e=>(e[e.AlreadyCheckedOut=1]="AlreadyCheckedOut",e[e.AlreadyExists=2]="AlreadyExists",e))(r||{});class WorktreeCreateError extends Error{constructor(e,t){let i,s;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,s=void 0;else switch(s=e,s){case 1:i="Unable to create worktree because it is already checked out";break;case 2:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=s,Error.captureStackTrace?.(this,WorktreeCreateError)}static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}}var n=(e=>(e[e.HasChanges=1]="HasChanges",e[e.MainWorkingTree=2]="MainWorkingTree",e))(n||{});class WorktreeDeleteError extends Error{constructor(e,t){let i,s;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,s=void 0;else switch(s=e,s){case 1:i="Unable to delete worktree because there are uncommitted changes";break;case 2:i="Unable to delete worktree because it is a main working tree"}super(i),this.original=t,this.reason=s,Error.captureStackTrace?.(this,WorktreeDeleteError)}static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}}},2380:(e,t,i)=>{i.d(t,{pq:()=>s,q4:()=>r});var s=(e=>(e.Git="git",e.GitHub="github",e.Vsls="vsls",e))(s||{}),r=(e=>(e.Private="private",e.Public="public",e.Local="local",e))(r||{})},7462:(e,t,i)=>{i.d(t,{Tg:()=>P,Wj:()=>C,YY:()=>b,uy:()=>A});var s=i(9496),r=i(6150),n=i(5255),o=i(9996),a=i(4298),l=i(4241),c=i(4488),h=i(1774),u=i(4336),d=i(3700),p=i(2509),m=i(439),g=i(4321),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?w(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&f(t,i,n),n};const y=class extends s.Uri{constructor(e,t){var i=(...e)=>{super(...e)};if(null==e)return void i({scheme:"unknown"});if(e.scheme===n.sN.GitLens){i({scheme:e.scheme,authority:e.authority,path:e.path,query:e.query,fragment:e.fragment});const s=function(e){return JSON.parse((0,r.d)(e))}(e.authority);this.repoPath=s.repoPath;let n=s.ref;return null!=t&&"string"!=typeof t&&(n=t.sha),void(!(0,g.rD)(n)&&(0,g.l3)(n)||(this.sha=n))}if((0,p.pt)(e)){i(e);const[,s,n]=e.path.split("/",3);this.repoPath=e.with({path:`/${s}/${n}`}).toString();const o=function(e){const[t,i]=e.authority.split("+");let s;if(i)try{s=JSON.parse((0,r.d)(i))}catch{}return{scheme:t,metadata:s}}(e);let a=o.metadata?.ref?.id;return null!=t&&"string"!=typeof t&&(a=t.sha),void(!a||!(0,g.rD)(a)&&(0,g.l3)(a)||(this.sha=a))}if(void 0===t)return void i(e);if("string"==typeof t)return i(e),void(this.repoPath=t);let s,a=e.authority,l=(0,d.AH)(o.W.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===l.charCodeAt(0)&&47===l.charCodeAt(1)){const e=l.indexOf("/",2);-1===e?(a=l.substring(2),l="/"):(a=l.substring(2,e),l=l.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":s=l?47!==l.charCodeAt(0)?`/${l}`:l:"/";break;default:s=47!==l.charCodeAt(0)?`/${l}`:l}i({scheme:e.scheme,authority:a,path:s,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,!(0,g.rD)(t.sha)&&(0,g.l3)(t.sha)||(this.sha=t.sha)}get directory(){return(0,d.Fd)(this.relativePath)}get fileName(){return(0,d.EZ)(this.relativePath)}get isUncommitted(){return(0,g.l3)(this.sha)}get isUncommittedStaged(){return(0,g.rD)(this.sha)}get relativePath(){return(0,d.uo)((0,d.M)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,g.zL)(this.sha)}documentUri(){return s.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!a.n.equals(this,e)&&this.sha===(A(e)?e.sha:void 0)}getFormattedFileName(e){return(0,h.d)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return o.W.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,s=!1){const r=o.W.instance.git.getAbsoluteUri("string"==typeof e?e:s&&e.originalPath||e.path,t);return new y(r,i?{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}:t)}static fromRepoPath(e,t){return new y(o.W.instance.git.getAbsoluteUri(e,e),t?{repoPath:e,sha:t}:e)}static fromRevisionUri(e){return new y(e)}static async fromUri(e){if(A(e))return e;if(!o.W.instance.git.isTrackable(e))return new y(e);if(e.scheme===n.sN.GitLens)return new y(e);if(e.scheme===n.sN.Git){let t;try{t=JSON.parse(e.query)}catch{}if(t?.path){const i=await o.W.instance.git.getOrOpenRepository(s.Uri.file(t.path));if(null==i)throw new Error(`Unable to find repository for uri=${s.Uri.file(t.path).toString(!0)}`);let r;switch(t.ref){case"":case"~":r=m.pw;break;case null:r=void 0;break;default:r=t.ref}const n={fileName:t.path,repoPath:i.path,sha:r};return new y(e,n)}}if(e.scheme===n.sN.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){const i=await o.W.instance.git.getOrOpenRepository(e);if(null==i)throw new Error(`Unable to find repository for uri=${s.Uri.file(t.fileName).toString(!0)}`);const r={fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit};return new y(e,r)}}const t=await o.W.instance.git.getOrOpenRepository(e);return new y(e,t?.path)}};let b=y;v([(0,c.H)()],b.prototype,"directory",1),v([(0,c.H)()],b.prototype,"fileName",1),v([(0,c.H)()],b.prototype,"isUncommitted",1),v([(0,c.H)()],b.prototype,"isUncommittedStaged",1),v([(0,c.H)()],b.prototype,"relativePath",1),v([(0,c.H)()],b.prototype,"shortSha",1),v([(0,c.H)()],b.prototype,"documentUri",1),v([(0,c.H)()],b.prototype,"toFileUri",1),v([(0,l.fF)({exit:e=>`returned ${u.Yd.toLoggable(e)}`})],b,"fromUri",1);const C=Object.freeze(new b);function A(e){return e instanceof b}function P(e){return(0,r.e)(JSON.stringify(e))}},5367:(e,t,i)=>{i.d(t,{BF:()=>D,Iq:()=>C,Lo:()=>P,S3:()=>A,Vx:()=>b,XI:()=>GitBranch,YF:()=>R,Yu:()=>y,g2:()=>k,uz:()=>S});var s=i(2540),r=i(9996),n=i(5148),o=i(7512),a=i(4241),l=i(4488),c=i(4336),h=i(7469),u=i(4627),d=i(4321),p=i(827),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor,f=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?g(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&m(t,i,n),n};const w=/\s/,v=/^(?=.*\bHEAD\b)?(?=.*\bdetached\b).*$/;var y=(e=>(e.Ahead="ahead",e.Behind="behind",e.Diverged="diverged",e.Local="local",e.MissingUpstream="missingUpstream",e.Remote="remote",e.UpToDate="upToDate",e.Unpublished="unpublished",e))(y||{});function b(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}class GitBranch{constructor(e,t,i,s,r,n,o,a=0,l=0,c=!1,h=!1){this.repoPath=e,this.name=t,this.remote=i,this.current=s,this.date=r,this.sha=n,this.rebasing=h,this.refType="branch",this.id=b(e,i,t),this.detached=c||!!this.current&&S(t),this.detached&&(this.name=C(this.sha)),this.upstream=null==o?.name||0===o.name.length?void 0:o,this.state={ahead:a,behind:l}}toString(){return`${(0,c.q4)(this)}(${this.id})`}get formattedDate(){return r.W.instance.BranchDateFormatting.dateStyle===s.Dn.Absolute?this.formatDate(r.W.instance.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}formatDate(e){return null!=this.date?(0,o.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,o.Zh)(this.date):""}async getAssociatedPullRequest(e){if(null==this._pullRequest){async function t(){const t=await this.getRemoteWithProvider();if(null==t)return;const i=this.getTrackingWithoutRemote()??this.getNameWithoutRemote();return r.W.instance.git.getPullRequestForBranch(i,t,e)}this._pullRequest=t.call(this)}return(0,h.HO)(this._pullRequest,e?.timeout)}getBasename(){const e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return-1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring(this.name.indexOf("/")+1):this.name}getTrackingWithoutRemote(){return this.upstream?.name.substring(this.upstream.name.indexOf("/")+1)}async getRemote(){const e=this.getRemoteName();if(null==e)return;const t=await r.W.instance.git.getRemotes(this.repoPath);return 0!==t.length?t.find((t=>t.name===e)):void 0}async getRemoteWithProvider(){const e=this.getRemoteName();if(null==e)return;const t=await r.W.instance.git.getRemotesWithProviders(this.repoPath);return 0!==t.length?t.find((t=>t.name===e)):void 0}getRemoteName(){return this.remote?P(this.name):null!=this.upstream?P(this.upstream.name):void 0}async getStatus(){if(this.remote)return"remote";if(null!=this.upstream)return this.upstream.missing?"missingUpstream":this.state.ahead&&this.state.behind?"diverged":this.state.ahead?"ahead":this.state.behind?"behind":"upToDate";return(await r.W.instance.git.getRemotesWithProviders(this.repoPath)).length>0?"unpublished":"local"}getTrackingStatus(e){return(0,p.JP)(this.upstream,this.state,e)}get starred(){const e=r.W.instance.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}star(){return r.W.instance.git.getRepository(this.repoPath)?.star(this)}unstar(){return r.W.instance.git.getRepository(this.repoPath)?.unstar(this)}}function C(e){return`(${(0,d.zL)(e)}...)`}function A(e){return e.substring(e.indexOf("/")+1)}function P(e){return e.substring(0,e.indexOf("/"))}function D(e){return e instanceof GitBranch}function S(e){return w.test(e)||v.test(e)}function k(e){const t=e.indexOf("/");return-1===t?[e,void 0]:[e.substring(t+1),e.substring(0,t)]}function R(e,t){switch((t={current:!0,orderBy:n.D.get("sortBranchesBy"),...t}).orderBy){case s.Vz.DateAsc:return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime())));case s.Vz.NameAsc:return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,u.dm)(e.name,i.name)));case s.Vz.NameDesc:return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,u.dm)(i.name,e.name)));case s.Vz.DateDesc:default:return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime())))}}f([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitBranch.prototype,"formatDate",1),f([(0,a.fF)()],GitBranch.prototype,"getAssociatedPullRequest",1),f([(0,l.H)()],GitBranch.prototype,"getBasename",1),f([(0,l.H)()],GitBranch.prototype,"getNameWithoutRemote",1),f([(0,l.H)()],GitBranch.prototype,"getTrackingWithoutRemote",1),f([(0,l.H)()],GitBranch.prototype,"getRemote",1),f([(0,l.H)()],GitBranch.prototype,"getRemoteWithProvider",1),f([(0,l.H)()],GitBranch.prototype,"getRemoteName",1),f([(0,l.H)()],GitBranch.prototype,"getStatus",1)},6450:(e,t,i)=>{i.d(t,{By:()=>S,G2:()=>D,_j:()=>GitCommitIdentity,aM:()=>A,f_:()=>P});var s=i(9496),r=i(8388),n=i(2540),o=i(5255),a=i(7512),l=i(5432),c=i(4488),h=i(4336),u=i(7469),d=i(4627),p=i(7462),m=i(439),g=i(7881),f=i(4321),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor,y=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?v(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&w(t,i,n),n};const b=/stash@{(\d+)}/,C=class{constructor(e,t,i,s,r,n,a,l,c,h,u,d,p,m){this.container=e,this.repoPath=t,this.sha=i,this.author=s,this.committer=r,this.parents=a,this._stashUntrackedFilesLoaded=!1,this._recomputeStats=!1,this.ref=this.sha,this.shortSha=this.sha.substring(0,this.container.CommitShaFormatting.length),this.tips=d,p?(this.refType="stash",this.stashName=p||void 0,this.stashOnRef=m||void 0,this.number=b.exec(p)?.[1]):this.refType="revision",null!=l?(this._message=l,this._summary=n!==l?`${n} ${o.NE.Ellipsis}`:n):this._summary=`${n} ${o.NE.Ellipsis}`,null!=h&&(this._stats=h),null!=c&&(Array.isArray(c)?this._files=c:c instanceof g.K8?this._file=c:(null!=c.file&&(this._file=c.file),null!=c.files&&(this._files=c.files)),this._recomputeStats=!0),null!=u?Array.isArray(u)?this.lines=u:this.lines=[u]:this.lines=[]}toString(){return`${(0,h.q4)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return this.container.CommitDateFormatting.dateSource===n.Vn.Committed?this.committer.date:this.author.date}get file(){return this._file}get files(){return this._files}get formattedDate(){return this.container.CommitDateFormatting.dateStyle===n.Dn.Absolute?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,f.l3)(this.sha)}get isUncommittedStaged(){return(0,f.rD)(this.sha)}get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}get summary(){return this._summary}get unresolvedPreviousSha(){const e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,f.j$)(e)?"HEAD":e}hasFullDetails(){return null!=this.message&&null!=this.files&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}assertsFullDetails(){if(!this.hasFullDetails())throw new Error(`GitCommit(${this.sha}) is not fully loaded`)}async ensureFullDetails(){if(this.hasFullDetails())return;if(this.isUncommitted){this._message="Uncommitted Changes";const e=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=e?.etagFileSystem,null!=this._etagFileSystem){const t=await this.container.git.getStatusForRepo(this.repoPath);null!=t&&(this._files=t.files.map((e=>new g.K8(this.repoPath,e.path,e.status,e.originalPath)))),this._etagFileSystem=e?.etagFileSystem}return void(null==this._files&&(this._files=null!=this.file?[this.file]:[]))}const[e,t]=await Promise.allSettled(["stash"!==this.refType?this.container.git.getCommit(this.repoPath,this.sha):void 0,"stash"!==this.refType||this._stashUntrackedFilesLoaded?void 0:this.container.git.getCommit(this.repoPath,`${this.stashName}^3`),this.getPreviousSha()]);let i;if("fulfilled"===e.status&&null!=e.value&&(i=e.value,this.parents.push(...i.parents??[]),this._summary=i.summary,this._message=i.message,this._files=i.files,null!=this._file)){const e=this._files.find((e=>e.path===this._file.path));null!=e&&(this._file=new g.K8(e.repoPath,e.path,e.status,e.originalPath??this._file.originalPath,e.previousSha??this._file.previousSha,e.stats??this._file.stats))}if("fulfilled"===t.status&&null!=t.value&&(this._stashUntrackedFilesLoaded=!0,i=t.value,null!=i?.files&&0!==i.files.length)){const e=i.files.map((e=>new g.K8(this.repoPath,e.path,g.Bh.Untracked,e.originalPath)));null==this._files?this._files=e:this._files.push(...e)}this._recomputeStats=!0}computeFileStats(){if(!this._recomputeStats||null==this._files)return;this._recomputeStats=!1;const e={added:0,deleted:0,changed:0};let t=0,i=0;for(const s of this._files)switch(null!=s.stats&&(t+=s.stats.additions,i+=s.stats.deletions),s.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,changedFiles:e,additions:t,deletions:i}}async findFile(e){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return;const t=this.container.git.getRelativePath(e,this.repoPath);return this._files?.find((e=>e.path===t))}formatDate(e){return this.container.CommitDateFormatting.dateSource===n.Vn.Committed?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return this.container.CommitDateFormatting.dateSource===n.Vn.Committed?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e){const t=this.stats;if(null==t)return e?.empty??"";const{changedFiles:i,additions:s,deletions:r}=t;if(S(i)<=0&&s<=0&&r<=0)return e?.empty??"";const{compact:n=!1,expand:a=!1,prefix:l="",sectionSeparator:c=` ${(0,d.vk)(o.NE.Dot,1,1,o.NE.Space)} `,separator:h=" ",suffix:u=""}=e??{};let p=l;if("number"==typeof i)i&&(p+=a?`${(0,d._6)("file",i)} changed`:`~${i}`);else{const{added:e,changed:t,deleted:r}=i;e?p+=a?`${(0,d._6)("file",e)} added`:`+${e}`:a||n||(p+="+0"),t?p+=`${e?h:""}${a?`${(0,d._6)("file",t)} changed`:`~${t}`}`:a||n||(p+="~0"),r?p+=`${t|s?h:""}${a?`${(0,d._6)("file",r)} deleted`:`-${r}`}`:a||n||(p+="-0")}return a&&(s&&(p+=`${i?c:""}${(0,d._6)("addition",s)}`),r&&(p+=`${i||s?h:""}${(0,d._6)("deletion",r)}`)),p+=u,p}async getAssociatedPullRequest(e){if(null==this._pullRequest){async function t(){const t=e?.remote??await this.container.git.getBestRemoteWithRichProvider(this.repoPath);if(null!=t?.provider)return this.container.git.getPullRequestForCommit(this.ref,t,e)}this._pullRequest=t.call(this)}return(0,u.HO)(this._pullRequest,e?.timeout)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e){const t="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,i=await this.findFile(t);if(null==i)return;return this.with({files:{file:i}})}async getCommitsForFiles(){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return[];const e=this._files?.map((e=>this.with({files:{file:e}})));return e??[]}getGitUri(e=!1){const t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new p.YY(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new p.YY(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.getPreviousComparisonUrisForLine(this.repoPath,this.file.uri,e,t??(this.sha===m.CL?void 0:this.sha)):Promise.resolve(void 0)}async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,f.D3)(this.file.previousSha))return this.file.previousSha;const e=await this.container.git.resolveReference(this.repoPath,(0,f.l3)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}const e=this.parents[0];if(null!=e&&(0,f.D3)(e))return e;const t=await this.container.git.resolveReference(this.repoPath,(0,f.l3)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.hasCommitBeenPushed(this.repoPath,this.ref)}with(e){let t;return null!=e.files?(t={file:this._file,files:this._files},null!=e.files.file?t.file=e.files.file:null===e.files.file&&(t.file=void 0),null!=e.files.files?t.files=e.files.files:null===e.files.files&&(t.files=void 0)):null===e.files&&(t=void 0),new C(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,t,this.stats,this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}};let A=C;function P(e){return e instanceof A}function D(e){return e instanceof A&&"stash"===e.refType&&Boolean(e.stashName)}y([(0,c.H)()],A.prototype,"isUncommitted",1),y([(0,c.H)()],A.prototype,"isUncommittedStaged",1),y([(0,l.H)()],A.prototype,"ensureFullDetails",1),y([(0,c.H)()],A.prototype,"getGitUri",1),y([(0,c.H)(((e,t)=>`${e}|${t??""}`))],A.prototype,"getPreviousComparisonUrisForLine",1),y([(0,l.H)()],A.prototype,"isPushed",1);class GitCommitIdentity{constructor(e,t,i,s){this.name=e,this.email=t,this.date=i,this.avatarUrl=s}formatDate(e){return(0,a.p6)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,a.Zh)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?s.Uri.parse(this.avatarUrl):(0,r.oP)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?s.Uri.parse(this.avatarUrl):(0,r.x4)(this.email,e)}}function S(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}y([(0,c.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitCommitIdentity.prototype,"formatDate",1)},439:(e,t,i)=>{i.d(t,{CL:()=>r,Ii:()=>s,pw:()=>n});const s="0000000000000000000000000000000000000000-",r="0000000000000000000000000000000000000000",n="0000000000000000000000000000000000000000:"},1719:(e,t,i)=>{i.d(t,{V:()=>p});var s=i(9496),r=i(8388),n=i(2540),o=i(5148),a=i(7512),l=i(4488),c=i(4627),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor;const d=class{constructor(e,t,i,s,r,n=!1,o,a,l,c){this.repoPath=e,this.name=t,this.email=i,this.count=s,this.date=r,this.current=n,this.stats=o,this.username=a,this.avatarUrl=l,this.id=c}static is(e){return e instanceof d}static sort(e,t){switch((t={current:!0,orderBy:o.D.get("sortContributorsBy"),...t}).orderBy){case n.iP.CountAsc:return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.count-t.count||(e.date?.getTime()??0)-(t.date?.getTime()??0)));case n.iP.DateDesc:return e.sort(((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(i.date?.getTime()??0)-(e.date?.getTime()??0)||i.count-e.count));case n.iP.DateAsc:return e.sort(((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.date?.getTime()??0)-(i.date?.getTime()??0)||i.count-e.count));case n.iP.NameAsc:return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,c.dm)(e.name??e.username,t.name??t.username)));case n.iP.NameDesc:return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,c.dm)(t.name??t.username,e.name??e.username)));case n.iP.CountDesc:default:return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||t.count-e.count||(t.date?.getTime()??0)-(e.date?.getTime()??0)))}}get label(){return this.name??this.username}formatDate(e){return null!=this.date?(0,a.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.date?(0,a.Zh)(this.date,e):""}getAvatarUri(e){return null!=this.avatarUrl?s.Uri.parse(this.avatarUrl):(0,r.oP)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};let p=d;((e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&h(t,i,n)})([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],p.prototype,"formatDate",1)},7881:(e,t,i)=>{i.d(t,{Bh:()=>m,Gv:()=>w,K8:()=>k,K9:()=>D,NV:()=>p,OC:()=>g,PM:()=>f,Qw:()=>A,Vz:()=>d,W5:()=>v,tK:()=>b});var s=i(5255),r=i(9996),n=i(4488),o=i(1774),a=i(3700),l=i(4627),c=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?h(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&c(t,i,n),n},d=(e=>(e.AddedByBoth="AA",e.AddedByUs="AU",e.AddedByThem="UA",e.DeletedByBoth="DD",e.DeletedByUs="DU",e.DeletedByThem="UD",e.ModifiedByBoth="UU",e))(d||{}),p=(e=>(e.Modified="M",e.Added="A",e.Deleted="D",e.Renamed="R",e.Copied="C",e.Unchanged=".",e.Untracked="?",e.Ignored="!",e.UpdatedButUnmerged="U",e))(p||{}),m=(e=>(e.Modified="M",e.Added="A",e.Deleted="D",e.Untracked="?",e.Ignored="!",e))(m||{});function g(e,t=!1,i){const r=(0,a.Fd)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${r} ${(0,l.vk)(s.NE.ArrowLeft,1,1)} ${e.originalPath}`:r}function f(e,t={}){return(0,o.d)(e.path,t)}function w(e,t){return e.originalPath?(0,a.uo)(e.originalPath,t)[0]:""}function v(e,t){return(0,a.uo)(e.path,t)[0]}const y={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function b(e){return y[e]??"icon-status-unknown.svg"}const C={".":void 0,"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",C:"$(diff-added)",AA:"$(warning)",AU:"$(warning)",UA:"$(warning)",DD:"$(warning)",DU:"$(warning)",UD:"$(warning)",UU:"$(warning)",T:"$(diff-modified)",U:"$(diff-modified)"};function A(e,t=s.NE.Space.repeat(4)){return C[e]??t}const P={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function D(e){return P[e]??"Unknown"}const S=class{constructor(e,t,i,s,r,n){this.repoPath=e,this.path=t,this.status=i,this.originalPath=s,this.previousSha=r,this.stats=n}static is(e){return e instanceof S}get hasConflicts(){switch(this.status){case"UA":case"AU":case"AA":case"UD":case"DU":case"DD":case"UU":return!0;default:return!1}}get uri(){return r.W.instance.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?r.W.instance.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return r.W.instance.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e){if(null==this.stats)return e?.empty??"";const{additions:t,deletions:i}=this.stats;if(t<0&&i<0)return e?.empty??"";const{compact:s=!1,expand:r=!1,prefix:n="",separator:o=" ",suffix:a=""}=e??{};let c=n;return t?c+=r?`${(0,l._6)("line",t)} added`:`+${t}`:r||s||(c+="+0"),i?c+=`${t?o:""}${r?`${(0,l._6)("line",i)} deleted`:`-${i}`}`:r||s||(c+="-0"),c+=a,c}};let k=S;u([(0,n.H)()],k.prototype,"uri",1),u([(0,n.H)()],k.prototype,"originalUri",1),u([(0,n.H)()],k.prototype,"getWorkingUri",1)},5069:(e,t,i)=>{i.d(t,{e:()=>s});var s=(e=>(e.Commit="commit-node",e.MergeCommit="merge-node",e.Stash="stash-node",e.Working="work-dir-changes",e.Conflict="merge-conflict-node",e.Rebase="unsupported-rebase-warning-node",e))(s||{})},8452:(e,t,i)=>{i.d(t,{$9:()=>Issue,Gj:()=>o,Ty:()=>a,mX:()=>n,sy:()=>l,xX:()=>c,y$:()=>h});var s=i(9496),r=i(5255),n=(e=>(e.Issue="Issue",e.PullRequest="PullRequest",e))(n||{});function o(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed}}function a(e){return"PullRequest"===e.type?e.closed?`<span class="codicon codicon-git-pull-request" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-git-pull-request" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`:e.closed?`<span class="codicon codicon-pass" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`}function l(e){return"PullRequest"===e.type?e.closed?`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-pull-request)</span>`:`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`:e.closed?`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`}function c(e){return"PullRequest"===e.type?e.closed?new s.ThemeIcon("git-pull-request",new s.ThemeColor(r.wL.MergedPullRequestIconColor)):new s.ThemeIcon("git-pull-request",new s.ThemeColor(r.wL.OpenPullRequestIconColor)):e.closed?new s.ThemeIcon("pass",new s.ThemeColor(r.wL.ClosedAutolinkedIssueIconColor)):new s.ThemeIcon("issues",new s.ThemeColor(r.wL.OpenAutolinkedIssueIconColor))}function h(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,updatedDate:e.updatedDate,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},repository:{owner:e.repository.owner,repo:e.repository.repo},assignees:e.assignees.map((e=>({name:e.name,avatarUrl:e.avatarUrl,url:e.url}))),labels:null==e.labels?void 0:e.labels.map((e=>({color:e.color,name:e.name}))),commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount}}class Issue{constructor(e,t,i,s,r,n,o,a,l,c,h,u,d,p){this.provider=e,this.id=t,this.title=i,this.url=s,this.date=r,this.closed=n,this.updatedDate=o,this.author=a,this.repository=l,this.assignees=c,this.closedDate=h,this.labels=u,this.commentsCount=d,this.thumbsUpCount=p,this.type="Issue"}}},4092:(e,t,i)=>{i.d(t,{Cz:()=>g,i7:()=>v,l1:()=>f,o0:()=>p,pD:()=>m});var s=i(9496),r=i(2540),n=i(5255),o=i(9996),a=i(7512),l=i(4488),c=i(8452),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&h(t,i,n),n},p=(e=>(e.Open="Open",e.Closed="Closed",e.Merged="Merged",e))(p||{}),m=(e=>(e.Approved="Approved",e.ChangesRequested="ChangesRequested",e.ReviewRequired="ReviewRequired",e))(m||{}),g=(e=>(e.Unknown="Unknown",e.Mergeable="Mergeable",e.Conflicting="Conflicting",e))(g||{});function f(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,comments:e.comments,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees}}const w=class{constructor(e,t,i,s,r,n,o,a,l,h,u,d,p,m,g,f,w,v){this.provider=e,this.author=t,this.id=i,this.title=s,this.url=r,this.state=n,this.date=o,this.closedDate=a,this.mergedDate=l,this.mergeableState=h,this.refs=u,this.isDraft=d,this.additions=p,this.deletions=m,this.comments=g,this.reviewDecision=f,this.reviewRequests=w,this.assignees=v,this.type=c.mX.PullRequest}static is(e){return e instanceof w}static getMarkdownIcon(e){switch(e.state){case"Open":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;case"Closed":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"Merged":return`<span style="color:${s.window.activeColorTheme.kind===s.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;default:return"$(git-pull-request)"}}static getThemeIcon(e){switch(e.state){case"Open":return new s.ThemeIcon("git-pull-request",new s.ThemeColor(n.wL.OpenPullRequestIconColor));case"Closed":return new s.ThemeIcon("git-pull-request-closed",new s.ThemeColor(n.wL.ClosedPullRequestIconColor));case"Merged":return new s.ThemeIcon("git-merge",new s.ThemeColor(n.wL.MergedPullRequestIconColor));default:return new s.ThemeIcon("git-pull-request")}}get closed(){return"Closed"===this.state}get formattedDate(){return o.W.instance.PullRequestDateFormatting.dateStyle===r.Dn.Absolute?this.formatDate(o.W.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,a.p6)(this.mergedDate??this.closedDate??this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,a.Zh)(this.mergedDate??this.closedDate??this.date)}formatClosedDate(e){return null==this.closedDate?"":(0,a.p6)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,a.Zh)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,a.p6)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,a.Zh)(this.mergedDate)}formatUpdatedDate(e){return(0,a.p6)(this.date,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,a.Zh)(this.date)}};let v=w;d([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],v.prototype,"formatDate",1),d([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],v.prototype,"formatClosedDate",1),d([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],v.prototype,"formatMergedDate",1),d([(0,l.H)((e=>e??"MMMM Do, YYYY h:mma"))],v.prototype,"formatUpdatedDate",1)},4321:(e,t,i)=>{i.d(t,{Av:()=>R,D3:()=>w,FT:()=>$,LB:()=>S,Nn:()=>T,UR:()=>F,Wh:()=>_,gA:()=>I,j$:()=>b,l3:()=>y,oI:()=>g,pZ:()=>x,qj:()=>k,rD:()=>C,t6:()=>P,xB:()=>D,yk:()=>f,yo:()=>v,zL:()=>A});var s=i(5255),r=i(5148),n=i(5367),o=i(439);const a=/^(\S*?)(\.\.\.?)(\S*)\s*$/,l=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,c=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,h=/(^[0-9a-f]{40})\^[0-3]?$/,u=/^(.*?)([\^@~:].*)?$/,d=/^[0]{40}(?:[\^@~:]\S*)?:?$/,p=/^[0]{40}([\^@~]\S*)?:$/;function m(e,t){return!!t&&e.test(t)}function g(e,t,i=".."){return`${e??""}${i}${t??""}`}function f(e){return e?.includes("..")??!1}function w(e){return m(c,e)}function v(e){return m(l,e)}function y(e,t=!1){return e===o.CL||e===o.pw||!t&&m(d,e)}function b(e){return e===`${o.CL}^`||e===`${o.pw}^`}function C(e,t=!1){return e===o.pw||!t&&m(p,e)}function A(e,t){if(e===o.Ii)return"(deleted)";if(!e)return t?.strings?.working??"";if(y(e))return C(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(f(e))return e;if(!t?.force&&!v(e))return e;const i=Math.max(5,r.D.get("advanced.abbreviatedShaLength")),s=u.exec(e);if(null!=s){const[,e,t]=s;if(null!=t)return`${e.substr(0,i)}${t}`}return e.substr(0,i)}function P(e){const t=a.exec(e);if(null==t)return;const[,i,s,r]=t;return{ref1:i,notation:s,ref2:r}}function D(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,name:i.name,number:i.number,message:i.message};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id};default:return{refType:"revision",repoPath:t,ref:e,name:i.name??A(e,{force:!0,strings:{working:"Working Tree"}}),message:i.message}}}function S(e){return D(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream})}function k(e){return"stash"===e.refType?D(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.number,message:e.message}):D(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:e.message})}function R(e){return"branch"===e.refType&&e.remote?(0,n.S3)(e.name):e.name}function F(e){return"branch"===e?.refType}function $(e){return"revision"===e?.refType}function T(e){return"revision"===e?.refType&&f(e.ref)}function x(e){return"stash"===e?.refType||"revision"===e?.refType&&Boolean(e?.stashName)}function I(e){return"tag"===e?.refType}function _(e,t){if(null==e)return"";let i;if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){const r=Array.isArray(e)?e[0]:e;let o=t?.quoted?`'${r.name}'`:r.name;switch(r.refType){case"branch":r.remote&&(o=`${(0,n.Lo)(o)}: ${(0,n.S3)(o)}`,o=t?.quoted?`'${o}'`:o),i=`${t.label?(r.remote?"remote ":"")+"branch ":""}${t.icon?`$(git-branch)${s.NE.Space}${o}`:o}`;break;case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${s.NE.Space}${o}`:o}`;break;default:if(x(r)){let e;t.expand&&r.message&&(e=`${null!=r.number?`${r.number}: `:""}${r.message.length>20?`${r.message.substring(0,20).trimRight()}${s.NE.Ellipsis}`:r.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${s.NE.Space}${e??r.name}`:`${e??r.number??r.name}`}`}else if(f(r.ref))i=o;else{let e,n;t.expand&&r.message&&(e=r.message.length>20?` (${r.message.substring(0,20).trimRight()}${s.NE.Ellipsis})`:` (${r.message})`),t.expand&&t.label&&function(e){return m(h,e)}(r.ref)?(o=r.name.endsWith("^")?r.name.substr(0,r.name.length-1):r.name,t?.quoted&&(o=`'${o}'`),n="before "):n="",i=`${t.label?`${n}commit `:""}${t.icon?`$(git-commit)${s.NE.Space}${o}${e??""}`:`${o}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?`${i[0].toLocaleUpperCase()}${i.substring(1)}`:i}const r=t.expand?` (${e.map((e=>e.name)).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${r}`;case"tag":return`${e.length} tags${r}`;default:return`${e.length} ${x(e[0])?"stashes":"commits"}${r}`}}},3050:(e,t,i)=>{i.d(t,{XG:()=>d,Ym:()=>w,dM:()=>f,jv:()=>g,ss:()=>m});var s=i(9496),r=i(5255),n=i(9996),o=i(4488),a=i(4627),l=i(2509),c=i(4794),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e=>(e.Fetch="fetch",e.Push="push",e))(d||{});const p=class{constructor(e,t,i,s,r,n,o,a){this.repoPath=e,this.id=t,this.name=i,this.scheme=s,this.domain=r,this.path=n,this.provider=o,this.urls=a}static getHighlanderProviders(e){if(0===e.length)return;const t=1===e.length?e[0]:e.find((e=>e.default));if(null!=t)return[t.provider];const i=e[0].provider.name;return e.every((e=>e.provider.name===i))?e.map((e=>e.provider)):void 0}static getHighlanderProviderName(e){if(0===e.length)return;const t=1===e.length?e[0]:e.find((e=>e.default));if(null!=t)return t.provider.name;const i=e[0].provider.name;return e.every((e=>e.provider.name===i))?i:void 0}static is(e){return e instanceof p}static sort(e){return e.sort(((e,t)=>(e.default?-1:1)-(t.default?-1:1)||("origin"===e.name?-1:1)-("origin"===t.name?-1:1)||("upstream"===e.name?-1:1)-("upstream"===t.name?-1:1)||(0,a.dm)(e.name,t.name)))}get default(){const e=n.W.instance.storage.getWorkspace("remote:default");return this.id===e}get url(){let e;for(const t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}hasRichProvider(){return this.provider?.hasRichIntegration()??!1}matches(e,t){if(null==t){if((0,a.qq)(e,this.url))return!0;[,e,t]=(0,c.Sk)(e)}return(0,a.qq)(e,this.domain)&&(0,a.qq)(t,this.path)}async setAsDefault(e=!0){const t=n.W.instance.git.getRepository(this.repoPath);await(t?.setRemoteAsDefault(this,e))}};let m=p;function g(e){const t=function(e){let t,i,s;for(const{type:t}of e.urls)if("fetch"===t){if(i=!0,s)break}else if("push"===t&&(s=!0,i))break;return t=i&&s?r.NE.ArrowsRightLeft:s?r.NE.ArrowRight:i?r.NE.ArrowLeft:r.NE.Dash,t}(e),{provider:i}=e;return null!=i?`${t}${r.NE.Space} ${i.name} ${r.NE.Space}${r.NE.Dot}${r.NE.Space} ${i.displayPath}`:`${t}${r.NE.Space} ${e.domain?`${e.domain} ${r.NE.Space}${r.NE.Dot}${r.NE.Space} `:""}${e.path}`}function f(e,t,i,r=s.window.activeColorTheme){if(null==t.provider?.icon)return;const n=s.Uri.joinPath(e.context.extensionUri,`images/${(0,l.GC)(r)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(n):n}function w(e){return Array.isArray(e)?e.map((e=>e.id)).sort().join(","):e.id}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&h(t,i,n)})([(0,o.H)()],m.prototype,"url",1)},6503:(e,t,i)=>{i.d(t,{C:()=>r,J:()=>s});var s=(e=>(e.Branch="branch",e.Branches="branches",e.Commit="commit",e.Comparison="comparison",e.CreatePullRequest="createPullRequest",e.File="file",e.Repo="repo",e.Revision="revision",e))(s||{});function r(e){switch(e.type){case"branch":return"Branch";case"branches":return"Branches";case"commit":return"Commit";case"comparison":return"Comparison";case"createPullRequest":return"Create Pull Request";case"file":case"revision":return"File";case"repo":return"Repository";default:return""}}},1529:(e,t,i)=>{i.d(t,{_j:()=>W,I6:()=>E,du:()=>M,uC:()=>L});var s=i(9496),r=i(3951),n=i(5640),o=i(5255),a=i(7925),l=i(2133),c=i(2800),h=i(9529),u=i(5148),d=i(7512),p=i(5432),m=i(4241),g=i(4486),f=i(3105),w=i(4336),v=i(6004),y=i(9967),b=i(3700),C=i(9996),A=i(2509);let P,D;const S="GitLens";function k(e,t,i,r=!1){const n=(null==P&&(P=s.window.createTerminal(S),D=s.window.onDidCloseTerminal((e=>{e.name===S&&(P=void 0,D?.dispose(),D=void 0)})),C.W.instance.context.subscriptions.push(D)),P);n.show(!1);const o=u.D.get("terminal.overrideGitEditor")?`-c "core.editor=${(0,A._L)()}" `:"";n.sendText(`git -C "${i}" ${o}${e} ${t}`,r)}var R=i(7552),F=i(5367),$=i(4321),T=Object.defineProperty,x=Object.getOwnPropertyDescriptor,I=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?x(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&T(t,i,n),n};const _=Object.freeze([]),O=36e5,B=864e5;var E=(e=>(e[e.Unknown=-1]="Unknown",e[e.Index=0]="Index",e[e.Head=1]="Head",e[e.Heads=2]="Heads",e[e.Tags=3]="Tags",e[e.Stash=4]="Stash",e[e.Remotes=5]="Remotes",e[e.Worktrees=6]="Worktrees",e[e.Config=7]="Config",e[e.Status=8]="Status",e[e.CherryPick=9]="CherryPick",e[e.Merge=10]="Merge",e[e.Rebase=11]="Rebase",e[e.Closed=100]="Closed",e[e.Ignores=101]="Ignores",e[e.RemoteProviders=102]="RemoteProviders",e[e.Starred=103]="Starred",e))(E||{}),M=(e=>(e[e.Any=0]="Any",e[e.All=1]="All",e[e.Exclusive=2]="Exclusive",e))(M||{});class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}toString(e=!1){return e?`changes=${(0,f.v_)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,f.v_)(this._changes,", ")} }`}changed(...e){const t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,f.G)(this._changes,(e=>t.includes(e)));let s=this._changes;2===i&&(t.includes(9)||t.includes(10)||t.includes(11)?t.includes(8)||t.push(8):t.includes(8)&&(s=new Set(s),s.delete(9),s.delete(10),s.delete(11)));const r=[...(0,f.hX)(s,(e=>t.includes(e)))];return 2===i?r.length===s.size:r.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}}let W=class{constructor(e,t,i,r,n,o,a,c=!1){if(this.container=e,this.onDidRepositoryChange=t,this.provider=i,this.folder=r,this.uri=n,this.root=o,this._onDidChange=new s.EventEmitter,this._onDidChangeFileSystem=new s.EventEmitter,this._fireChangeDebounced=void 0,this._fireFileSystemChangeDebounced=void 0,this._fsWatchCounter=0,this._updatedAt=0,this._closed=!1,null!=(r=s.workspace.getWorkspaceFolder(n)??r))if(o)this.name=r.name;else{const t=e.git.getRelativePath(n,r.uri);this.name=t||r.name}else this.name=(0,b.EZ)(n.path);this.index=r?.index??e.git.repositoryCount,this.id=(0,l.YW)(n),this._suspended=a,this._closed=c,this._disposable=s.Disposable.from(this.setupRepoWatchers(),u.D.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}static formatLastFetched(e,t=!0){const i=new Date(e);if(Date.now()-e<B)return(0,d.Zh)(i);if(t)return(0,d.p6)(i,u.D.get("defaultDateShortFormat")??"short");let s=u.D.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${u.D.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(s)||(s+=` [at] ${u.D.get("defaultTimeFormat")??"h:mma"}`),(0,d.p6)(i,s)}static getLastFetchedUpdateInterval(e){const t=Date.now()-e;return t<B?(t<O?6e4:O)/2:0}static sort(e){return e.sort(((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index))}get onDidChange(){return this._onDidChange.event}get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}get formattedName(){return this.name}get idHash(){return void 0===this._idHash&&(this._idHash=(0,r.FB)(this.id)),this._idHash}setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then((t=>e=t)),{dispose:()=>{e?.dispose()}}}async setupRepoWatchersCore(){const e=[];e.push(this.container.events.on("git:cache:reset",(e=>{e.data.repoPath&&e.data.repoPath!==this.path||this.resetCaches(...e.data.caches??_)})));const t=s.workspace.createFileSystemWatcher(new s.RelativePattern(this.uri,"**/.gitignore"));function i(t,i){const r=s.workspace.createFileSystemWatcher(new s.RelativePattern(t,i));return e.push(r,r.onDidChange((e=>this.onRepositoryChanged(e,t))),r.onDidCreate((e=>this.onRepositoryChanged(e,t))),r.onDidDelete((e=>this.onRepositoryChanged(e,t)))),r}e.push(t,t.onDidChange(this.onGitIgnoreChanged,this),t.onDidCreate(this.onGitIgnoreChanged,this),t.onDidDelete(this.onGitIgnoreChanged,this));const r=await this.getGitDir();return null!=r&&(null==r?.commonUri?i.call(this,r.uri,"{index,HEAD,*_HEAD,MERGE_*,config,refs/**,rebase-merge/**,sequencer/**,worktrees/**}"):(i.call(this,r.uri,"{index,HEAD,*_HEAD,MERGE_*,rebase-merge/**,sequencer/**}"),i.call(this,r.commonUri,"{config,refs/**,worktrees/**}"))),s.Disposable.from(...e)}dispose(){this.stopWatchingFileSystem(),this._remotesDisposable?.dispose(),this._disposable.dispose()}toString(){return`${(0,w.q4)(this)}(${this.id})`}get virtual(){return this.provider.virtual}get path(){return this.uri.scheme===o.sN.File?(0,b.AH)(this.uri.fsPath):this.uri.toString()}get etag(){return this._updatedAt}get updatedAt(){return this._updatedAt}onConfigurationChanged(e){u.D.changed(e,"remotes",this.folder?.uri)&&(this._providers=(0,R.v)(u.D.get("remotes",this.folder?.uri??null)),null!=e&&(this.resetCaches("remotes"),this.fireChange(5)))}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0;const i=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=i)switch(i[1]){case"config":return this.resetCaches(),void this.fireChange(7,5);case"index":return void this.fireChange(0);case"FETCH_HEAD":return;case"HEAD":return this.resetCaches("branches"),void this.fireChange(1,2);case"ORIG_HEAD":case"refs/heads":return this.resetCaches("branches"),void this.fireChange(2);case"CHERRY_PICK_HEAD":return void this.fireChange(9,8);case"MERGE_HEAD":return void this.fireChange(10,8);case"REBASE_HEAD":case"rebase-merge":return void this.fireChange(11,8);case"refs/remotes":return this.resetCaches(),void this.fireChange(5);case"refs/stash":return void this.fireChange(4);case"refs/tags":return void this.fireChange(3);case"worktrees":return void this.fireChange(6)}this.fireChange(-1)}get closed(){return this._closed}set closed(e){const t=this._closed!==e;this._closed=e,t&&this.fireChange(100)}access(e){return this.container.git.access(e,this.uri)}supports(e){return this.container.git.supports(this.uri,e)}async addRemote(e,t,i){await this.container.git.addRemote(this.path,e,t,i);const[s]=await this.getRemotes({filter:e=>e.url===t});return s}pruneRemote(e){return this.container.git.pruneRemote(this.path,e)}removeRemote(e){return this.container.git.removeRemote(this.path,e)}branch(...e){this.runTerminalCommand("branch",...e)}branchDelete(e,t){Array.isArray(e)||(e=[e]);const i=e.filter((e=>!e.remote));if(0!==i.length){const s=["--delete"];if(t?.force&&s.push("--force"),this.runTerminalCommand("branch",...s,...e.map((e=>e.ref))),t?.remote){const e=i.filter((e=>null!=e.upstream));if(0!==e.length){const t=(0,c.XI)(e,(e=>(0,F.Lo)(e.upstream.name)));for(const[e,i]of t.entries())this.runTerminalCommand("push","-d",e,...i.map((e=>(0,F.S3)(e.upstream.name))))}}}const s=e.filter((e=>e.remote));if(0!==s.length){const e=(0,c.XI)(s,(e=>(0,F.Lo)(e.name)));for(const[t,i]of e.entries())this.runTerminalCommand("push","-d",t,...i.map((e=>(0,$.Av)(e))))}}cherryPick(...e){this.runTerminalCommand("cherry-pick",...e)}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){const{progress:t,...i}={progress:!0,...e};return t?s.window.withProgress({location:s.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},(()=>this.fetchCore(i))):this.fetchCore(i)}async fetchCore(e){try{null!=e?.branch?await this.container.git.fetch(this.path,e):await(0,h.Zv)(o.S8.Fetch,this.path),this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to fetch repository")}}async getBranch(e){if(e){const{values:[t]}=await this.getBranches({filter:t=>t.name===e});return t}return null==this._branch&&(this._branch=this.container.git.getBranch(this.path)),this._branch}getBranches(e){return this.container.git.getBranches(this.path,e)}getChangedFilesCount(e){return this.container.git.getChangedFilesCount(this.path,e)}getCommit(e){return this.container.git.getCommit(this.path,e)}getContributors(e){return this.container.git.getContributors(this.path,e)}getGitDir(){return null==this._gitDirPromise&&(this._gitDirPromise=this.container.git.getGitDir(this.path).then((e=>this._gitDir=e))),this._gitDirPromise}async getLastFetched(){if(null==this._lastFetched&&!await this.hasRemotes())return 0;try{const e=await this.container.git.getLastFetchedTimestamp(this.path);null!=e&&(this._lastFetched=e)}catch{this._lastFetched=void 0}return this._lastFetched??0}async getMainRepository(){const e=await this.getGitDir();return null==e?.commonUri?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}getMergeStatus(){return this.container.git.getMergeStatus(this.path)}getRebaseStatus(){return this.container.git.getRebaseStatus(this.path)}async getRemote(e){return(await this.getRemotes()).find((t=>t.name===e))}async getRemotes(e){if(null==this._remotes){if(null==this._providers){const e=u.D.get("remotes",this.folder?.uri??null);this._providers=(0,R.v)(e)}this._remotes=this.container.git.getRemotes(this.path,{providers:this._providers,sort:!0}),this.subscribeToRemotes(this._remotes)}return null!=e?.filter?(await this._remotes).filter(e.filter):this._remotes}async getRichRemote(e=!1){return this.container.git.getBestRemoteWithRichProvider(await this.getRemotes(),{includeDisconnected:!e})}async subscribeToRemotes(e){this._remotesDisposable?.dispose(),this._remotesDisposable=void 0,this._remotesDisposable=s.Disposable.from(...(0,c.DZ)(await e,(e=>{if(e.provider?.hasRichIntegration())return e.provider.onDidChange((()=>this.fireChange(102)))})))}getStash(){return this.container.git.getStash(this.path)}getStatus(){return this.container.git.getStatusForRepo(this.path)}async getTag(e){const{values:[t]}=await this.getTags({filter:t=>t.name===e});return t}getTags(e){return this.container.git.getTags(this.path,e)}async createWorktree(e,t){await this.container.git.createWorktree(this.path,e.fsPath,t);const i=e.toString();return this.container.git.getWorktree(this.path,(e=>e.uri.toString()===i))}getWorktrees(){return this.container.git.getWorktrees(this.path)}async getWorktreesDefaultUri(){return this.container.git.getWorktreesDefaultUri(this.path)}deleteWorktree(e,t){return this.container.git.deleteWorktree(this.path,e.fsPath,t)}async hasRemotes(){const e=await this.getRemotes();return e?.length>0}async hasRichRemote(e=!1){const t=await this.getRichRemote(e);return null!=t?.provider}async hasUpstreamBranch(){const e=await this.getBranch();return null!=e?.upstream}isMaybeWorktree(){if(null!=this._gitDir)return null!=this._gitDir.commonUri}async isWorktree(){return null!=(await this.getGitDir())?.commonUri}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){const{progress:t,...i}={progress:!0,...e};return t?s.window.withProgress({location:s.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},(()=>this.pullCore(i))):this.pullCore()}async pullCore(e){try{await this.hasUpstreamBranch()?await(0,h.Zv)(e?.rebase?o.S8.PullRebase:o.S8.Pull,this.path):u.D.getAny(o.eq.FetchOnPull,s.Uri.file(this.path))&&await this.container.git.fetch(this.path),this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to pull repository")}}async push(e){const{progress:t,...i}={progress:!0,...e};return t?s.window.withProgress({location:s.ProgressLocation.Notification,title:(0,$.UR)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},(()=>this.pushCore(i))):this.pushCore(i)}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest"))return;if(!await(0,a.B8)(t.name))return;const i=await this.getRemote(e);(0,h.SI)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async pushCore(e){try{if((0,$.UR)(e?.reference)){const t=await this.container.git.getOrOpenScmRepository(this.path);if(null==t)return;if(null!=e?.publish)await(t?.push(e.publish.remote,e.reference.name,!0)),this.showCreatePullRequestPrompt(e.publish.remote,e.reference);else{const i=await this.getBranch(e?.reference.name);if(null==i)return;await(t?.push(i.getRemoteName(),i.name,void 0,e?.force?n.QO.ForceWithLease:void 0))}}else if(null!=e?.reference){const t=await this.container.git.getOrOpenScmRepository(this.path);if(null==t)return;const i=await this.getBranch();if(null==i)return;await(t?.push(i.getRemoteName(),`${e.reference.ref}:${i.getNameWithoutRemote()}`,void 0,e?.force?n.QO.ForceWithLease:void 0))}else await(0,h.Zv)(e?.force?o.S8.PushForce:o.S8.Push,this.path);this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}reset(...e){this.runTerminalCommand("reset",...e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&(this._branch=void 0),(0===e.length||e.includes("remotes"))&&(this._remotes=void 0,this._remotesDisposable?.dispose(),this._remotesDisposable=void 0)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced())}revert(...e){this.runTerminalCommand("revert",...e)}richSearchCommits(e,t){return this.container.git.richSearchCommits(this.path,e,t)}searchCommits(e,t){return this.container.git.searchCommits(this.path,e,t)}async setRemoteAsDefault(e,t=!0){await this.container.storage.storeWorkspace("remote:default",t?e.id:void 0),this.fireChange(5,102)}get starred(){const e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async stashApply(e,t){await this.container.git.stashApply(this.path,e,t),this.fireChange(4)}async stashDelete(e,t){await this.container.git.stashDelete(this.path,e,t),this.fireChange(4)}async stashSave(e,t,i){await this.container.git.stashSave(this.path,e,t,i),this.fireChange(4)}async switch(e,t){const{progress:i,...r}={progress:!0,...t};return i?s.window.withProgress({location:s.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},(()=>this.switchCore(e,r))):this.switchCore(e,r)}async switchCore(e,t){try{await this.container.git.checkout(this.path,e,t),this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to switch to reference")}}toAbsoluteUri(e,t){const i=this.container.git.getAbsoluteUri(e,this.path);return!(t?.validate??1)||this.containsUri(i)?i:void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){const s=`starred:${e}`;let r=this.container.storage.getWorkspace(s);r=(0,y.iC)(r,t,i),await this.container.storage.storeWorkspace(s,r),this.fireChange(103)}get etagFileSystem(){return this._etagFileSystem}startWatchingFileSystem(){if(this._fsWatchCounter++,null==this._fsWatcherDisposable){const e=s.workspace.createFileSystemWatcher(new s.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=s.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return{dispose:()=>this.stopWatchingFileSystem()}}stopWatchingFileSystem(e=!1){null!=this._fsWatcherDisposable&&(--this._fsWatchCounter>0&&!e||(this._etagFileSystem=void 0,this._fsWatchCounter=0,this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}tag(...e){this.runTerminalCommand("tag",...e)}tagDelete(e){Array.isArray(e)||(e=[e]);this.runTerminalCommand("tag","--delete",...e.map((e=>e.ref)))}fireChange(...e){const t=(0,v.UH)();this._updatedAt=Date.now(),null==this._fireChangeDebounced&&(this._fireChangeDebounced=(0,g.Ds)(this.fireChangeCore.bind(this),250)),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.onDidRepositoryChange(this,new RepositoryChangeEvent(this,e)),this._suspended?w.Yd.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`):this._fireChangeDebounced()}fireChangeCore(){const e=this._pendingRepoChange;null!=e&&(this._pendingRepoChange=void 0,w.Yd.debug(`Repository(${this.id}) firing ${e.toString(!0)}`),this._onDidChange.fire(e))}fireFileSystemChange(e){const t=(0,v.UH)();this._updatedAt=Date.now(),null==this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=(0,g.Ds)(this.fireFileSystemChangeCore.bind(this),2500)),null==this._pendingFileSystemChange&&(this._pendingFileSystemChange={repository:this,uris:[]});const i=this._pendingFileSystemChange;i.uris.push(e),this._suspended?w.Yd.debug(t,`queueing suspended fs changes=${i.uris.map((e=>e.fsPath)).join(", ")}`):this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){let e=this._pendingFileSystemChange;if(null==e)return;this._pendingFileSystemChange=void 0;const t=await this.container.git.excludeIgnoredUris(this.path,e.uris);0!==t.length&&(t.length!==e.uris.length&&(e={...e,uris:t}),w.Yd.debug(`Repository(${this.id}) firing fs changes=${e.uris.map((e=>e.fsPath)).join(", ")}`),this._onDidChangeFileSystem.fire(e))}runTerminalCommand(e,...t){k(e,t.map((e=>e.startsWith("#")||/['();$|>&<]/.test(e)?`"${e}"`:e)).join(" "),this.path,!0),setTimeout((()=>this.fireChange(-1)),2500)}};function L(e){return e instanceof W}I([(0,m.fF)()],W.prototype,"onGitIgnoreChanged",1),I([(0,m.fF)()],W.prototype,"onRepositoryChanged",1),I([(0,m.cM)()],W.prototype,"access",1),I([(0,m.cM)()],W.prototype,"supports",1),I([(0,m.cM)()],W.prototype,"addRemote",1),I([(0,m.cM)()],W.prototype,"pruneRemote",1),I([(0,m.cM)()],W.prototype,"removeRemote",1),I([(0,m.cM)()],W.prototype,"branch",1),I([(0,m.cM)()],W.prototype,"branchDelete",1),I([(0,m.cM)()],W.prototype,"cherryPick",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"fetch",1),I([(0,p.H)()],W.prototype,"getLastFetched",1),I([(0,p.H)(),(0,m.cM)({exit:e=>`returned ${e?.path}`})],W.prototype,"getMainRepository",1),I([(0,m.cM)()],W.prototype,"createWorktree",1),I([(0,m.cM)()],W.prototype,"merge",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"pull",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"push",1),I([(0,m.cM)()],W.prototype,"rebase",1),I([(0,m.cM)()],W.prototype,"reset",1),I([(0,m.cM)({singleLine:!0})],W.prototype,"resetCaches",1),I([(0,m.cM)()],W.prototype,"revert",1),I([(0,m.fF)()],W.prototype,"richSearchCommits",1),I([(0,m.fF)()],W.prototype,"searchCommits",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"stashApply",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"stashDelete",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"stashSave",1),I([(0,p.H)(),(0,m.cM)()],W.prototype,"switch",1),I([(0,m.cM)()],W.prototype,"tag",1),I([(0,m.cM)()],W.prototype,"tagDelete",1),I([(0,m.fF)()],W.prototype,"fireChange",1),I([(0,m.fF)()],W.prototype,"fireFileSystemChange",1),W=I([(0,m.hJ)(((e,t)=>`${t}(${e.id})`))],W)},827:(e,t,i)=>{i.d(t,{Hk:()=>GitStatus,JB:()=>GitStatusFile,JP:()=>m});var s=i(5255),r=i(9996),n=i(4488),o=i(4627),a=i(5367),l=i(6450),c=i(439),h=i(7881),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?d(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&u(t,i,n),n};class GitStatus{constructor(e,t,i,s,r,n,o=!1){this.repoPath=e,this.branch=t,this.sha=i,this.files=s,this.state=r,this.upstream=n,this.rebasing=o,this.detached=(0,a.uz)(t),this.detached&&(this.branch=(0,a.Iq)(this.sha))}get conflicts(){return this.files.filter((e=>e.conflicted))}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some((e=>e.conflicted))}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,s=0,r=0,n=0,o=0,a=0,l=0;const c=[],u=[],d=[];for(const p of this.files){switch(p.conflictStatus){case void 0:break;case h.Vz.AddedByBoth:case h.Vz.AddedByUs:case h.Vz.AddedByThem:e++,u.push(p);break;case h.Vz.DeletedByBoth:case h.Vz.DeletedByUs:case h.Vz.DeletedByThem:t++;break;default:i++,c.push(p)}switch(p.indexStatus){case void 0:break;case h.NV.Added:s++,u.push(p);break;case h.NV.Deleted:a++;break;default:n++,u.push(p)}switch(p.workingTreeStatus){case void 0:case h.Bh.Ignored:break;case h.Bh.Added:case h.Bh.Untracked:r++,d.push(p);break;case h.Bh.Deleted:l++;break;default:o++,d.push(p)}}const p=e+i+t,m=s+n+a,g=r+o+l;return{conflicted:p,conflictedAddsAndChanges:c,conflictedStatus:p>0?`+${e} ~${i} -${t}`:"",staged:m,stagedStatus:m>0?`+${s} ~${n} -${a}`:"",stagedAddsAndChanges:u,unstaged:g,unstagedStatus:g>0?`+${r} ~${o} -${l}`:"",unstagedAddsAndChanges:d}}getDiffStatus(){const e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(const t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:s="",separator:r=" ",suffix:n=""}={}){const{added:a,changed:l,deleted:c}=this.getDiffStatus();if(0===a&&0===l&&0===c)return t??"";if(i){let e="";return a&&(e+=`${(0,o._6)("file",a)} added`),l&&(e+=`${0===e.length?"":r}${(0,o._6)("file",l)} changed`),c&&(e+=`${0===e.length?"":r}${(0,o._6)("file",c)} deleted`),`${s}${e}${n}`}let h="";return e?(0!==a&&(h+=`+${a}`),0!==l&&(h+=`${0===h.length?"":r}~${l}`),0!==c&&(h+=`${0===h.length?"":r}-${c}`)):h+=`+${a}${r}~${l}${r}-${c}`,`${s}${h}${n}`}async getRemote(){if(null==this.upstream)return;const e=await r.W.instance.git.getRemotesWithProviders(this.repoPath);if(0===e.length)return;const t=(0,a.Lo)(this.upstream);return e.find((e=>e.name===t))}getUpstreamStatus(e){return m(this.upstream?{name:this.upstream,missing:!1}:void 0,this.state,e)}}function m(e,t,i){let r=!0,n=!1,a=!1,l="",c=" ",h="";if(null!=i&&({count:r=!0,expand:n=!1,icons:a=!1,prefix:l="",separator:c=" ",suffix:h=""}=i),null==e||0===t.behind&&0===t.ahead)return i?.empty??"";if(n){let i="";return e.missing?i="missing":(t.behind&&(i+=`${(0,o._6)("commit",t.behind,{infix:a?"$(arrow-down) ":void 0})} behind`),t.ahead&&(i+=`${0===i.length?"":c}${(0,o._6)("commit",t.ahead,{infix:a?"$(arrow-up) ":void 0})} ahead`,h.startsWith(` ${e.name.split("/")[0]}`)&&(i+=" of"))),`${l}${i}${h}`}const u=r&&!e.missing;return`${l}${u?t.behind:""}${u||0!==t.behind?s.NE.ArrowDown:""}${c}${u?t.ahead:""}${u||0!==t.ahead?s.NE.ArrowUp:""}${h}`}p([(0,n.H)()],GitStatus.prototype,"conflicts",1),p([(0,n.H)()],GitStatus.prototype,"hasConflicts",1),p([(0,n.H)()],GitStatus.prototype,"computeWorkingTreeStatus",1),p([(0,n.H)()],GitStatus.prototype,"getDiffStatus",1),p([(0,n.H)()],GitStatus.prototype,"getRemote",1);class GitStatusFile{constructor(e,t,i,s,r){if(this.repoPath=e,this.path=s,this.originalPath=r,null!=t&&null!=i)switch(t+i){case"??":this.workingTreeStatus=h.Bh.Untracked;break;case"!!":this.workingTreeStatus=h.Bh.Ignored;break;case"AA":this.conflictStatus=h.Vz.AddedByBoth;break;case"AU":this.conflictStatus=h.Vz.AddedByUs;break;case"UA":this.conflictStatus=h.Vz.AddedByThem;break;case"DD":this.conflictStatus=h.Vz.DeletedByBoth;break;case"DU":this.conflictStatus=h.Vz.DeletedByUs;break;case"UD":this.conflictStatus=h.Vz.DeletedByThem;break;case"UU":this.conflictStatus=h.Vz.ModifiedByBoth}if(null==this.conflictStatus){switch(t){case"A":this.indexStatus=h.NV.Added;break;case"D":this.indexStatus=h.NV.Deleted;break;case"M":this.indexStatus=h.NV.Modified;break;case"R":this.indexStatus=h.NV.Renamed;break;case"C":this.indexStatus=h.NV.Copied}switch(i){case"A":case"?":this.workingTreeStatus=h.Bh.Added;break;case"D":this.workingTreeStatus=h.Bh.Deleted;break;case"M":this.workingTreeStatus=h.Bh.Modified}}}get conflicted(){return null!=this.conflictStatus}get edited(){return null!=this.workingTreeStatus}get staged(){return null!=this.indexStatus}get status(){return this.conflictStatus??this.indexStatus??this.workingTreeStatus}get uri(){return r.W.instance.git.getAbsoluteUri(this.path,this.repoPath)}getFormattedDirectory(e=!1){return(0,h.OC)(this,e)}getFormattedPath(e={}){return(0,h.PM)(this,e)}getOcticon(){return(0,h.Qw)(this.status)}getStatusText(){return(0,h.K9)(this.status)}getPseudoCommits(e,t){const i=[],s=new Date;if(null!=this.conflictStatus)return i.push(new l.aM(e,this.repoPath,c.CL,new l._j("You",t?.email??void 0,s),new l._j("You",t?.email??void 0,s),"Uncommitted changes",[c.pw],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,c.pw),void 0,[])),i;if(null==this.workingTreeStatus&&null==this.indexStatus)return i;if(null!=this.workingTreeStatus&&null!=this.indexStatus){const r=new Date(s);r.setMilliseconds(r.getMilliseconds()-1),i.push(new l.aM(e,this.repoPath,c.CL,new l._j("You",t?.email??void 0,s),new l._j("You",t?.email??void 0,s),"Uncommitted changes",[c.pw],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,c.pw),void 0,[]),new l.aM(e,this.repoPath,c.pw,new l._j("You",t?.email??void 0,r),new l._j("You",t?.email??void 0,r),"Uncommitted changes",["HEAD"],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD"),void 0,[]))}else i.push(new l.aM(e,this.repoPath,null!=this.workingTreeStatus?c.CL:c.pw,new l._j("You",t?.email??void 0,s),new l._j("You",t?.email??void 0,s),"Uncommitted changes",["HEAD"],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD"),void 0,[]));return i}}p([(0,n.H)()],GitStatusFile.prototype,"uri",1)},9502:(e,t,i)=>{i.d(t,{Pj:()=>g,YR:()=>m,YU:()=>p,gE:()=>GitTag});var s=i(2540),r=i(9996),n=i(5148),o=i(7512),a=i(4488),l=i(4336),c=i(4627),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&h(t,i,n),n};function p(e,t){return`${e}|tag/${t}`}class GitTag{constructor(e,t,i,s,r,n){this.repoPath=e,this.name=t,this.sha=i,this.message=s,this.date=r,this.commitDate=n,this.refType="tag",this.id=p(e,t)}toString(){return`${(0,l.q4)(this)}(${this.id})`}get formattedDate(){return r.W.instance.TagDateFormatting.dateStyle===s.Dn.Absolute?this.formatDate(r.W.instance.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,o.p6)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,o.Zh)(this.commitDate):""}formatDate(e){return null!=this.date?(0,o.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,o.Zh)(this.date):""}getBasename(){const e=this.name.lastIndexOf("/");return-1!==e?this.name.substring(e+1):this.name}}function m(e){return e instanceof GitTag}function g(e,t){switch((t={orderBy:n.D.get("sortTagsBy"),...t}).orderBy){case s.RV.DateAsc:return e.sort(((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0)));case s.RV.NameAsc:return e.sort(((e,t)=>(0,c.dm)(e.name,t.name)));case s.RV.NameDesc:return e.sort(((e,t)=>(0,c.dm)(t.name,e.name)));case s.RV.DateDesc:default:return e.sort(((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0)))}}d([(0,a.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitTag.prototype,"formatCommitDate",1),d([(0,a.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitTag.prototype,"formatDate",1),d([(0,a.H)()],GitTag.prototype,"getBasename",1)},3961:(e,t,i)=>{function s(e,t,i,s){return!(null==e||null==e.name&&null==e.email&&null==e.username||null!=e.name&&e.name!==t||null!=e.email&&e.email!==i||null!=e.username&&e.username!==s)}i.d(t,{o:()=>s})},4794:(e,t,i)=>{i.d(t,{Sk:()=>h,Ww:()=>GitRemoteParser,gK:()=>c});var s=i(4241),r=i(3050),n=Object.defineProperty,o=Object.getOwnPropertyDescriptor;const a="",l=/^(.*)\t(.*)\s\((.*)\)$/gm;class GitRemoteParser{static parse(e,t,i){if(!e)return;const s=[],n=Object.create(null);let o,a,c,u,d,p,m,g,f;for(;;){if(f=l.exec(e),null==f)break;if([,o,a,c]=f,a=` ${a}`.substr(1),[u,d,p]=h(a),m=`${d?`${d}/`:""}${p}`,g=n[m],void 0===g){const e=i(a,d,p);g=new r.ss(t,m,` ${o}`.substr(1),u,void 0!==e?e.domain:d,void 0!==e?e.path:p,e,[{url:a,type:` ${c}`.substr(1)}]),s.push(g),n[m]=g}else g.urls.push({url:a,type:` ${c}`.substr(1)})}return s}}((e,t,i,s)=>{for(var r,a=s>1?void 0:s?o(t,i):t,l=e.length-1;l>=0;l--)(r=e[l])&&(a=(s?r(t,i,a):r(a))||a);s&&a&&n(t,i,a)})([(0,s.fF)({args:!1,singleLine:!0})],GitRemoteParser,"parse",1);const c=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function h(e){const t=c.exec(e);return null==t?[a,a,e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,a)]}},2075:(e,t,i)=>{i.d(t,{at:()=>b,gu:()=>GitHubRemote,z4:()=>GitHubAuthenticationProvider});var s=i(9496),r=i(4241),n=i(4488),o=i(8786),a=i(4627),l=i(4321),c=i(3084),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&h(t,i,n),n};const p=/\b(?<repo>[^/\s]+\/[^/\s]+)#(?<num>[0-9]+)\b(?!]\()/g,m=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,g=/^L(\d+)(?:-L(\d+))?$/,f=Object.freeze({id:"github",scopes:["repo","read:user","user:email"]}),w=Object.freeze({id:"github-enterprise",scopes:["repo","read:user","user:email"]});function v(e){return(0,a.qq)(e,"github.com")}class GitHubRemote extends c.D{constructor(e,t,i,s,r,n=!1){super(e,t,i,s,r,n)}get authProvider(){return v(this.domain)?f:w}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,ignoreCase:!0,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(p,((e,s,r)=>{const n=(0,o.M)(`${this.protocol}://${this.domain}/${s}/issues/${r}`),a=` "Open Issue or Pull Request #${r} from ${s} on ${this.name}"`,l=`\0${i.size}\0`;return"markdown"===t?i.set(l,`[${e}](${n}${a})`):"html"===t&&i.set(l,`<a href="${n}" title=${a}>${e}</a>`),l})),parse:(e,t)=>{let i,s,r;for(;;){if(r=p.exec(e),null==r?.groups)break;({repo:i,num:s}=r.groups),t.set(s,{provider:this,id:s,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${s}`,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${s}`})}}}]),this._autolinks}get avatarUri(){const[e]=this.splitPath();return s.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get name(){return this.formatName("GitHub")}async connect(){return!(!v(this.domain)&&!await(0,c.e)("GitHub Enterprise instance",this.container))&&super.connect()}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s,r;if(t.fragment){const e=g.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=m.exec(t.path);if(null==n)return;const[,,,o]=n;let a,c=o.indexOf("/",1);if(-1!==c){const t=o.substring(1,c);if((0,l.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s,endLine:r}}}const h=new Map;c=o.length;do{c=o.lastIndexOf("/",c-1),a=o.substring(1,c),h.set(a,o.substr(c))}while(c>0);if(0!==h.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(const n of t){const t=h.get(n.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:s,endLine:r}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}getUrlForCreatePullRequest(e,t){if(e.remote.url===t.remote.url)return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${t.branch}`);const[i]=t.remote.path.split("/",1);return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${i}:${t.branch}`)}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`#L${s.start.line}`:`#L${s.start.line}-L${s.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${r}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${r}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${r}`}async getProviderAccountForCommit({accessToken:e},t,i){const[s,r]=this.splitPath();return(await this.container.github)?.getAccountForCommit(this,e,s,r,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i){const[s,r]=this.splitPath();return(await this.container.github)?.getAccountForEmail(this,e,s,r,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.github)?.getDefaultBranch(this,e,t,i,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t){const[i,s]=this.splitPath();return(await this.container.github)?.getIssueOrPullRequest(this,e,i,s,Number(t),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,s){const[r,n]=this.splitPath(),{include:o,...a}=s??{},l=(await i.e(457).then(i.bind(i,3878))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,r,n,t,{...a,include:o?.map((e=>l(e))),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t){const[i,s]=this.splitPath();return(await this.container.github)?.getPullRequestForCommit(this,e,i,s,t,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests({accessToken:e}){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:[this.path]})}async searchProviderMyIssues({accessToken:e}){return(await this.container.github)?.searchMyIssues(this,e,{repos:[this.path]})}}d([(0,n.H)()],GitHubRemote.prototype,"authProvider",1),d([(0,r.cM)()],GitHubRemote.prototype,"connect",1);const y=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function b(e){const t=y.exec(e);if(null==t)return;const[,i,s,r]=t;return{userId:i,login:s,authority:r}}class GitHubAuthenticationProvider{constructor(e){this._disposable=e.integrationAuthentication.registerProvider("github-enterprise",this)}dispose(){this._disposable.dispose()}getSessionId(e){return e?.domain??""}async createSession(e){const t=s.window.createInputBox();t.ignoreFocusOut=!0;const i=[];let r;try{const n={iconPath:new s.ThemeIcon("link-external"),tooltip:"Open Access Tokens page on GitHub"};r=await new Promise((r=>{i.push(t.onDidHide((()=>r(void 0))),t.onDidChangeValue((()=>t.validationMessage=void 0)),t.onDidAccept((()=>{const e=t.value.trim();e?r(e):t.validationMessage="A personal access token is required"})),t.onDidTriggerButton((t=>{t===n&&s.env.openExternal(s.Uri.parse(`https://${e?.domain??"github.com"}/settings/tokens`))}))),t.password=!0,t.title="GitHub Authentication"+(e?.domain?`  • ${e.domain}`:""),t.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,t.prompt="Paste your GitHub Personal Access Token",t.buttons=[n],t.show()}))}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}if(r)return{id:this.getSessionId(e),accessToken:r,scopes:[],account:{id:"",label:""}}}}},5542:(e,t,i)=>{i.d(t,{E:()=>GitLabRemote,h:()=>GitLabAuthenticationProvider});var s=i(9496),r=i(2540),n=i(4241),o=i(8786),a=i(4627),l=i(4321),c=i(3084),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor;const d=/\b(?<repo>[^/\s]+\/[^/\s]+)#(?<num>[0-9]+)\b(?!]\()/g,p=/\b(?<repo>[^/\s]+\/[^/\s]+)!(?<num>[0-9]+)\b(?!]\()/g,m=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,g=/^L(\d+)(?:-(\d+))?$/,f=Object.freeze({id:"gitlab",scopes:["read_api","read_user","read_repository"]});class GitLabRemote extends c.D{constructor(e,t,i,s,r,n=!1){super(e,t,i,s,r,n)}get authProvider(){return f}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/-/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:r.fH.Issue,description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,title:`Open Merge Request !<num> on ${this.name}`,type:r.fH.PullRequest,description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(d,((e,s,r)=>{const n=(0,o.M)(`${this.protocol}://${this.domain}/${s}/-/issues/${r}`),a=` "Open Issue #${r} from ${s} on ${this.name}"`,l=`\0${i.size}\0`;return"markdown"===t?i.set(l,`[${e}](${n}${a})`):"html"===t&&i.set(l,`<a href="${n}" title=${a}>${e}</a>`),l})),parse:(e,t)=>{let i,s,n;for(;;){if(n=d.exec(e),null==n?.groups)break;({repo:i,num:s}=n.groups),t.set(s,{provider:this,id:s,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${s}`,title:`Open Issue #<num> from ${i} on ${this.name}`,type:r.fH.Issue,description:`${this.name} Issue ${i}#${s}`})}}},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(p,((e,s,r)=>{const n=(0,o.M)(`${this.protocol}://${this.domain}/${s}/-/merge_requests/${r}`),a=` "Open Merge Request !${r} from ${s} on ${this.name}"`,l=`\0${i.size}\0`;return"markdown"===t?i.set(l,`[${e}](${n}${a})`):"html"===t&&i.set(l,`<a href="${n}" title=${a}>${e}</a>`),l})),parse:(e,t)=>{let i,s,n;for(;;){if(n=p.exec(e),null==n?.groups)break;({repo:i,num:s}=n.groups),t.set(s,{provider:this,id:s,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${s}`,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:r.fH.PullRequest,description:`Merge Request !${s} from ${i} on ${this.name}`})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get name(){return this.formatName("GitLab")}async connect(){return!(!(0,a.qq)(this.domain,"gitlab.com")&&!await(0,c.e)("GitLab self-managed instance",this.container))&&super.connect()}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s,r;if(t.fragment){const e=g.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=m.exec(t.path);if(null==n)return;const[,,,o]=n;let a,c=o.indexOf("/",1);if(-1!==c){const t=o.substring(1,c);if((0,l.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s,endLine:r}}}const h=new Map;c=o.length;do{c=o.lastIndexOf("/",c-1),a=o.substring(1,c),h.set(a,o.substr(c))}while(c>0);if(0!==h.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(const n of t){const t=h.get(n.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:s,endLine:r}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`#L${s.start.line}`:`#L${s.start.line}-${s.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${r}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${r}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${r}`}async getProviderAccountForCommit({accessToken:e},t,i){const[s,r]=this.splitPath();return(await this.container.gitlab)?.getAccountForCommit(this,e,s,r,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i){const[s,r]=this.splitPath();return(await this.container.gitlab)?.getAccountForEmail(this,e,s,r,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.gitlab)?.getDefaultBranch(this,e,t,i,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t){const[i,s]=this.splitPath();return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,i,s,Number(t),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,s){const[r,n]=this.splitPath(),{include:o,...a}=s??{},l=(await i.e(449).then(i.bind(i,6630))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,r,n,t,{...a,include:o?.map((e=>l(e))),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t){const[i,s]=this.splitPath();return(await this.container.gitlab)?.getPullRequestForCommit(this,e,i,s,t,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests(e){return Promise.resolve(void 0)}async searchProviderMyIssues(e){return Promise.resolve(void 0)}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?u(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&h(t,i,n)})([(0,n.cM)()],GitLabRemote.prototype,"connect",1);class GitLabAuthenticationProvider{constructor(e){this._disposable=e.integrationAuthentication.registerProvider("gitlab",this)}dispose(){this._disposable.dispose()}getSessionId(e){return e?.domain??""}async createSession(e){const t=s.window.createInputBox();t.ignoreFocusOut=!0;const i=[];let r;try{const n={iconPath:new s.ThemeIcon("link-external"),tooltip:"Open Access Tokens page on GitLab"};r=await new Promise((r=>{i.push(t.onDidHide((()=>r(void 0))),t.onDidChangeValue((()=>t.validationMessage=void 0)),t.onDidAccept((()=>{const e=t.value.trim();e?r(e):t.validationMessage="A personal access token is required"})),t.onDidTriggerButton((t=>{t===n&&s.env.openExternal(s.Uri.parse(`https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens`))}))),t.password=!0,t.title="GitLab Authentication"+(e?.domain?`  • ${e.domain}`:""),t.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,t.prompt="Paste your GitLab Personal Access Token",t.buttons=[n],t.show()}))}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}if(r)return{id:this.getSessionId(e),accessToken:r,scopes:[],account:{id:"",label:""}}}}},2795:(e,t,i)=>{i.d(t,{x:()=>RemoteProvider});var s=i(9496),r=i(8786),n=i(6503);class RemoteProvider{constructor(e,t,i="https",s,r=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=r,this.type="simple",this._name=s}get autolinks(){return[]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}async copy(e){const t=this.url(e);null!=t&&await s.env.clipboard.writeText(t)}hasRichIntegration(){return"rich"===this.type}open(e){return this.openUrl(this.url(e))}url(e){switch(e.type){case n.J.Branch:return this.getUrlForBranch(e.branch);case n.J.Branches:return this.getUrlForBranches();case n.J.Commit:return this.getUrlForCommit(e.sha);case n.J.Comparison:return this.getUrlForComparison?.(e.base,e.compare,e.notation??"...");case n.J.CreatePullRequest:return this.getUrlForCreatePullRequest?.(e.base,e.compare);case n.J.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case n.J.Repo:return this.getUrlForRepository();case n.J.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}async openUrl(e){if(null==e)return;const t=s.Uri.parse(e);return t.path.includes("#")?s.env.openExternal(t.toString()):s.env.openExternal(t)}encodeUrl(e){return(0,r.M)(e)?.replace(/#/g,"%23")}}},7552:(e,t,i)=>{i.d(t,{B:()=>F,v:()=>k});var s=i(2540),r=i(4336),n=i(2795);const o=/\/_git\/?/i,a=/^DefaultCollection\//i,l=/^(.*?)\/(.*?)\/(.*)/,c=/^(ssh|vs-ssh)\./i,h=/^\/?v\d\//i,u=/path=([^&]+)/i,d=/line=(\d+)(?:&lineEnd=(\d+))?/;class AzureDevOpsRemote extends n.x{constructor(e,t,i,s,r=!1){if(c.test(e)){t=t.replace(h,""),e=e.replace(c,"");const i=l.exec(t);if(null!=i){const[,s,n,o]=i;r?(e=`${s}.${e}`,t=`${n}/_git/${o}`):t=`${s}/${n}/_git/${o}`}}super(e,t=decodeURIComponent(t),i,s)}get autolinks(){if(void 0===this._autolinks){const e=this.baseUrl.replace(o,"/");this._autolinks=[{prefix:"#",url:`${e}/_workitems/edit/<num>`,title:`Open Work Item #<num> on ${this.name}`,type:s.fH.Issue,description:`${this.name} Work Item #<num>`},{prefix:"Merged PR ",url:`${this.baseUrl}/pullrequest/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:s.fH.PullRequest,description:`${this.name} Pull Request #<num>`}]}return this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get name(){return"Azure DevOps"}get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(o,"/").replace(a,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return Promise.resolve(void 0);let s,r;if(t.query){const e=d.exec(t.query);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=u.exec(t.query);if(null==n)return Promise.resolve(void 0);const[,o]=n,a=e.toAbsoluteUri(o,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:s,endLine:r}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`&line=${s.start.line}&lineStartColumn=${s.start.character+1}&lineEndColumn=${s.end.character+1}`:`&line=${s.start.line}&lineEnd=${s.end.line}&lineStartColumn=${s.start.character+1}&lineEndColumn=${s.end.character+1}`:"",i?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${r}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${r}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${r}`)}}var p=i(4321);const m=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,g=/^lines-(\d+)(?::(\d+))?$/;class BitbucketRemote extends n.x{constructor(e,t,i,s,r=!1){super(e,t,i,s,r)}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:s.fH.Issue,description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:s.fH.PullRequest,description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s,r;if(t.fragment){const e=g.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=m.exec(t.path);if(null==n)return;const[,,,o]=n;let a,l=o.indexOf("/",1);if(-1!==l){const t=o.substring(1,l);if((0,p.D3)(t)){const t=e.toAbsoluteUri(o.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s,endLine:r}}}const c=new Map;l=o.length;do{l=o.lastIndexOf("/",l-1),a=o.substring(1,l),c.set(a,o.substr(l))}while(l>0);if(0!==c.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(const n of t){const t=c.get(n.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:s,endLine:r}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`#${e}-${s.start.line}`:`#${e}-${s.start.line}:${s.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${r}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${r}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${r}`}}const f=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,w=/^lines-(\d+)(?::(\d+))?$/;class BitbucketServerRemote extends n.x{constructor(e,t,i,s,r=!1){super(e,t,i,s,r)}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:s.fH.Issue,description:`${this.name} Issue #<num>`},{prefix:"pull request #",ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:s.fH.PullRequest,description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){const[e,t]=this.path.startsWith("scm/")?this.path.replace("scm/","").split("/"):this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get name(){return this.formatName("Bitbucket Server")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s,r;if(t.fragment){const e=w.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=f.exec(t.path);if(null==n)return;const[,,,o]=n;let a,l=o.indexOf("/",1);if(-1!==l){const t=o.substring(1,l);if((0,p.D3)(t)){const t=e.toAbsoluteUri(o.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s,endLine:r}}}const c=new Map;l=o.length;do{l=o.lastIndexOf("/",l-1),a=o.substring(1,l),c.set(a,o.substr(l))}while(l>0);if(0!==c.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(const n of t){const t=c.get(n.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:s,endLine:r}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`#${s.start.line}`:`#${s.start.line}-${s.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${r}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${r}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${r}`}}var v=i(4627);class CustomRemote extends n.x{constructor(e,t,i,s,r){super(e,t,s,r,!0),this.urls=i}get id(){return"custom"}get name(){return this.formatName("Custom")}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.encodeUrl((0,v.sX)(this.urls.repository,this.getContext()))}getUrlForBranches(){return this.encodeUrl((0,v.sX)(this.urls.branches,this.getContext()))}getUrlForBranch(e){return this.encodeUrl((0,v.sX)(this.urls.branch,this.getContext({branch:e})))}getUrlForCommit(e){return this.encodeUrl((0,v.sX)(this.urls.commit,this.getContext({id:e})))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.encodeUrl((0,v.sX)(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i})))}getUrlForFile(e,t,i,s){let r,n;r=null!=s?s.start.line===s.end.line?(0,v.sX)(this.urls.fileLine,{line:s.start.line}):(0,v.sX)(this.urls.fileRange,{start:s.start.line,end:s.end.line}):"",n=i?(0,v.sX)(this.urls.fileInCommit,this.getContext({id:i,file:e,line:r})):t?(0,v.sX)(this.urls.fileInBranch,this.getContext({branch:t,file:e,line:r})):(0,v.sX)(this.urls.file,this.getContext({file:e,line:r}));const o=n.includes("#");if(n=this.encodeUrl(n),o){const e=n.lastIndexOf("%23");-1!==e&&(n=`${n.substring(0,e)}#${n.substring(e+3)}`)}return n}getContext(e){const[t,i]=this.splitPath();return{repo:this.path,repoBase:t,repoPath:i,...e??{}}}}const y=/^\/([^/]+)\/\+(.+)$/i,b=/^(\d+)$/;class GerritRemote extends n.x{constructor(e,t,i,s,r=!1,n=!0){n&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,s,r)}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"Change-Id: ",url:`${this.baseReviewUrl}/q/<num>`,title:`Open Change #<num> on ${this.name}`,alphanumeric:!0,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s;if(t.fragment){const e=b.exec(t.fragment);if(null!=e){const[,t]=e;t&&(s=parseInt(t,10))}}const r=y.exec(t.path);if(null==r)return;const[,,n]=r;let o=n.indexOf("/",1);if(-1!==o){const t=n.substring(1,o);if((0,p.D3)(t)||"HEAD"==t){const t=e.toAbsoluteUri(n.substr(o),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s}}}if(n.startsWith("/refs/heads/")){const t=n.substr("/refs/heads/".length);let r;const a=new Map;o=t.length;do{o=t.lastIndexOf("/",o-1),r=t.substring(1,o),a.set(r,t.substr(o))}while(o>0);if(0!==a.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(const r of t){const t=a.get(r.getNameWithoutRemote());if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:s}}}}else if(n.startsWith("/refs/tags/")){const t=n.substr("/refs/tags/".length);let r;const a=new Map;o=t.length;do{o=t.lastIndexOf("/",o-1),r=t.substring(1,o),a.set(r,t.substr(o))}while(o>0);if(0!==a.size){const{values:t}=await e.getTags({filter:e=>a.has(e.name)});for(const r of t){const t=a.get(r.name);if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:s}}}}else;}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForFile(e,t,i,s){const r=null!=s?`#${s.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${r}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${r}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${r}`}}const C=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,A=/^L(\d+)(?:-L(\d+))?$/;class GiteaRemote extends n.x{constructor(e,t,i,s,r=!1){super(e,t,i,s,r)}get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:s.fH.Issue,description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get name(){return this.formatName("Gitea")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let s,r;if(t.fragment){const e=A.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(s=parseInt(t,10),i&&(r=parseInt(i,10)))}}const n=C.exec(t.path);if(null==n)return;const[,,,o]=n;let a,l;if(o.startsWith("/commit/")&&(a="/commit/".length,l=o.indexOf("/",a),-1!==l)){const t=o.substring(a,l);if((0,p.D3)(t)){const t=e.toAbsoluteUri(o.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:s,endLine:r}}}if(o.startsWith("/branch/")){let t;const n=new Map;a="/branch/".length,l=a;do{t=o.substring(a,l),n.set(t,o.substr(l)),l=o.indexOf("/",l+1)}while(l<o.length&&-1!==l);if(0!==n.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&n.has(e.getNameWithoutRemote())});for(const o of t){const t=n.get(o.getNameWithoutRemote());if(null==t)continue;const a=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=a)return{uri:a,startLine:s,endLine:r}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}getUrlForFile(e,t,i,s){let r;return r=null!=s?s.start.line===s.end.line?`#L${s.start.line}`:`#L${s.start.line}-L${s.end.line}`:"",i?this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}${r}`):t?this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}${r}`):this.encodeUrl(`${this.baseUrl}/src/${e}${r}`)}}var P=i(2075),D=i(5542);class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,s,r=!1){super(e,t,i,s,r,!1)}get id(){return"google-source"}get name(){return this.formatName("Google Source")}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){const[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}}const S=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new P.gu(e,t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new D.E(e,t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new D.E(e,t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}];function k(e){const t=[];if(e?.length)for(const i of e){const e=R(i);if(null==e)continue;let s;try{if(s=i.regex?new RegExp(i.regex,"i"):i.domain?.toLowerCase(),null==s)throw new Error("No matcher found")}catch(e){r.Yd.error(e,`Loading remote provider '${i.name??""}' failed`)}t.push({custom:!0,matcher:s,creator:e})}return t.push(...S),t}function R(e){switch(e.type){case s.zW.AzureDevOps:return(t,i,s)=>new AzureDevOpsRemote(i,s,e.protocol,e.name,!0);case s.zW.Bitbucket:return(t,i,s)=>new BitbucketRemote(i,s,e.protocol,e.name,!0);case s.zW.BitbucketServer:return(t,i,s)=>new BitbucketServerRemote(i,s,e.protocol,e.name,!0);case s.zW.Custom:return(t,i,s)=>new CustomRemote(i,s,e.urls,e.protocol,e.name);case s.zW.Gerrit:return(t,i,s)=>new GerritRemote(i,s,e.protocol,e.name,!0);case s.zW.GoogleSource:return(t,i,s)=>new GoogleSourceRemote(i,s,e.protocol,e.name,!0);case s.zW.Gitea:return(t,i,s)=>new GiteaRemote(i,s,e.protocol,e.name,!0);case s.zW.GitHub:return(t,i,s)=>new P.gu(t,i,s,e.protocol,e.name,!0);case s.zW.GitLab:return(t,i,s)=>new D.E(t,i,s,e.protocol,e.name,!0);default:return}}function F(e,t){return(i,s,n)=>function(e,t,i,s,n){try{const r=s.toLowerCase();for(const{custom:o,matcher:a,creator:l}of t){if("string"==typeof a){if(a===r)return l(e,s,n);continue}if(a.test(r))return l(e,s,n);if(!o)continue;const t=a.exec(i);if(null!=t)return l(e,t[1],t[2])}return}catch(e){return void r.Yd.error(e,"createRemoteProvider")}}(e,t,i,s,n)}},3084:(e,t,i)=>{i.d(t,{D:()=>RichRemoteProvider,e:()=>y});var s=i(9496),r=i(1177),n=i(7338),o=i(4575),a=i(7925),l=i(4968),c=i(5148),h=i(5432),u=i(4241),d=i(4336),p=i(6004),m=i(7469),g=i(2795),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?w(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&f(t,i,n),n};class RichRemoteProvider extends g.x{constructor(e,t,i,r,n,o){super(t,i,r,n,o),this.container=e,this.type="rich",this._onDidChange=new s.EventEmitter,this.requestExceptionCount=0,this._ignoreSSLErrors=new Map,this._prsByCommit=new Map,e.context.subscriptions.push(c.D.onDidChange((e=>{c.D.changed(e,"remotes")&&this._ignoreSSLErrors.clear()})),e.richRemoteProviders.onDidChangeConnectionState((e=>{e.key===this.key&&("disconnected"===e.reason?this.disconnect({silent:!0}):"connected"===e.reason&&this.ensureSession(!1))})),s.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this))}get onDidChange(){return this._onDidChange.event}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get key(){return this.custom?`${this.name}:${this.domain}`:this.name}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}session(){return void 0===this._session?this.ensureSession(!1):this._session??void 0}onAuthenticationSessionsChanged(e){e.provider.id===this.authProvider.id&&this.ensureSession(!1)}async connect(){try{const e=await this.ensureSession(!0);return Boolean(e)}catch(e){return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;const t=null!=this._session;if(t&&!e?.silent)if(e?.currentSessionOnly)(0,a.mm)(this.name);else{const e={title:"Disable"},t={title:"Disable & Sign Out"},i={title:"Cancel",isCloseAffordance:!0};let r;if(r=this.container.integrationAuthentication.hasProvider(this.authProvider.id)?await s.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?\n\nNote: signing out clears the saved authentication.`,{modal:!0},e,t,i):await s.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},e,i),null==r||r===i)return;r===t&&this.container.integrationAuthentication.deleteSession(this.id,this.authProviderDescriptor)}this.resetRequestExceptionCount(),this._prsByCommit.clear(),this._session=null,t&&(e?.currentSessionOnly||this.container.storage.storeWorkspace(this.connectedKey,!1),this._onDidChange.fire(),e?.silent||e?.currentSessionOnly||this.container.richRemoteProviders.disconnected(this.key))}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession(!0,!0))}resetRequestExceptionCount(){this.requestExceptionCount=0}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&this.disconnect({currentSessionOnly:!0})}async isConnected(){return null!=await this.session()}async getAccountForCommit(e,t){const i=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const i=await this.getProviderAccountForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return d.Yd.error(e,i),void((e instanceof o._7||e instanceof o.Bn)&&this.trackRequestException())}}async getAccountForEmail(e,t){const i=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const i=await this.getProviderAccountForEmail(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return d.Yd.error(e,i),void((e instanceof o._7||e instanceof o.Bn)&&this.trackRequestException())}}async getDefaultBranch(){const e=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const e=await this.getProviderDefaultBranch(this._session);return this.resetRequestExceptionCount(),e}catch(t){return d.Yd.error(t,e),void((t instanceof o._7||t instanceof o.Bn)&&this.trackRequestException())}}async searchMyPullRequests(){const e=(0,p.UH)();try{const e=await this.searchProviderMyPullRequests(this._session);return this.resetRequestExceptionCount(),e}catch(t){return d.Yd.error(t,e),void((t instanceof o._7||t instanceof o.Bn)&&this.trackRequestException())}}async searchMyIssues(){const e=(0,p.UH)();try{const e=await this.searchProviderMyIssues(this._session);return this.resetRequestExceptionCount(),e}catch(t){return d.Yd.error(t,e),void((t instanceof o._7||t instanceof o.Bn)&&this.trackRequestException())}}async getIssueOrPullRequest(e){const t=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const t=await this.getProviderIssueOrPullRequest(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return d.Yd.error(e,t),void((e instanceof o._7||e instanceof o.Bn)&&this.trackRequestException())}}getIgnoreSSLErrors(){if(n.$L)return!1;let e=this._ignoreSSLErrors.get(this.id);if(void 0===e){const t=c.D.get("remotes")?.find((e=>e.type.toLowerCase()===this.id&&e.domain===this.domain));e=t?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(this.id,e)}return e}async getPullRequestForBranch(e,t){const i=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const i=await this.getProviderPullRequestForBranch(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return d.Yd.error(e,i),void((e instanceof o._7||e instanceof o.Bn)&&this.trackRequestException())}}getPullRequestForCommit(e){let t=this._prsByCommit.get(e);return void 0===t&&(t=this.getPullRequestForCommitCore(e),this._prsByCommit.set(e,t)),null!=t&&(0,m.tI)(t)?t.then((e=>e??void 0)):t??void 0}async getPullRequestForCommitCore(e){const t=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return null;try{const t=await this.getProviderPullRequestForCommit(this._session,e)??null;return this._prsByCommit.set(e,t),this.resetRequestExceptionCount(),t}catch(i){return d.Yd.error(i,t),this._prsByCommit.delete(e),(i instanceof o._7||i instanceof o.Bn)&&this.trackRequestException(),null}}async ensureSession(e,t=!1){if(null!=this._session)return this._session;if(!c.D.get("integrations.enabled"))return;if(e)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;let i;try{i=this.container.integrationAuthentication.hasProvider(this.authProvider.id)?await this.container.integrationAuthentication.getSession(this.authProvider.id,this.authProviderDescriptor,{createIfNeeded:e,forceNewSession:t}):await(0,r.a_)(this.getIgnoreSSLErrors(),(()=>s.authentication.getSession(this.authProvider.id,this.authProvider.scopes,{createIfNone:t?void 0:e,silent:!e&&!t||void 0,forceNewSession:!!t||void 0})))}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;i=null}return void 0!==i||e||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=i??null,this.resetRequestExceptionCount(),null!=i&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask((()=>{this._onDidChange.fire(),this.container.richRemoteProviders.connected(this.key)}))),i??void 0}}async function y(e,t){const i=`Connecting to a ${e} instance for rich integration features requires GitLens Pro.`;for(;;){const e=await t.subscription.getSubscription();if(!1===e.account?.verified){const e={title:"Resend Verification"},r={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`${i}\n\nYou must verify your email address before you can continue.`,{modal:!0},e,r)===e&&await t.subscription.resendVerification())continue;return!1}const r=e.plan.effective.id;if((0,l.aG)(r))break;if(null==e.account&&!(0,l.gA)(e)){const e={title:"Start a GitLens Pro Trial"},r={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`${i}\n\nDo you want to also try GitLens+ features on private repos, free for 3 days?`,{modal:!0},e,r)!==e)return!1;t.subscription.startPreviewTrial();break}if(null==e.account){const e={title:"Extend Your GitLens Pro Trial"},r={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`${i}\n\nDo you want to continue to use GitLens+ features on private repos, free for an additional 7-days?`,{modal:!0},e,r)===e&&await t.subscription.loginOrSignUp())continue}else{const e={title:"Upgrade to Pro"},r={title:"Cancel",isCloseAffordance:!0};await s.window.showWarningMessage(`${i}\n\nDo you want to continue to use GitLens+ features on private repos?`,{modal:!0},e,r)===e&&t.subscription.purchase()}return!1}return!0}v([(0,u.cM)()],RichRemoteProvider.prototype,"connect",1),v([(0,h.H)(),(0,u.cM)()],RichRemoteProvider.prototype,"disconnect",1),v([(0,u.cM)()],RichRemoteProvider.prototype,"reauthenticate",1),v([(0,u.fF)()],RichRemoteProvider.prototype,"trackRequestException",1),v([(0,h.H)(),(0,u.fF)({exit:e=>`returned ${e}`})],RichRemoteProvider.prototype,"isConnected",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getAccountForCommit",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getAccountForEmail",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getDefaultBranch",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"searchMyPullRequests",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"searchMyIssues",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getIssueOrPullRequest",1),v([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getPullRequestForBranch",1),v([(0,u.fF)()],RichRemoteProvider.prototype,"getPullRequestForCommit",1),v([(0,u.fF)()],RichRemoteProvider.prototype,"getPullRequestForCommitCore",1),v([(0,h.H)()],RichRemoteProvider.prototype,"ensureSession",1)},6934:(e,t,i)=>{i.d(t,{FL:()=>a,KQ:()=>o,WY:()=>r,pD:()=>u,pU:()=>l,uP:()=>n,vx:()=>p});var s=i(4321);const r=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:"]);function n(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function o(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function l(e){return e.map((e=>`#:${"string"==typeof e?(0,s.zL)(e):e.name}`)).join(" ")}const c=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"]]),h=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change):)/gi;function u(e){const t=new Map;let i,r,n,o;do{if(o=h.exec(e.query),null==o?.groups)break;if(i=c.get(o.groups.op),({value:r,text:n}=o.groups),n&&(i="@me"===n?"author:":(0,s.D3)(n)?"commit:":"message:",r=n),i&&r){const e=t.get(i);null==e?t.set(i,[r]):e.push(r)}}while(null!=o);return t}const d=/"/g;function p(e,t){const i=u(e),s=new Set,r=[];let n,o,a=i.get("commit:");if(null!=a){for(const e of a)s.add(e.replace(d,""));n=s}else for([o,a]of(s.add("--all"),s.add(e.matchRegex?"--extended-regexp":"--fixed-strings"),e.matchRegex&&!e.matchCase&&s.add("--regexp-ignore-case"),i.entries()))switch(o){case"message:":e.matchAll&&s.add("--all-match");for(let t of a)t&&(t=t.replace(d,e.matchRegex?"\\b":""),t&&s.add(`--grep=${t}`));break;case"author:":for(let i of a)if(i&&(i=i.replace(d,e.matchRegex?"\\b":""),i)){if("@me"===i){if(null==t?.name)continue;i=t.name}i.startsWith("@")?s.add(`--author=${i.slice(1)}`):s.add(`--author=${i}`)}break;case"change:":for(let t of a)t&&(t.startsWith('"')&&(t=t.replace(d,""),!t)||s.add(e.matchRegex?`-G${t}`:`-S${t}`));break;case"file:":for(let t of a)if(t)if(t.startsWith('"')){if(t=t.replace(d,""),!t)continue;r.push(t)}else r.push(`${e.matchCase?"":":(icase)"}${t}`)}return{args:[...s.values()],files:r,shas:n}}},7925:(e,t,i)=>{i.d(t,{B8:()=>d,EB:()=>p,EZ:()=>f,G:()=>u,Lw:()=>v,Nl:()=>b,PS:()=>y,PV:()=>F,QP:()=>P,RR:()=>h,W8:()=>m,bi:()=>A,f3:()=>C,mm:()=>D,p1:()=>w,s$:()=>k,vF:()=>S,xs:()=>R,zk:()=>g});var s=i(9496),r=i(2540),n=i(5255),o=i(9529),a=i(5148),l=i(4336),c=i(8227);function h(e){return F("info",null==e?"There is no previous commit.":`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,r.kl.CommitHasNoPreviousCommitWarning)}function u(e){return F("warn",`${e}. The commit could not be found.`,r.kl.CommitNotFoundWarning)}async function d(e){const t={title:"Create Pull Request..."};return await F("info",`Would you like to create a Pull Request for branch '${e}'?`,r.kl.CreatePullRequestPrompt,{title:"Don't Show Again"},t)===t}async function p(){const e={title:"Disable Debug Logging"};return await F("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?",r.kl.SuppressDebugLoggingWarning,{title:"Don't Show Again"},e)===e}async function m(e){if(l.Yd.enabled(c.i.Error)){null!=await F("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&l.Yd.showOutputChannel()}else{null!=await F("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,o.P0)(n.Gh.EnableDebugLogging)}}function g(e){return F("warn",`${e}. The file is probably not under source control.`,r.kl.FileNotUnderSourceControlWarning)}function f(){return F("error","GitLens requires Git to be enabled. Please re-enable Git — set `git.enabled` to true and reload.",r.kl.GitDisabledWarning)}function w(){return F("error","GitLens is unable to use Git. Your Git configuration seems to be invalid. Please resolve any issues with your Git configuration and reload.")}function v(){return F("error","GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that 'git.path' is pointed to its installed location.",r.kl.GitMissingWarning)}function y(e,t){return F("error",`GitLens requires a newer version of Git (>= ${t}) than is currently installed (${e}). Please install a more recent version of Git.`,r.kl.GitVersionWarning)}function b(e){return F("error",`This GitLens pre-release version (${e}) has expired. Please upgrade to a more recent version.`)}function C(e){return F("warn",`${e}. The line has uncommitted changes.`,r.kl.LineUncommittedWarning)}function A(e){return F("warn",`${e}. No repository could be found.`,r.kl.NoRepositoryWarning)}function P(){return F("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.",r.kl.RebaseSwitchToTextWarning)}function D(e){return F("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,r.kl.IntegrationDisconnectedTooManyFailedRequestsWarning,void 0,{title:"OK"})}function S(e){return F("error",e,r.kl.IntegrationRequestFailed500Warning,void 0,{title:"OK"})}function k(e){return F("error",`${e} request timed out.`,r.kl.IntegrationRequestTimedOutWarning,void 0,{title:"OK"})}async function R(e){const t={title:"See What's New"};await F("info",`GitLens ${e} is here — check out what's new!`,void 0,null,t)===t&&await s.env.openExternal(s.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-release-notes-current/"))}async function F(e,t,i,r={title:"Don't Show Again"},...n){if(l.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(r)})`),null!=i&&a.D.get(`advanced.messages.${i}`))return void l.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(r)}) skipped`);let o;switch(null!=i&&null!==r&&n.push(r),e){case"info":o=await s.window.showInformationMessage(t,...n);break;case"warn":o=await s.window.showWarningMessage(t,...n);break;case"error":o=await s.window.showErrorMessage(t,...n)}return null==i||null!==r&&o!==r||(l.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(r)}) don't show again requested`),await function(e){const t={...a.D.get("advanced.messages")};t[e]=!0;for(const[e,i]of Object.entries(t))!0!==i&&delete t[e];return a.D.update("advanced.messages",t,s.ConfigurationTarget.Global)}(i),o!==r)?(l.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(r)}) returned ${null!=o?o.title:o}`),o):void 0}},2133:(e,t,i)=>{i.d(t,{YW:()=>l,x8:()=>Repositories});var s=i(7338),r=i(5255),n=i(3700),o=i(1526);const a=47;function l(e){const{path:t}=c(e);return t}function c(e){let t;switch(e.scheme.toLowerCase()){case r.sN.File:return t=(0,n.AH)(e.fsPath),{path:t,ignoreCase:!s.IJ};case r.sN.Git:case r.sN.GitLens:return t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!s.IJ};case r.sN.Virtual:case r.sN.GitHub:{t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1);const i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case r.sN.Vsls:case r.sN.VslsScc:return t=(0,n.IC)(e.path),t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!1};case r.sN.PRs:{t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1);const i=e.authority?.split("+",1)[0];return i===r.sN.GitHub?{path:i?`${i}/${t}`:t,ignoreCase:!1}:{path:t,ignoreCase:!s.IJ}}default:return t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!1}}}class Repositories{constructor(){this._count=0,this._trie=new o.QF(c)}get count(){return this._count}add(e){const t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(const i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){const i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},4968:(e,t,i)=>{i.d(t,{Cx:()=>r,EE:()=>d,PY:()=>u,RE:()=>o,Z1:()=>g,aG:()=>m,dz:()=>f,fV:()=>a,gA:()=>w,jc:()=>n,kU:()=>h,tL:()=>l,ww:()=>p});var s=i(7512),r=(e=>(e.Free="free",e.FreePlus="free+",e.Pro="pro",e.Teams="teams",e.Enterprise="enterprise",e))(r||{}),n=(e=>(e[e.VerificationRequired=-1]="VerificationRequired",e[e.Free=0]="Free",e[e.FreeInPreviewTrial=1]="FreeInPreviewTrial",e[e.FreePreviewTrialExpired=2]="FreePreviewTrialExpired",e[e.FreePlusInTrial=3]="FreePlusInTrial",e[e.FreePlusTrialExpired=4]="FreePlusTrialExpired",e[e.Paid=5]="Paid",e))(n||{});function o(e){const{account:t,plan:{actual:i,effective:s},previewTrial:r}=e;if(!1===t?.verified)return-1;if(i.id===s.id)switch(s.id){case"free":return null==r?0:2;case"free+":return 4;case"pro":case"teams":case"enterprise":return 5}switch(s.id){case"free":return null==r?0:1;case"free+":return 4;case"pro":return"free"===i.id?1:3;case"teams":case"enterprise":return 5}}function a(e,t,i,s,r,n=!1){return{id:e,name:l(e),bundle:t,cancelled:n,organizationId:i,startedOn:(s??new Date).toISOString(),expiresOn:null!=r?r.toISOString():void 0}}function l(e){switch(e){case"free+":return"GitLens Free";case"pro":return"GitLens Pro";case"teams":return"GitLens Teams";case"enterprise":return"GitLens Enterprise";default:return"GitLens"}}const c=new Map([[void 0,-1],["free",0],["free+",1],["pro",2],["teams",3],["enterprise",4]]);function h(e){return c.get(e)??-1}function u(e,t){return d(e.plan.effective.expiresOn,t)}function d(e,t){return null!=e?(0,s.hM)(Date.now(),new Date(e),t):void 0}function p(e){return m(e.plan.effective.id)}function m(e){return"free"!==e&&"free+"!==e}function g(e){const t=u(e);return null!=t&&t<=0}function f(e){return e.plan.actual.id!==e.plan.effective.id}function w(e){const t=d(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}},2800:(e,t,i)=>{i.d(t,{DZ:()=>o,GI:()=>d,IP:()=>r,Mo:()=>p,Qy:()=>h,XI:()=>c,h8:()=>g,jV:()=>u,qr:()=>a,uw:()=>f,vM:()=>l,zx:()=>n});var s=i(3105);function r(e){let t=0;for(const i of e)t+=i.length;return t}function n(e){return null==e?void 0:Array.isArray(e)?e:[e]}function o(e,t){let i=0;return e.reduce(((e,s)=>{const r=t(s,i++);return null!=r&&e.push(r),e}),[])}function a(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return-1}function l(e,t){return e.reduce(((e,i)=>{const s=t(i),r=e[s];return void 0===r?e[s]=[i]:r.push(i),e}),Object.create(null))}function c(e,t){return e.reduce(((e,i)=>{const s=t(i),r=e.get(s);return void 0===r?e.set(s,[i]):r.push(i),e}),new Map)}function h(e,t,i){return e.reduce(((e,s)=>{const r=i(s);if(null!=r){const i=t(s),n=e.get(i);void 0===n?e.set(i,[r]):n.push(r)}return e}),new Map)}function u(e,t){const i=[],s=e.length;e:for(const r of e[0]){let n=s-1;for(;n--;)if(!e[n+1].some((e=>t(e,r))))break e;i.some((e=>t(e,r)))||i.push(r)}return i}function d(e){return"string"==typeof e[0]}function p(e,t,i,s=!1,r){const n={name:"",relativePath:"",children:new Map,descendants:[]};let o=e.reduce(((e,s)=>{let r=e,n="";for(const e of t(s)){n=i(n,e),void 0===r.children&&(r.children=new Map);let t=r.children.get(e);void 0===t&&(t={name:e,relativePath:n,parent:r,children:void 0,descendants:void 0},r.children.set(e,t)),void 0===r.descendants&&(r.descendants=[]),r.descendants.push(s),r=t}return r.value=s,e}),n);return s&&(o=m(o,i,!0,r)),o}function m(e,t,i=!0,s){if(void 0===e.children)return e;const r=[...e.children.values()];for(const e of r)m(e,t,!1,s);if(!i&&1===r.length){const i=r[0];(void 0===i.value||s?.(i.value))&&(e.name=t(e.name,i.name),e.relativePath=i.relativePath,e.children=i.children,e.descendants=i.descendants,e.value=i.value)}return e}function g(e,t){return(0,s.v_)(new Set(e),t)}function f(e,t,i){return[...e.reduce(((e,s)=>{const r=t(s),n=e.get(r);if(void 0===n)e.set(r,s);else{const t=i(n,s);void 0!==t&&e.set(r,t)}return e}),new Map).values()]}},9529:(e,t,i)=>{i.d(t,{$$:()=>c,P0:()=>d,SI:()=>u,WD:()=>a,Zv:()=>m,_N:()=>h,b2:()=>g,dO:()=>p,xR:()=>l});var s=i(9496),r=i(5255),n=i(9996);const o=[];function a(){return e=>{o.push(e)}}function l(e,t,i){return s.commands.registerCommand(e,(function(...i){n.W.instance.telemetry.sendEvent("command",{command:e}),t.call(this,...i)}),i)}function c(e){return o.map((t=>new t(e)))}function h(e){return e}function u(e,t){return s.commands.executeCommand(`${r.Gh.ActionPrefix}${e}`,{...t,type:e})}function d(e,...t){return s.commands.executeCommand(e,...t)}function p(e,...t){return e!==r.nA.ExecuteDocumentSymbolProvider&&n.W.instance.telemetry.sendEvent("command/core",{command:e}),s.commands.executeCommand(e,...t)}function m(e,...t){return n.W.instance.telemetry.sendEvent("command/core",{command:e}),s.commands.executeCommand(e,...t)}function g(e,t,i){return s.commands.executeCommand(e,t,i)}},4298:(e,t,i)=>{i.d(t,{n:()=>s});class Comparer{}new class TextEditorComparer extends Comparer{equals(e,t,i={usePosition:!1}){return e===t||null!=e&&null!=t&&((!i.usePosition||e.viewColumn===t.viewColumn)&&e.document===t.document)}};const s=new class UriComparer extends Comparer{equals(e,t,i={exact:!1}){return e===t||null!=e&&null!=t&&(i.exact?e.toString()===t.toString():e.scheme===t.scheme&&e.fsPath===t.fsPath)}}},5148:(e,t,i)=>{i.d(t,{D:()=>o,V:()=>Configuration});var s=i(9496),r=i(5255),n=i(9967);class Configuration{constructor(){this._onDidChange=new s.EventEmitter,this._onDidChangeAny=new s.EventEmitter,this._onWillChange=new s.EventEmitter}static configure(e){e.subscriptions.push(s.workspace.onDidChangeConfiguration(o.onConfigurationChanged,o))}get onDidChange(){return this._onDidChange.event}get onDidChangeAny(){return this._onDidChangeAny.event}get onWillChange(){return this._onWillChange.event}onConfigurationChanged(e){e.affectsConfiguration(r.AD)?(this._onWillChange.fire(e),null!=this._overrides?.onChange&&(e=this._overrides.onChange(e)),this._onDidChangeAny.fire(e),this._onDidChange.fire(e)):this._onDidChangeAny.fire(e)}applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask((()=>this._overrides=void 0)))}get(e,t,i){const n=void 0===i?s.workspace.getConfiguration(r.AD,t).get(e):s.workspace.getConfiguration(r.AD,t).get(e,i);return null==this._overrides?.get?n:this._overrides.get(e,n)}getAll(e){const t=s.workspace.getConfiguration().get(r.AD);return e||null==this._overrides?.getAll?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?s.workspace.getConfiguration(void 0,t).get(e):s.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some((t=>e.affectsConfiguration(`${r.AD}.${t}`,i))):e.affectsConfiguration(`${r.AD}.${t}`,i))}inspect(e,t){return s.workspace.getConfiguration(r.AD,t).inspect(void 0===e?r.AD:e)}inspectAny(e,t){return s.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){const i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&(void 0===i.workspaceValue&&void 0===i.globalValue)}async migrate(e,t,i){const r=this.inspect(e);if(void 0===r)return!1;let n=!1;return void 0!==r.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(r.globalValue):r.globalValue,s.ConfigurationTarget.Global),n=!0),void 0!==r.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(r.workspaceValue):r.workspaceValue,s.ConfigurationTarget.Workspace),n=!0),void 0!==r.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(r.workspaceFolderValue):r.workspaceFolderValue,s.ConfigurationTarget.WorkspaceFolder),n=!0),n||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,s.ConfigurationTarget.Global),n=!0),n}async migrateIfMissing(e,t,i){const r=this.inspect(e);if(void 0===r)return;const n=this.inspect(t);void 0!==r.globalValue&&(void 0!==n&&void 0!==n.globalValue||await this.update(t,null!=i.migrationFn?i.migrationFn(r.globalValue):r.globalValue,s.ConfigurationTarget.Global)),void 0!==r.workspaceValue&&(void 0!==n&&void 0!==n.workspaceValue||await this.update(t,null!=i.migrationFn?i.migrationFn(r.workspaceValue):r.workspaceValue,s.ConfigurationTarget.Workspace)),void 0!==r.workspaceFolderValue&&(void 0!==n&&void 0!==n.workspaceFolderValue||await this.update(t,null!=i.migrationFn?i.migrationFn(r.workspaceFolderValue):r.workspaceFolderValue,s.ConfigurationTarget.WorkspaceFolder))}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return s.workspace.getConfiguration(r.AD).update(e,t,i)}updateAny(e,t,i,r){return s.workspace.getConfiguration(void 0,i===s.ConfigurationTarget.Global?void 0:r).update(e,t,i)}updateEffective(e,t){const i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,s.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,s.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,n.wy)(t,i.defaultValue)?void 0:t,s.ConfigurationTarget.Global)}}const o=new Configuration},7512:(e,t,i)=>{i.d(t,{Cz:()=>d,IH:()=>p,Zh:()=>m,hM:()=>f,p6:()=>g});const s=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,r=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,n=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]];let o;const a=new Map;let l,c,h;const u=new Map;function d(e){l="string"==typeof e?"system"===e?void 0:[e]:e??void 0,c=void 0,h=void 0,a.clear(),u.clear(),o=void 0}function p(e,t){const i=new Date(e.getTime());for(const[e,s]of Object.entries(t))if(s)switch(e){case"years":i.setFullYear(i.getFullYear()+s);break;case"months":i.setMonth(i.getMonth()+s);break;case"days":i.setDate(i.getDate()+s);break;case"hours":i.setHours(i.getHours()+s);break;case"minutes":i.setMinutes(i.getMinutes()+s);break;case"seconds":i.setSeconds(i.getSeconds()+s)}return i}function m(e,t){const i=("number"==typeof e?e:e.getTime())-(new Date).getTime();for(const[e,s,r,a]of n){const n=Math.abs(i);if(n>=s||1e3===s){if(t){if(null==o&&(null!=h?o=h.resolvedOptions().locale:null!=c?o=c.resolvedOptions().locale:(h=new Intl.RelativeTimeFormat(l,{localeMatcher:"best fit",numeric:"always",style:"narrow"}),o=h.resolvedOptions().locale)),"en"===o||o?.startsWith("en-")){return`${Math.round(n/r)}${a}`}return null==h&&(h=new Intl.RelativeTimeFormat(l,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),h.format(Math.round(i/r),e)}return null==c&&(c=new Intl.RelativeTimeFormat(l,{localeMatcher:"best fit",numeric:"auto",style:"long"})),c.format(Math.round(i/r),e)}}return""}function g(e,t,i,n=!0){const o=`${i??""}:${t=t??void 0}`;let c=a.get(o);if(null==c){const e=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};const t=r.exec(e);if(null!=t?.groups){const{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}const i={localeMatcher:"best fit"};for(const{groups:t}of e.matchAll(s))if(null!=t)for(const e in t){const s=t[e];if(null!=s)switch(e){case"year":i.year=4===s.length?"numeric":"2-digit";break;case"month":switch(s.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":i.day="DD"===s?"2-digit":"numeric";break;case"weekday":switch(s.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===s.length?"2-digit":"numeric",i.hour12="hh"===s||"h"===s;break;case"minute":i.minute=2===s.length?"2-digit":"numeric";break;case"second":i.second=2===s.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===s.length?"long":"short"}}return i}(t);let h;h=null==i?l:"system"===i?void 0:[i],c=new Intl.DateTimeFormat(h,e),n&&a.set(o,c)}if(null==t||r.test(t))return c.format(e);function h(e){const t=`${i??""}:time:${e}`;let s=a.get(t);if(null==s){const r={localeMatcher:"best fit",timeStyle:e};let o;o=null==i?l:"system"===i?void 0:[i],s=new Intl.DateTimeFormat(o,r),n&&a.set(t,s)}return s}const u=c.formatToParts(e);return t.replace(s,((t,i,s,r,n,o,a,l,c,d,p,m,g,f,w)=>{if(null!=i)return i.substring(1,i.length-1);for(const t in w){const i=w[t];if(null==i)continue;const s=u.find((e=>e.type===t));if("Do"===i&&"day"===s?.type)return v(Number(s.value));if("a"===i&&"dayPeriod"===s?.type){const t=h("short").formatToParts(e).find((e=>"dayPeriod"===e.type));return` ${(t??s)?.value??""}`}return s?.value??""}return""}))}function f(e,t,i){const s=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime());switch(i){case"days":return Math.floor(s/864e5);case"hours":return Math.floor(s/36e5);case"minutes":return Math.floor(s/6e4);case"seconds":return Math.floor(s/1e3);default:return s}}const w=["th","st","nd","rd"];function v(e){const t=e%100;return`${e}${w[(t-20)%10]??w[t]??w[0]}`}},5432:(e,t,i)=>{i.d(t,{H:()=>n});var s=i(7469),r=i(9610);function n(e){return(t,i,n)=>{let o;if("function"==typeof n.value?o=n.value:"function"==typeof n.get&&(o=n.get),null==o)throw new Error("Not supported");const a=`$gate$${i}`;n.value=function(...t){const i=(0,r.S)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let n=this[i];if(void 0===n){let e;try{if(e=o.apply(this,t),null==e||!(0,s.tI)(e))return e;this[i]=n=e.then((e=>(this[i]=void 0,e))).catch((e=>{throw this[i]=void 0,e}))}catch(e){throw this[i]=void 0,e}}return n}}}},4241:(e,t,i)=>{i.d(t,{cM:()=>m,fF:()=>p,hJ:()=>d});var s=i(4372),r=i(4486),n=i(4336),o=i(8227),a=i(6004),l=i(7469),c=i(4627);const h="",u=Symbol("logInstanceNameFn");function d(e){return t=>{t[u]=e}}function p(e){return m(e,!0)}function m(e,t=!1){let i,d,p,m,g,f,w=0,v=!1,y=!1,b=!0;null!=e&&({args:i,condition:d,enter:p,exit:m,prefix:g,sanitize:f,logThreshold:w=0,scoped:v=!0,singleLine:y=!1,timed:b=!0}=e),w>0&&(y=!0,b=!0),b&&(v=!0);const C=t?n.Yd.debug.bind(n.Yd):n.Yd.log.bind(n.Yd),A=n.Yd.warn.bind(n.Yd);return(e,P,D)=>{let S,k;if("function"==typeof D.value?(S=D.value,k="value"):"function"==typeof D.get&&(S=D.get,k="get"),null==S||null==k)throw new Error("Not supported");const R=(0,r.ZS)(S);D[k]=function(...r){const D=(0,a.OD)();if(!n.Yd.isDebugging&&!n.Yd.enabled(o.i.Debug)&&(!n.Yd.enabled(o.i.Info)||t)||null!=d&&!d(...r))return S.apply(this,r);let k;null!=this?(k=(0,n.q4)(this),this.constructor?.[u]&&(k=e.constructor[u](this,k))):k=h;let F,$=`${v?`[${D.toString(16).padStart(5)}] `:h}${k?`${k}.`:h}${P}`;null!=g&&($=g({id:D,instance:this,instanceName:k,name:P,prefix:$},...r)),v&&(F={scopeId:D,prefix:$},(0,a.DS)(D,F));const T=null!=p?p(...r):h;let x;if(!1===i||0===r.length)x=h,y||C(`${$}${T}`);else{let e;x="";let s,a,l,c=-1;for(l of r){if(s=R[++c],e=i?.[c],null!=e){if("boolean"==typeof e)continue;if(x.length>0&&(x+=", "),"string"==typeof e){x+=e;continue}a=String(e(l))}else x.length>0&&(x+=", "),a=n.Yd.toLoggable(l,f);x+=s?`${s}=${a}`:a}y||C(`${$}${T}${x&&(t||n.Yd.enabled(o.i.Debug)||n.Yd.isDebugging)?`(${x})`:h}`)}if(y||b||null!=m){const e=b?(0,s.a)():void 0,i=t=>{const i=void 0!==e?` • ${(0,c.qk)(e)} ms`:h;y?n.Yd.error(t,`${$}${T}${x?`(${x})`:h}`,`failed${F?.exitDetails?F.exitDetails:h}${i}`):n.Yd.error(t,$,`failed${F?.exitDetails?F.exitDetails:h}${i}`),v&&(0,a.Fp)(D)};let u;try{u=S.apply(this,r)}catch(e){throw i(e),e}const d=i=>{let s,r,l,u;if(null!=e?(s=(0,c.qk)(e),s>o.O?(r=A,l=` • ${s} ms (slow)`):(r=C,l=` • ${s} ms`)):(l=h,r=C),null!=m)try{u=m(i)}catch(e){u=`@log.exit error: ${e}`}else u="completed";y?(0===w||s>w)&&r(`${$}${T}${x&&(t||n.Yd.enabled(o.i.Debug)||n.Yd.isDebugging)?`(${x})`:h} ${u}${F?.exitDetails?F.exitDetails:h}${l}`):r(`${$}${x&&(t||n.Yd.enabled(o.i.Debug)||n.Yd.isDebugging)?`(${x})`:h} ${u}${F?.exitDetails?F.exitDetails:h}${l}`),v&&(0,a.Fp)(D)};if(null!=u&&(0,l.tI)(u)){u.then(d).catch(i)}else d(u);return u}return S.apply(this,r)}}}},4488:(e,t,i)=>{i.d(t,{H:()=>r});var s=i(9610);function r(e){return(t,i,r)=>{let n,o;if("function"==typeof r.value)n=r.value,o="value";else{if("function"!=typeof r.get)throw new Error("Not supported");n=r.get,o="get"}if(null==n)throw new Error("Not supported");const a=`$memoize$${i}`;let l;r[o]=function(...t){const i=(0,s.S)(a,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?(l=this[i],l):(l=n.apply(this,t),Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:l}),l)}}}},9610:(e,t,i)=>{i.d(t,{S:()=>u});var s=i(9496),r=i(9996),n=i(5367),o=i(6450),a=i(9502),l=i(6922);function c(e,t){return""===e||null==t||"object"!=typeof t?t:t instanceof Error?String(t):t instanceof s.Uri?"sha"in t&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,n.BF)(t)||(0,o.f_)(t)||(0,a.YR)(t)||(0,l.Jc)(t)?t.toString():(0,r.N)(t)?"<container>":t}function h(...e){if(0===e.length)return"";if(1!==e.length)return JSON.stringify(e,c);const t=e[0];if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:return t instanceof Error?String(t):t instanceof s.Uri?"sha"in t&&"string"==typeof t.sha&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,n.BF)(t)||(0,o.f_)(t)||(0,a.YR)(t)||(0,l.Jc)(t)?t.toString():(0,r.N)(t)?"<container>":JSON.stringify(t,c)}}function u(e,t,...i){if(0===i.length)return e;let s;if(null!=t)try{s=t(...i)}catch{s=h(...i)}else s=h(...i);return`${e}$${s}`}},8786:(e,t,i)=>{function s(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{M:()=>s})},2185:(e,t,i)=>{function s(e){return(t,i,s)=>{const r=e((e=>(r.dispose(),t.call(i,e))),null,s);return r}}i.d(t,{IH:()=>s,ue:()=>n});const r=(e,t)=>t(e);function n(e,t=r){let i,s;return{promise:new Promise(((r,n)=>{i=()=>{i=void 0,n()},s=e((async e=>{try{await t(e,r,n)}catch(e){n(e)}}))})).then((e=>(s.dispose(),e)),(e=>{throw s.dispose(),e})),cancel:()=>i?.()}}},1774:(e,t,i)=>{i.d(t,{d:()=>n});var s=i(3700),r=i(4627);function n(e,t){const i=(0,s.M)(e);let n=(0,s.EZ)(i);if(null!=t?.truncateTo&&n.length>=t.truncateTo)return(0,r.ro)(n,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&n.length+t.suffix.length>=t.truncateTo)return`${(0,r.ro)(n,t.truncateTo-t.suffix.length)}${t.suffix}`;n+=t.suffix}if(t?.fileOnly)return n;const o=(0,s.Fd)(i,t?.relativeTo);return o?(n=`/${n}`,null!=t?.truncateTo&&n.length+o.length>=t.truncateTo?`${(0,r.AO)(o,t.truncateTo-n.length)}${n}`:`${o}${n}`):n}},4486:(e,t,i)=>{i.d(t,{Ds:()=>V,DH:()=>se,ZS:()=>ee,is:()=>te,IH:()=>ie,df:()=>re,NX:()=>ne});const s=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};const r="object"==typeof global&&global&&global.Object===Object&&global;var n="object"==typeof self&&self&&self.Object===Object&&self;const o=r||n||Function("return this")();const a=function(){return o.Date.now()};var l=/\s/;const c=function(e){for(var t=e.length;t--&&l.test(e.charAt(t)););return t};var h=/^\s+/;const u=function(e){return e?e.slice(0,c(e)+1).replace(h,""):e};const d=o.Symbol;var p=Object.prototype,m=p.hasOwnProperty,g=p.toString,f=d?d.toStringTag:void 0;const w=function(e){var t=m.call(e,f),i=e[f];try{e[f]=void 0;var s=!0}catch(e){}var r=g.call(e);return s&&(t?e[f]=i:delete e[f]),r};var v=Object.prototype.toString;const y=function(e){return v.call(e)};var b="[object Null]",C="[object Undefined]",A=d?d.toStringTag:void 0;const P=function(e){return null==e?void 0===e?C:b:A&&A in Object(e)?w(e):y(e)};const D=function(e){return null!=e&&"object"==typeof e};var S="[object Symbol]";const k=function(e){return"symbol"==typeof e||D(e)&&P(e)==S};var R=NaN,F=/^[-+]0x[0-9a-f]+$/i,$=/^0b[01]+$/i,T=/^0o[0-7]+$/i,x=parseInt;const I=function(e){if("number"==typeof e)return e;if(k(e))return R;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=u(e);var i=$.test(e);return i||T.test(e)?x(e.slice(2),i?2:8):F.test(e)?R:+e};var _="Expected a function",O=Math.max,B=Math.min;const E=function(e,t,i){var r,n,o,l,c,h,u=0,d=!1,p=!1,m=!0;if("function"!=typeof e)throw new TypeError(_);function g(t){var i=r,s=n;return r=n=void 0,u=t,l=e.apply(s,i)}function f(e){var i=e-h;return void 0===h||i>=t||i<0||p&&e-u>=o}function w(){var e=a();if(f(e))return v(e);c=setTimeout(w,function(e){var i=t-(e-h);return p?B(i,o-(e-u)):i}(e))}function v(e){return c=void 0,m&&r?g(e):(r=n=void 0,l)}function y(){var e=a(),i=f(e);if(r=arguments,n=this,h=e,i){if(void 0===c)return function(e){return u=e,c=setTimeout(w,t),d?g(e):l}(h);if(p)return clearTimeout(c),c=setTimeout(w,t),g(h)}return void 0===c&&(c=setTimeout(w,t)),l}return t=I(t)||0,s(i)&&(d=!!i.leading,o=(p="maxWait"in i)?O(I(i.maxWait)||0,t):o,m="trailing"in i?!!i.trailing:m),y.cancel=function(){void 0!==c&&clearTimeout(c),u=0,r=h=n=c=void 0},y.flush=function(){return void 0===c?l:v(a())},y};var M=1/0,W=17976931348623157e292;const L=function(e){return e?(e=I(e))===M||e===-M?(e<0?-1:1)*W:e==e?e:0:0===e?e:0};const U=function(e){var t=L(e),i=t%1;return t==t?i?t-i:t:0};var N="Expected a function";const G=function(e,t){var i;if("function"!=typeof t)throw new TypeError(N);return e=U(e),function(){return--e>0&&(i=t.apply(this,arguments)),e<=1&&(t=void 0),i}};const H=function(e){return G(2,e)};function V(e,t,i){const{track:s,...r}={track:!1,...i??{}};if(!0!==s)return E(e,t,r);let n=!1;const o=E((function(...t){return n=!1,e.apply(this,t)}),t,i),a=function(...e){return n=!0,o.apply(this,e)};return a.pending=function(){return n},a.cancel=function(){return o.cancel.apply(o)},a.flush=function(){return o.flush.apply(o)},a}const Q=",",q="",Y="=",j="{",z="(",K=")",J=/\(([\s\S]*)\)/,Z=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,X=/\s?=.*$/;function ee(e){if("function"!=typeof e)throw new Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e);t=t.replace(Z,q)||t,t=t.slice(0,t.indexOf(j));let i=t.indexOf(z),s=t.indexOf(K);i=i>=0?i+1:0,s=s>0?s:t.indexOf(Y),t=t.slice(i,s),t=`(${t})`;const r=J.exec(t);return null!=r?r[1].split(Q).map((e=>e.trim().replace(X,q))):[]}function te(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function ie(e){return H(e)}function se(e,t){let i;const s={dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}};return i=setInterval(e,t),s}async function re(e,t,i){for(const s of t)try{await e.apply(i,s)}catch{}}function ne(e,t){return e>=t?e*e+e+t:e+t*t}},3105:(e,t,i)=>{function s(e,t){let i,s=0;for(;i=e.next(),!i.done;)(void 0===t||t(i.value))&&s++;return s}function r(e,t){for(const i of e)if(!t(i))return!1;return!0}function*n(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)}function*o(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}}function a(e,t){for(const i of e)if(t(i))return i;return null}function l(e){return e[Symbol.iterator]().next().value}function*c(e,t){for(const i of e)yield*t(i)}function h(e,t){const i=e[Symbol.iterator]();let s=i.next();if(s.done)return"";let r=String(s.value);for(;s=i.next(),!s.done;)r+=`${t}${s.value}`;return r}function u(e){let t;for(t of e);return t}function*d(e,t){for(const i of e)yield t(i)}function p(e,t){for(const i of e)if(t(i))return!0;return!1}function*m(...e){for(const t of e)for(const e of t)yield e}function g(e,t,i){const s=new Map;for(const r of e){const e=t(r),n=s.get(e);if(void 0===n)s.set(e,r);else{const t=i(n,r);void 0!==t&&s.set(e,t)}}return s.values()}i.d(t,{DZ:()=>o,G:()=>p,G0:()=>m,Ps:()=>l,QX:()=>s,UI:()=>d,VS:()=>c,Z$:()=>u,hX:()=>n,sE:()=>a,uw:()=>g,v_:()=>h,yW:()=>r})},8227:(e,t,i)=>{i.d(t,{O:()=>s,i:()=>r});const s=500;var r=(e=>(e.Off="off",e.Error="error",e.Warn="warn",e.Info="info",e.Debug="debug",e))(r||{})},6004:(e,t,i)=>{i.d(t,{DS:()=>h,Fp:()=>o,OD:()=>c,QR:()=>l,UH:()=>a});const s=2**30,r=new Map;let n=0;function o(e){r.delete(e)}function a(){return r.get(n)}function l(e){const t=c();return{scopeId:t,prefix:`[${String(t).padStart(5)}] ${e}`}}function c(){return n===s&&(n=0),++n}function h(e,t){r.set(e,t)}},4336:(e,t,i)=>{i.d(t,{Nu:()=>l,Yd:()=>n,q4:()=>a});var s=i(8227);const r="";const n=new class Logger2{constructor(){this._isDebugging=!1,this.level=0,this._logLevel=s.i.Off}configure(e,t,i=!1){this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=o(e)}get isDebugging(){return this._isDebugging}get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=o(this._logLevel),e===s.i.Off?(this.output?.dispose?.(),this.output=void 0):this.output=this.output??this.provider.createChannel(this.provider.name)}get timestamp(){return`[${(new Date).toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){if(this.level<4&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!0,t)}`)}error(e,t,...i){if(this.level<1&&!this.isDebugging)return;let s;if(s=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??r}`,null==s){const t=e instanceof Error?e.stack:void 0;if(t){const e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(s=e[1])}}this.isDebugging&&console.error(this.timestamp,`[${this.provider.name}]`,s??r,...i,e),null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${s??r}${this.toLoggableParams(!1,i)}\n${String(e)}`)}log(e,...t){if(this.level<3&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!1,t)}`)}warn(e,...t){if(this.level<2&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.warn(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!1,t)}`)}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);const i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,t)}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return r;const i=t.map((e=>this.toLoggable(e))).join(", ");return 0!==i.length?` — ${i}`:r}};function o(e){switch(e){case s.i.Off:return 0;case s.i.Error:return 1;case s.i.Warn:return 2;case s.i.Info:return 3;case s.i.Debug:return 4;default:return 0}}function a(e){let t;if("function"==typeof e){if(null==e.prototype?.constructor)return e.name;t=e.prototype.constructor.name??r}else t=e.constructor?.name??r;const i=t.indexOf("_");return-1===i?t:t.substr(i+1)}const l={enabled:e=>n.enabled(e),log:(e,t,i,...r)=>{switch(e){case s.i.Error:n.error("",t,i,...r);break;case s.i.Warn:n.warn(t,i,...r);break;case s.i.Info:n.log(t,i,...r);break;default:n.debug(t,i,...r)}}}},9967:(e,t,i)=>{function s(e,t){if(e===t)return!0;if(null==e||null==t)return!1;const i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function r(e,t){const i=null!=t?.skipPaths&&t.skipPaths.length?t?.prefix?t.skipPaths.map((e=>`${t.prefix}.${e}`)):t.skipPaths:void 0,s=t?.skipNulls??!1,r=t?.stringify??!1;const n=Object.create(null);return function e(n,o,a){if(!i?.includes(o))if(Object(a)!==a)if(null==a){if(s)return;n[o]=r?"all"==r?JSON.stringify(a):a??null:a}else n[o]="string"==typeof a?a:r?"number"==typeof a||"boolean"==typeof a?a:JSON.stringify(a):a;else if(Array.isArray(a)){const i=a.length;if(0===i)return;if("join"===t?.arrays)n[o]=a.join(",");else for(let t=0;t<i;t++)e(n,`${o}[${t}]`,a[t])}else{const t=Object.entries(a);if(0===t.length)return;for(const[i,s]of t)e(n,o?`${o}.${i}`:i,s)}}(n,t?.prefix??"",e),n}function n(e,t,i){if(null==e&&(e=Object.create(null)),null==i||"boolean"==typeof i&&!i){const{[t]:i,...s}=e;e=s}else e[t]="object"==typeof i?{...i}:i;return e}i.d(t,{iC:()=>n,wy:()=>s,xH:()=>r})},3700:(e,t,i)=>{i.d(t,{$d:()=>y,AH:()=>P,B9:()=>f,DZ:()=>s.extname,EZ:()=>s.basename,Fd:()=>S,Gf:()=>D,IC:()=>p,M:()=>w,Mh:()=>C,RQ:()=>s.join,UG:()=>v,XX:()=>s.dirname,YP:()=>b,tD:()=>g,tE:()=>A,uo:()=>k});var s=i(1017),r=i(9496),n=i(7338),o=i(5255);const a=47,l=/(?<=^\/?)([A-Z])(?=:\/)/,c=/^([a-zA-Z][\w+.-]+):/,h=/\\/g,u=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,d=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function p(e){if("string"==typeof e&&A(e)&&(e=r.Uri.parse(e)),"string"==typeof e)return m(e)?e:`/~0${(e=P(e)).charCodeAt(0)===a?e:`/${e}`}`;let t=e.fsPath;return m(t)?e:(t=P(t),e.with({path:`/~0${t.charCodeAt(0)===a?t:`/${t}`}`}))}function m(e){return u.test(e)}function g(e){return d.test(e)}function f(e,t,i,s){if(0===e.length||0===t.length)return 0;let r;(s??!n.IJ)&&(e=e.toLowerCase(),t=t.toLowerCase());let o=0;for(let s=0;s<e.length&&(r=e[s],r===t[s]);s++)r===i&&(o=s);return o}function w(e){if("string"==typeof e){if(!c.test(e))return P(e);e=r.Uri.parse(e,!0)}return P(e.scheme===o.sN.File?e.fsPath:e.path)}function v(e){return c.exec(e)?.[1]}function y(e,t){return"string"==typeof t&&(t=P(t)).charCodeAt(0)!==a&&(t=`/${t}`),"string"==typeof e&&(e=P(e)).charCodeAt(0)!==a&&(e=`/${e}`),"string"==typeof t?1===t.length||("string"==typeof e?e:e.path).startsWith(t.charCodeAt(t.length-1)===a?t:`${t}/`):"string"==typeof e?1===t.path.length||e.startsWith(t.path.charCodeAt(t.path.length-1)===a?t.path:`${t.path}/`):t.scheme===e.scheme&&t.authority===e.authority&&(1===t.path.length||e.path.startsWith(t.path.charCodeAt(t.path.length-1)===a?t.path:`${t.path}/`))}function b(e){return!A(e)&&(0,s.isAbsolute)(e)}function C(e){return"*"===(0,s.basename)(e)}function A(e){return c.test(e)}function P(e){return e?((e=e.replace(h,"/")).charCodeAt(e.length-1)===a&&(n.ED&&3===e.length&&":"===e[1]||(e=e.slice(0,-1))),n.ED&&(e=e.replace(l,(e=>e.toLowerCase()))),e):e}function D(e,t,i){e=c.test(e)?r.Uri.parse(e,!0).path:P(e);const s=f(`${t=c.test(t)?r.Uri.parse(t,!0).path:P(t)}/`,`${e}/`,"/",i);return s>0?t.substring(s+1):t}function S(e,t){const i=(0,s.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;const[r]=k(i,t);return r}function k(e,t,i=!1,n){if(e=w(e),t){let i;c.test(t)?(i=r.Uri.parse(t,!0),t=w(i)):t=P(t);const s=f(`${t}/`,`${e}/`,"/",n);s>0?(t=e.substring(0,s),e=e.substring(s+1)):e.charCodeAt(0)===a&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=P(i?(0,s.dirname)(e):""),e=i?(0,s.basename)(e):e;return[e,t]}},7469:(e,t,i)=>{i.d(t,{HO:()=>o,PK:()=>PromiseCancelledError,PQ:()=>a,Sb:()=>l,Wx:()=>n,Yj:()=>r,ag:()=>u,tI:()=>c,xu:()=>h});var s=i(3105);function r(...e){return new Promise(((t,i)=>{const s=[];let r=!1;for(const n of e)(async()=>{try{const e=await n;if(r)return;t(e),r=!0}catch(e){s.push(e)}finally{r||e.length-s.length<1&&(i(new AggregateError(s)),r=!0)}})()}))}async function*n(e){const t=new Map(e.map(((e,t)=>[t,e.then((e=>({index:t,value:e,status:"fulfilled"})),(e=>({index:t,reason:e,status:"rejected"})))])));for(;t.size;){const e=await Promise.race(t.values());t.delete(e.index),yield e}}class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}}class PromiseCancelledErrorWithId extends PromiseCancelledError{constructor(e,t,i){super(t,i),this.id=e}}function o(e,t,i={}){return null==t||"number"==typeof t&&t<=0?e:new Promise(((s,r)=>{let n,o,a=!1;"number"==typeof t?n=setTimeout((()=>{"function"==typeof i.onDidCancel?i.onDidCancel(s,r):r(new PromiseCancelledError(e,i.cancelMessage??"TIMED OUT"))}),t):o=t.onCancellationRequested((()=>{o?.dispose(),a||("function"==typeof i.onDidCancel?i.onDidCancel(s,r):r(new PromiseCancelledError(e,i.cancelMessage??"CANCELLED")))})),e.then((()=>{a=!0,null!=n&&clearTimeout(n),o?.dispose(),s(e)}),(e=>{a=!0,null!=n&&clearTimeout(n),o?.dispose(),r(e)}))}))}function a(){const e={promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise(((t,i)=>{e.fulfill=t,e.cancel=i})),e}function l(e,t=undefined){return"fulfilled"===e.status?e.value:t}function c(e){return e instanceof Promise||"function"==typeof e?.then}async function h(e,t,i){let r;return null!=t&&"number"!=typeof t?r=new Map((0,s.UI)(e,(e=>[e,t(e)]))):(i=t,r=e),r instanceof Map?new Map(await Promise.all((0,s.UI)(r.entries(),null==i?([e,t])=>t.then((t=>[e,t])):([e,t])=>Promise.race([t,new Promise((s=>setTimeout((()=>s(new PromiseCancelledErrorWithId(e,t,"TIMED OUT"))),i)))]).then((t=>[e,t]))))):Promise.all(null==i?r:r.map((e=>Promise.race([e,new Promise((t=>setTimeout((()=>t(new PromiseCancelledError(e,"TIMED OUT"))),i)))]))))}async function u(){await new Promise((e=>queueMicrotask(e)))}class AggregateError extends Error{constructor(e){super(`AggregateError(${e.length})\n${e.map((e=>`\t${String(e)}`)).join("\n")}`),this.errors=e,Error.captureStackTrace?.(this,AggregateError)}}},6398:(e,t,i)=>{i.d(t,{u:()=>c});var s=i(4372),r=i(5255),n=i(4336),o=i(8227),a=i(6004);const l=class{constructor(e,t,...i){let r,l;if(this.scope=e,this.instance=`[${String((0,a.OD)()).padStart(5)}] `,"string"!=typeof e&&(r=e,e="",this.instance=""),l="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??o.i.Info,this.logProvider=t?.provider??n.Nu,this._time=(0,s.a)(),null!=l){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,r,`${this.instance}${e}${l.message??""}${l.suffix??""}`,...i):this.logProvider.log(this.logLevel,r,`${this.instance}${e}${l.message??""}${l.suffix??""}`)}}get startTime(){return this._time}elapsed(){const[e,t]=(0,s.a)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(this.scope,e,!1)}restart(e){this.logCore(this.scope,e,!0),this._time=(0,s.a)()}stop(e){this.restart(e)}logCore(e,t,i){if(!this.logProvider.enabled(this.logLevel))return;let n;if("string"!=typeof e&&(n=e,e=""),!i)return void this.logProvider.log(this.logLevel,n,`${this.instance}${e}${t?.message??""}${t?.suffix??""}`);const[a,l]=(0,s.a)(this._time),c=1e3*a+Math.floor(l/1e6),h=`${this.instance}${e}${t?.message??""}`;this.logProvider.log(c>250?o.i.Warn:this.logLevel,n,`${h?`${h} ${r.NE.Dot} `:""}${c} ms${t?.suffix??""}`)}static start(e,t,...i){l.watches.get(e)?.log(),l.watches.set(e,new l(e,t,...i))}static log(e,t){l.watches.get(e)?.log(t)}static stop(e,t){l.watches.get(e)?.stop(t),l.watches.delete(e)}};let c=l;c.watches=new Map},4627:(e,t,i)=>{i.d(t,{US:()=>n,zY:()=>a,TT:()=>h,j_:()=>u,QC:()=>J,se:()=>d,qq:()=>l,ry:()=>f,yI:()=>w,qk:()=>v,UM:()=>y,sC:()=>C,Gg:()=>R,dz:()=>Y,sX:()=>T,Qu:()=>O,vk:()=>M,Q_:()=>W,eh:()=>L,_6:()=>U,dm:()=>c,pW:()=>N,$G:()=>G,AO:()=>H,ro:()=>V});var s=i(4372),r=i(5255);function n(e){return Buffer.from(e).toString("base64")}const o=new Intl.Collator(void 0,{sensitivity:"accent"});function a(e,t){const i=o.compare(e,t);return 0===i?0:i>0?1:-1}function l(e,t){return null==e&&null==t||null!=e&&null!=t&&0===a(e,t)}const c=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"}).compare;function h(e,t,i=0,s=e.length,r=0,n=t.length){for(;i<s&&r<n;i++,r++){const s=e.charCodeAt(i),n=t.charCodeAt(r);if(s<n)return-1;if(s>n)return 1}const o=s-i,a=n-r;return o<a?-1:o>a?1:0}function u(e,t,i=0,s=e.length,r=0,n=t.length){for(;i<s&&r<n;i++,r++){const o=e.charCodeAt(i),a=t.charCodeAt(r);if(o===a)continue;const l=o-a;if((32!==l||!E(a))&&(-32!==l||!E(o)))return B(o)&&B(a)?l:h(e.toLowerCase(),t.toLowerCase(),i,s,r,n)}const o=s-i,a=n-r;return o<a?-1:o>a?1:0}function d(e){return e?.replace(/[<>&"]/g,(e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}}))}const p=/[\\`*_{}[\]()#+\-.!]/g,m=/^===/gm,g=/\r?\n/g;function f(e,t={}){return e=e.replace(p,"\\$&").replace(m,"​==="),t.quoted?e.trim().replace(g,"\t\\\n>  "):e}function w(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function v(e){const[t,i]=(0,s.a)(e);return 1e3*t+Math.floor(i/1e6)}function*y(e,t="\n"){if("string"==typeof e){let i=0;for(;i<e.length;){let s=e.indexOf(t,i);-1===s&&(s=e.length),yield e.substring(i,s),i=s+1}return}let i,s=0;for(let r of e){s++,i&&(r=i+r,i=void 0);let n=0;for(;n<r.length;){let o=r.indexOf(t,n);if(-1===o){if(s!==e.length){i=r.substring(n);break}o=r.length}yield r.substring(n,o),n=o+1}}}const b=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function C(e){return b[e-1]??""}const A=/\$\{('.*?[^\\]'|\W*)?([^|]*?)(?:\|(\d+)(-|\?)?)?('.*?[^\\]'|\W*)?\}/g,P=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,D="'",S=/(\\')/g,k=/^'?(.*?)'?$/s;function R(e){const t=[];let i;for(;;){if(i=A.exec(e),null==i)break;let[,s,r,n,o,a]=i;null!=s&&(i=k.exec(s),null!=i&&([,s]=i,s=s.replace(S,D))),null!=a&&(i=k.exec(a),null!=i&&([,a]=i,a=a.replace(S,D))),t.push({key:r,options:{collapseWhitespace:"?"===o,padDirection:"-"===o?"left":"right",prefix:s||void 0,suffix:a||void 0,truncateTo:null==n?void 0:parseInt(n,10)}})}return t}const F="$${$1=this.$1,($1 == null ? '' : $1)}",$=new Map;function T(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(P,"");let i=$.get(e);return null==i&&(i=new Function(`return \`${e.replace(P,F)}\`;`),$.set(e,i)),i.call(t)}const x=Object.getPrototypeOf((async function(){})).constructor,I="$${$1=this.$1,($1 == null ? '' : typeof $1.then === 'function' ? (($1 = await $1),$1 == null ? '' : $1) : $1)}",_=new Map;async function O(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(P,"");let i=_.get(e);if(null==i){const t=`return \`${e.replace(P,I)}\`;`;i=new x(t),_.set(e,i)}return await i.call(t)}function B(e){return e>=r.mN.a&&e<=r.mN.z}function E(e){return e>=r.mN.A&&e<=r.mN.Z}function M(e,t=0,i=0,s=" "){return 0===t&&0===i?e:`${0===t?"":s.repeat(t)}${e}${0===i?"":s.repeat(i)}`}function W(e,t,i=" ",s){const r=t-(s??Y(e));return r<=0?e:i.repeat(r)+e}function L(e,t,i=" ",s){const r=t-(s??Y(e));return r<=0?e:e+i.repeat(r)}function U(e,t,i){if(null==i)return`${t} ${e}${1===t?"":"s"}`;const s=1===t?e:i.plural??`${e}s`;return i.only?s:`${0===t?i.zero??t:i.format?.(t)??t}${i.infix??" "}${s}`}function N(e,t){const i=e.indexOf(t);if(-1===i)return[e];const s=e.substring(0,i),r=e.substring(i+t.length);return null!=r?[s,r]:[s]}function G(e,t,i="…",s){if(!e)return e;if(t<=1)return i;if((s=s??Y(e))<=t)return e;if(s===e.length)return`${e.substring(0,t-1)}${i}`;let r=Math.floor(t/(s/e.length)),n=Y(e.substring(0,r));for(;n<t;)n+=Y(e[r++]);return n>=t&&r--,`${e.substring(0,r)}${i}`}function H(e,t,i="…",s){if(!e)return e;if(t<=1)return i;if((s=s??Y(e))<=t)return e;if(s===e.length)return`${i}${e.substring(s-t)}`;let r=Math.floor(t/(s/e.length)),n=Y(e.substring(0,r));for(;n<t;)n+=Y(e[r++]);return n>=t&&r--,`${i}${e.substring(e.length-r)}`}function V(e,t,i="…"){if(!e)return e;if(t<=1)return i;const s=Y(e);return s<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(s-Math.ceil(t/2))}`}let Q;const q=/[^\x20-\x7F\u00a0\u2026]/;function Y(e){if(null==e||0===e.length)return 0;if(!q.test(e))return e.length;if(null==Q&&(Q=function({onlyFirst:e=!1}={}){const t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(t,e?void 0:"g")}()),0===(e=e.replace(Q,"")).length)return 0;let t=0,i=0,s=0;const r=[...e];for(let e=0;e<r.length;e++){const n=r[e].codePointAt(0);if(!(n<=31||n>=127&&n<=159)&&!(n>=768&&n<=879))if(n>=128512&&n<=128591||n>=127744&&n<=128511||n>=128640&&n<=128767||n>=9728&&n<=9983||n>=9984&&n<=10175||n>=65024&&n<=65039||n>=129280&&n<=129535||n>=65024&&n<=65039||n>=8400&&n<=8447){if(n>=127995&&n<=127999)continue;i++,t+=2}else 8205!==n?(n>65535&&e++,t+=j(n)?2:1):(s++,t-=2)}const n=i-s;return n>1&&(t+=n-1),t}function j(e){return e>=4352&&(e<=4447||9001===e||9002===e||e>=11904&&e<=12871&&12351!==e||e>=12880&&e<=19903||e>=19968&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65131||e>=65281&&e<=65376||e>=65504&&e<=65510||e>=110592&&e<=110593||e>=127488&&e<=127569||e>=131072&&e<=262141)}const z="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",K={};function J(e){return null==e||""===e?"":function(e,t,i){const s=[];let r,n=4,o=4,a=3,l="";const c=[];let h,u,d,p,m,g,f;const w={val:i(0),position:t,index:1};for(h=0;h<3;h+=1)s[h]=h;d=0,m=Math.pow(2,2),g=1;for(;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;const v=String.fromCharCode;switch(r=d){case 0:for(d=0,m=Math.pow(2,8),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;f=v(d);break;case 1:for(d=0,m=Math.pow(2,16),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;f=v(d);break;case 2:return""}s[3]=f,u=f,c.push(f);for(;;){if(w.index>e)return"";for(d=0,m=Math.pow(2,a),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;switch(f=d){case 0:for(d=0,m=Math.pow(2,8),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;s[o++]=v(d),f=o-1,n--;break;case 1:for(d=0,m=Math.pow(2,16),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;s[o++]=v(d),f=o-1,n--;break;case 2:return c.join("")}if(0==n&&(n=Math.pow(2,a),a++),s[f])l=s[f];else{if(f!==o)return;l=u+u.charAt(0)}c.push(l),s[o++]=u+l.charAt(0),n--,u=l,0==n&&(n=Math.pow(2,a),a++)}}(e.length,32,(t=>function(e,t){if(!K[e]){K[e]={};for(let t=0;t<e.length;t++)K[e][e.charAt(t)]=t}return K[e][t]}(z,e.charAt(t))))??""}},1526:(e,t,i)=>{i.d(t,{QF:()=>UriTrie,bM:()=>PathTrie,u$:()=>VisitedPathsTrie});var s=i(7338),r=i(3105),n=i(3700);const o=47;function a(e){return(e=(0,n.AH)(e)).charCodeAt(0)===o&&(e=e.slice(1)),e}class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}clear(){this.trie.clear()}delete(e,t=!0){const{path:i,ignoreCase:s}=this.normalize(e);return this.trie.delete(i,s,t)}get(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){const{path:s,ignoreCase:r}=this.normalize(e);return this.trie.getClosest(s,t,i,r)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();const{path:i,ignoreCase:s}=this.normalize(e);return this.trie.getDescendants(i,t,s)}has(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){const{path:i,ignoreCase:s}=this.normalize(e);return this.trie.set(i,t,s)}}class PathNode{constructor(e){this.path=e}}class PathTrie{constructor(e=a){this.normalize=e,this.root=new PathNode("")}clear(){this.root.children=void 0}delete(e,t,i=!0){let r,n;e=this.normalize(e),t=t??!s.IJ;for(const i of e.split("/")){const e=(r??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;n=r??this.root,r=e}return!!r?.value&&(i&&l(r.value),r.value=void 0,null!=r.children&&0!==r.children.size||null==n?.children||(n.children.delete(t?r.path.toLowerCase():r.path),0===n.children.size&&(n.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;e=this.normalize(e),t=t??!s.IJ;for(const s of e.split("/")){const e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!s.IJ,e)for(const s of e.split("/")){const e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return[];i=e}else i=this.root;return null==i?.children?[]:[...(0,r.DZ)(i.children.values(),(e=>e.value||void 0))]}getClosest(e,t,i,r){let n,o;e=this.normalize(e),r=r??!s.IJ;for(const t of e.split("/")){!n?.value||i&&!i?.(n.value)||(o=n);const e=(n??this.root).children?.get(r?t.toLowerCase():t);if(null==e)break;n=e}return t||!n?.value||i&&!i?.(n.value)?o?.value:n.value}*getDescendants(e,t,i){e=e?this.normalize(e):"",i=i??!s.IJ;let r,n="";if(e)for(const t of e.split("/")){const e=(r??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;r=e,n+=`${e.path}/`}else r=this.root;null!=r?.children&&(yield*function*e(i,s,r){for(const n of i.values()){const i=s?`${s}/${n.path}`:n.path;!n.value||t&&!t?.(n.value)||(yield n.value),null!=n.children&&(yield*e(n.children,i,r))}}(r.children,"",n))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!s.IJ;let r=this.root;for(const t of e.split("/")){const e=i?t.toLowerCase():t;let s=r.children?.get(e);null==s&&(null==r.children&&(r.children=new Map),s=new PathNode(t),r.children.set(e,s)),r=s}const n=null==r.value;return n||r.value===t||l(r.value),r.value=t,n}}function l(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}class VisitedPathNode{constructor(e){this.path=e}}class VisitedPathsTrie{constructor(e=a){this.normalize=e,this.root=new VisitedPathNode("")}clear(){this.root.children=void 0}has(e,t){let i;e=this.normalize(e),t=t??!s.IJ;for(const s of e.split("/")){const e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!s.IJ;let i=this.root;for(const s of e.split("/")){const e=t?s.toLowerCase():s;let r=i.children?.get(e);null==r&&(null==i.children&&(i.children=new Map),r=new VisitedPathNode(s),i.children.set(e,r)),i=r}}}},2509:(e,t,i)=>{i.d(t,{$S:()=>f,$_:()=>d,$o:()=>w,GC:()=>v,GR:()=>u,JM:()=>g,PH:()=>b,Tc:()=>P,_L:()=>S,aW:()=>p,bM:()=>C,hE:()=>m,ic:()=>D,lN:()=>A,pt:()=>y,s5:()=>h});var s=i(9496),r=i(5255),n=i(7462),o=i(9529),a=i(5148),l=i(4336),c=i(3700);function h(e){const t=e.toString();return s.workspace.textDocuments.find((e=>e.uri.toString()===t))}async function u(e,t){const i=function(e){const t=s.window.activeTextEditor,i=e.toString();for(const e of[...null!=t?[t]:[],...s.window.visibleTextEditors])if(e.document.uri.toString()===i&&null!=e?.viewColumn)return e}(e);return null!=i?(t?.preserveFocus||await s.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):C(e,{viewColumn:s.window.activeTextEditor?.viewColumn,...t})}function d(e){const t=new Map(e.map((e=>[e.toString(),e])));for(const e of s.window.visibleTextEditors)null!=e?.viewColumn&&t.delete(e.document.uri.toString());for(const e of t.values())(0,o.dO)(r.nA.Open,e,{background:!0,preview:!1})}function p(e){const t=s.window.activeTextEditor;return null!=t&&t.document===e?t:void 0}function m(){return!a.D.get("advanced.quickPick.closeOnFocusOut")}function g(){return 0!==s.window.visibleTextEditors.length&&s.window.visibleTextEditors.some((e=>b(e)))}function f(e){const t=s.window.activeTextEditor;return null!=t&&t.document===e}function w(e){return e.kind===s.ColorThemeKind.Dark||e.kind===s.ColorThemeKind.HighContrast}function v(e){return e.kind===s.ColorThemeKind.Light||e.kind===s.ColorThemeKind.HighContrastLight}function y(e){return e.scheme===r.sN.Virtual||e.scheme===r.sN.GitHub}function b(e){const t=e.document.uri.scheme;return t!==r.sN.Output&&t!==r.sN.DebugConsole}async function C(e,t={}){const{rethrow:i,...a}=t;try{if((0,n.uy)(e)&&(e=e.documentUri()),e.scheme===r.sN.GitLens&&r.ZY[(0,c.DZ)(e.fsPath)])return void await(0,o.dO)(r.nA.Open,e);const t=await s.workspace.openTextDocument(e);return s.window.showTextDocument(t,{preserveFocus:!1,preview:!0,viewColumn:s.ViewColumn.Active,...a})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text"))return void await(0,o.dO)(r.nA.Open,e);if(i)throw t;return void l.Yd.error(t,"openEditor")}}async function A(e,t,i,n=!0){n&&null==s.window.tabGroups.activeTabGroup.activeTab&&(n=!1),await(0,o.dO)(r.nA.OpenWalkthrough,{category:`${e}#${t}`,step:i?`${e}#${t}#${i}`:void 0},n)}var P=(e=>(e.CurrentWindow="currentWindow",e.NewWindow="newWindow",e.AddToWorkspace="addToWorkspace",e))(P||{});function D(e,t={location:"currentWindow"}){if("addToWorkspace"!==t?.location)(0,o.dO)(r.nA.OpenFolder,e,{forceNewWindow:"newWindow"===t?.location});else{const i=s.workspace.workspaceFolders?.length??0;s.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}}function S(){let e;switch(s.env.appName){case"Visual Studio Code - Insiders":e="code-insiders --wait --reuse-window";break;case"Visual Studio Code - Exploration":e="code-exploration --wait --reuse-window";break;case"VSCodium":e="codium --wait --reuse-window";break;default:e="code --wait --reuse-window"}return e}},4550:(e,t,i)=>{i.d(t,{L5:()=>o,mL:()=>n,qu:()=>r});var s=i(4627);function r(e,t){return"string"==typeof e&&(e=n(e)),"string"==typeof t&&(t=n(t)),e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,s.zY)(e.pre,t.pre):0}function n(e){const[t,i]=e.split("-"),[s,r,n]=t.split(".");return function(e,t,i,s){return{major:"string"==typeof e?parseInt(e,10):e,minor:"string"==typeof t?parseInt(t,10):t,patch:null==i?0:"string"==typeof i?parseInt(i,10):i,pre:s}}(s,r,n,i)}function o(e,t){if(null==e)return!1;const[i,s]=t.split(" ");if("="===i)return 0===r(e,s);if(">"===i)return r(e,s)>0;if(">="===i)return r(e,s)>=0;if("<"===i)return r(e,s)<0;if("<="===i)return r(e,s)<=0;throw new Error(`Unknown operator: ${i}`)}},9701:(e,t,i)=>{function s(e){return null!=e&&("webview"in e&&"webviewItem"in e)}function r(e){return null!=e&&("webview"in e&&"webviewItemGroup"in e)}function n(e){return JSON.stringify(e)}i.d(t,{BH:()=>n,dH:()=>r,tM:()=>s})},6700:(e,t,i)=>{i.d(t,{p2:()=>GitDocumentState,rC:()=>GitDocumentTracker});var s=i(9496),r=i(5255),n=i(6631),o=i(7462),a=i(1529),l=i(5148),c=i(4241),h=i(2185),u=i(4486),d=i(3105),p=i(2509),m=i(439),g=i(4336);class TrackedDocument{constructor(e,t,i,r){this.document=e,this.dirty=t,this._eventDelegates=i,this.container=r,this._onDidBlameStateChange=new s.EventEmitter,this._disposed=!1,this.initializing=!0,this._forceDirtyStateChangeOnNextDocumentChange=!1,this._hasRemotes=!1,this._isDirtyIdle=!1,this._isTracked=!1,this._blameFailed=!1,this._requiresUpdate=!0}static async create(e,t,i,s){const r=new TrackedDocument(e,t,i,s);return await r.initialize(),r}get onDidBlameStateChange(){return this._onDidBlameStateChange.event}dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}async initialize(){const e=this.document.uri;this._uri=await o.YY.fromUri(e),this._disposed||await this.update(),this.initializing=!1}get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}get hasRemotes(){return this._hasRemotes}get isBlameable(){return!this._blameFailed&&this._isTracked}get isDirtyIdle(){return this._isDirtyIdle}set isDirtyIdle(e){this._isDirtyIdle=e}get isRevision(){return null!=this._uri&&(Boolean(this._uri.sha)&&this._uri.sha!==m.Ii)}get isTracked(){return this._isTracked}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async activate(){this._requiresUpdate&&await this.update(),(0,n.v)(r.zf.ActiveFileStatus,this.getStatus())}is(e){return e===this.document}reset(e){this._requiresUpdate=!0,this._blameFailed=!1,this._isDirtyIdle=!1,null!=this.state&&(this.state=void 0,g.Yd.log(`Reset state for '${this.document.uri.toString(!0)}', reason=${e}`)),"repository"===e&&(0,p.$S)(this.document)&&(null==this._updateDebounced&&(this._updateDebounced=(0,u.Ds)(this.update.bind(this),250)),this._updateDebounced())}setBlameFailure(){const e=this.isBlameable;this._blameFailed=!0,e&&(0,p.$S)(this.document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}async update({forceBlameChange:e}={}){if(this._requiresUpdate=!1,this._disposed||null==this._uri)return this._hasRemotes=!1,void(this._isTracked=!1);this._isDirtyIdle=!1;const t=(0,p.aW)(this.document),i=e?void 0:this.isBlameable,s=this.container.git.getRepository(this._uri);if(null==s?(this._isTracked=!1,this._hasRemotes=!1):[this._isTracked,this._hasRemotes]=await Promise.all([this.container.git.isTracked(this._uri),s.hasRemotes()]),null!=t){const e=this.isBlameable;if((0,n.v)(r.zf.ActiveFileStatus,this.getStatus()),!this.initializing&&i!==e){const i={editor:t,document:this,blameable:e};this._onDidBlameStateChange.fire(i),this._eventDelegates.onDidBlameStateChange(i)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}}var f=Object.defineProperty,w=Object.getOwnPropertyDescriptor;class DocumentTracker{constructor(e){this.container=e,this._onDidChangeBlameState=new s.EventEmitter,this._onDidChangeContent=new s.EventEmitter,this._onDidChangeDirtyState=new s.EventEmitter,this._onDidTriggerDirtyIdle=new s.EventEmitter,this._documentMap=new Map,this._disposable=s.Disposable.from((0,h.IH)(e.onReady)(this.onReady,this),l.D.onDidChange(this.onConfigurationChanged,this),s.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),s.workspace.onDidChangeTextDocument((0,u.Ds)(this.onTextDocumentChanged,50),this),s.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),s.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=l.D.get("advanced.blame.delayAfterEdit")}get onDidChangeBlameState(){return this._onDidChangeBlameState.event}get onDidChangeContent(){return this._onDidChangeContent.event}get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged(),this.onActiveTextEditorChanged(s.window.activeTextEditor)}onActiveTextEditorChanged(e){if(null!=e&&!(0,p.PH)(e))return;if(null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),null==e)return void(this._timer=setTimeout((()=>{this._timer=void 0,(0,n.v)(r.zf.ActiveFileStatus,void 0)}),250));const t=this._documentMap.get(e.document);null==t?this.addCore(e.document):t.then((e=>e.activate()),(()=>{}))}onConfigurationChanged(e){null!=e&&(l.D.changed(e,"blame.ignoreWhitespace")||l.D.changed(e,"advanced.caching.enabled"))&&this.reset("config"),l.D.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=l.D.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.reset("repository",e.added.length?new Set(e.added.map((e=>e.path))):void 0,e.removed.length?new Set(e.removed.map((e=>e.path))):void 0)}onRepositoryChanged(e){e.changed(a.I6.Index,a.I6.Heads,a.I6.Status,a.I6.Unknown,a.du.Any)&&this.reset("repository",new Set([e.repository.path]))}async onTextDocumentChanged(e){const{scheme:t}=e.document.uri;if(!this.container.git.supportedSchemes.has(t))return;const i=await(this._documentMap.get(e.document)??this.addCore(e.document));i.reset("document");const r=e.document.isDirty,n=s.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(r?this._dirtyIdleTriggeredDebounced({editor:n,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),n?.document===e.document&&this._onDidChangeContent.fire({editor:n,document:i,contentChanges:e.contentChanges}),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==r)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=r,null!=n&&n.document===e.document&&this.fireDocumentDirtyStateChanged({editor:n,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){const t=this._documentMap.get(e);null==t?(0,p.$S)(e)&&this.addCore(e):(await t).update({forceBlameChange:!0})}async add(e){let t;if((0,o.uy)(e))try{t=await s.workspace.openTextDocument(e.documentUri())}catch(i){const r=i?.toString()??"";if(s.env.language.startsWith("en"))if(r.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else{if(!(r.includes("File not found")||r.includes("Unable to read file")||r.includes("Unable to resolve non-existing file")))throw i;t=new MissingRevisionTextDocument(e)}else{if(!r.includes("cannot open"))throw i;t=new MissingRevisionTextDocument(e)}}else t=e instanceof s.Uri?await s.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e){const t=TrackedDocument.create(e,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)},this.container);return this._documentMap.set(e,t),t}async clear(){for(const e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof s.Uri){const t=(0,p.s5)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){e instanceof s.Uri&&(e=(0,p.s5)(e)??e);return this.get(e)??this.add(e)}has(e){if(e instanceof s.Uri){const t=(0,p.s5)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),(t??await i)?.dispose()}fireDocumentDirtyStateChanged(e){if(e.dirty)return queueMicrotask((()=>{this._dirtyStateChangedDebounced?.cancel(),s.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)})),void(this._dirtyIdleTriggerDelay>0&&(null==this._dirtyIdleTriggeredDebounced&&(this._dirtyIdleTriggeredDebounced=(0,u.Ds)((e=>{this._dirtyIdleTriggeredDebounced?.pending()||(e.document.isDirtyIdle=!0,this._onDidTriggerDirtyIdle.fire(e))}),this._dirtyIdleTriggerDelay,{track:!0})),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document})));null==this._dirtyStateChangedDebounced&&(this._dirtyStateChangedDebounced=(0,u.Ds)((e=>{s.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),250)),this._dirtyStateChangedDebounced(e)}reset(e,t,i){Promise.allSettled((0,d.UI)((0,d.hX)(this._documentMap,(([e])=>"string"==typeof e)),(async([,s])=>{const r=await s;i?.has(r.uri.repoPath)?this.remove(r.document,r):(null==t||t.has(r.uri.repoPath))&&r.reset(e)})))}}((e,t,i,s)=>{for(var r,n=s>1?void 0:s?w(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);s&&n&&f(t,i,n)})([(0,c.fF)({args:{1:e=>null!=e?(0,d.v_)(e,","):"",2:e=>null!=e?(0,d.v_)(e,","):""}})],DocumentTracker.prototype,"reset",1);class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=s.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}getText(e){throw new Error("Method not supported.")}getWordRangeAtPosition(e,t){throw new Error("Method not supported.")}lineAt(e){throw new Error("Method not supported.")}offsetAt(e){throw new Error("Method not supported.")}positionAt(e){throw new Error("Method not supported.")}save(){throw new Error("Method not supported.")}validatePosition(e){throw new Error("Method not supported.")}validateRange(e){throw new Error("Method not supported.")}}class BinaryTextDocument extends EmptyTextDocument{}class MissingRevisionTextDocument extends EmptyTextDocument{}class GitDocumentState{constructor(){this.blameCache=new Map,this.diffCache=new Map,this.logCache=new Map}clearBlame(e){null!=e?this.blameCache.delete(e):this.blameCache.clear()}clearDiff(e){null!=e?this.diffCache.delete(e):this.diffCache.clear()}clearLog(e){null!=e?this.logCache.delete(e):this.logCache.clear()}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){null!=t?this.blameCache.set(e,t):this.blameCache.delete(e)}setDiff(e,t){null!=t?this.diffCache.set(e,t):this.diffCache.delete(e)}setLog(e,t){null!=t?this.logCache.set(e,t):this.logCache.delete(e)}}class GitDocumentTracker extends DocumentTracker{async resetCache(e,t){const i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}}},6922:(e,t,i)=>{i.d(t,{CF:()=>SubscribeableViewNode,FZ:()=>RepositoriesSubscribeableNode,Jc:()=>y,LD:()=>S,On:()=>b,RW:()=>ViewRefFileNode,Re:()=>v,Td:()=>w,Te:()=>ViewFileNode,bT:()=>ViewRefNode,kP:()=>k,kr:()=>D,pp:()=>R,vb:()=>A});var s=i(9496),r=i(5255),n=i(7462),o=i(4321),a=i(3050),l=i(1529),c=i(5432),h=i(4241),u=i(4486),d=i(4336),p=i(4627),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor,f=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?g(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&m(t,i,n),n},w=(e=>(e.ActiveFileHistory="gitlens:history:active:file",e.ActiveLineHistory="gitlens:history:active:line",e.AutolinkedItems="gitlens:autolinked:items",e.AutolinkedIssue="gitlens:autolinked:issue",e.AutolinkedItem="gitlens:autolinked:item",e.Branch="gitlens:branch",e.Branches="gitlens:branches",e.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",e.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",e.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",e.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",e.BranchStatusFiles="gitlens:status-branch:files",e.Commit="gitlens:commit",e.Commits="gitlens:commits",e.Compare="gitlens:compare",e.CompareBranch="gitlens:compare:branch",e.ComparePicker="gitlens:compare:picker",e.ComparePickerWithRef="gitlens:compare:picker:ref",e.CompareResults="gitlens:compare:results",e.CompareResultsCommits="gitlens:compare:results:commits",e.Contributor="gitlens:contributor",e.Contributors="gitlens:contributors",e.DateMarker="gitlens:date-marker",e.File="gitlens:file",e.FileHistory="gitlens:history:file",e.Folder="gitlens:folder",e.LineHistory="gitlens:history:line",e.Merge="gitlens:merge",e.MergeConflictCurrentChanges="gitlens:merge-conflict:current",e.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",e.Message="gitlens:message",e.Pager="gitlens:pager",e.PullRequest="gitlens:pullrequest",e.Rebase="gitlens:rebase",e.Reflog="gitlens:reflog",e.ReflogRecord="gitlens:reflog-record",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.RepositoryFolder="gitlens:repo-folder",e.ResultsFile="gitlens:file:results",e.ResultsFiles="gitlens:results:files",e.SearchAndCompare="gitlens:searchAndCompare",e.SearchResults="gitlens:search:results",e.SearchResultsCommits="gitlens:search:results:commits",e.Stash="gitlens:stash",e.Stashes="gitlens:stashes",e.StatusFileCommits="gitlens:status:file:commits",e.StatusFiles="gitlens:status:files",e.StatusAheadOfUpstream="gitlens:status:upstream:ahead",e.StatusBehindUpstream="gitlens:status:upstream:behind",e.StatusNoUpstream="gitlens:status:upstream:none",e.StatusSameAsUpstream="gitlens:status:upstream:same",e.Tag="gitlens:tag",e.Tags="gitlens:tags",e.UncommittedFiles="gitlens:uncommitted:files",e.Worktree="gitlens:worktree",e.Worktrees="gitlens:worktrees",e))(w||{});let v=class{constructor(e,t,i){this.view=t,this.parent=i,this.splatted=!1,this._uri=e}get id(){}toString(){const e=this.id;return`${(0,d.q4)(this)}${null!=e?`(${e})`:""}`}get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw new Error("Id is required to delete state");return this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw new Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t){if(null==this.id)throw new Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t)}};function y(e){return e instanceof v}f([(0,c.H)(((e=!1,t=!1,i)=>JSON.stringify([e,t,i?.toString()]))),(0,h.fF)()],v.prototype,"triggerChange",1),v=f([(0,h.hJ)(((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`))],v);class ViewFileNode extends v{constructor(e,t,i,s){super(e,t,i),this.parent=i,this.file=s}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}}class ViewRefNode extends v{get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,o.Wh)(this.ref,!1)}`}}class ViewRefFileNode extends ViewFileNode{toString(){return`${super.toString()}:${this.file.path}`}}function b(e){return(0,u.is)(e,"loadMore")}class SubscribeableViewNode extends v{constructor(e,t,i){super(e,t,i),this.loaded=!1,this._canSubscribe=!0,this._pendingReset=!1;const r=[this.view.onDidChangeVisibility(this.onVisibilityChanged,this),this.view.onDidChangeNodeCollapsibleState(this.onNodeCollapsibleStateChanged,this)];P(this.view)&&r.push(this.view.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this));const n=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),n.apply(this)};const o=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),o.apply(this)},this.disposable=s.Disposable.from(...r)}dispose(){this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}get canSubscribe(){return this._canSubscribe}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;const t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){const e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onNodeCollapsibleStateChanged(e){e.element===this?(this.collapsibleState=e.state,void 0!==this.onCollapsibleStateChanged&&this.onCollapsibleStateChanged(e.state)):e.element===this.parent&&void 0!==this.onParentCollapsibleStateChanged&&this.onParentCollapsibleStateChanged(e.state)}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){this.canSubscribe&&this.view.visible&&(!P(this.view)||this.view.autoRefresh)?null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription):await this.unsubscribe()}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}}f([(0,h.fF)()],SubscribeableViewNode.prototype,"dispose",1),f([(0,c.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"triggerChange",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"unsubscribe",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),f([(0,c.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"ensureSubscription",1),f([(0,c.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"resetSubscription",1);const C=class extends SubscribeableViewNode{constructor(e,t,i,s,r,n){super(e,t,i),this.repo=s,this.options=n,this.splatted=!0,this.splatted=r}static getId(e){return`gitlens${this.key}(${e})`}toClipboard(){return this.repo.path}get id(){return C.getId(this.repo.path)}async getTreeItem(){this.splatted=!1;const e=await this.repo.getBranch(),t=(e?.state.ahead??0)>0,i=(e?.state.behind??0)>0,n=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),o=new s.TreeItem(this.repo.formattedName??this.uri.repoPath??"",n?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed);if(o.contextValue="gitlens:repo-folder"+(this.repo.starred?"+starred":""),t&&(o.contextValue+="+ahead"),i&&(o.contextValue+="+behind"),null!=e&&this.options?.showBranchAndLastFetched){const t=await this.repo.getLastFetched()??0,i=e.getTrackingStatus();let n;if(o.description=`${i?`${i}${(0,p.vk)(r.NE.Dot,1,1)}`:""}${e.name}${t?`${(0,p.vk)(r.NE.Dot,1,1)}Last fetched ${l._j.formatLastFetched(t)}`:""}`,null!=e.upstream){const t=a.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(e.repoPath));n=t?.length?t[0].name:void 0}else{const t=await e.getRemoteWithProvider();n=t?.provider?.name}o.tooltip=new s.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${t?`${(0,p.vk)(r.NE.Dash,2,2)}Last fetched ${l._j.formatLastFetched(t,!1)}`:""}${this.repo.formattedName?`\n${this.uri.repoPath}`:""}\n\nCurrent branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${n?` on ${n}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${n?` on ${n}`:""}`})}`:`hasn't been published to ${n??"a remote"}`}`,!0)}else o.tooltip=`${this.repo.formattedName?`${this.repo.formattedName}\n${this.uri.repoPath}`:this.uri.repoPath??""}`;return o}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){await(this.child?.triggerChange(e,!1,this)),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return this.repo.onDidChange(this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(l.I6.Closed,l.du.Any))return this.dispose(),void this.parent?.triggerChange(!0);e.changed(l.I6.Starred,l.du.Any)?this.parent?.triggerChange(!0):this.changed(e)&&(this.loaded?this:this.parent??this).triggerChange(!0)}};let A=C;A.key=":repository",f([(0,c.H)(),(0,h.fF)()],A.prototype,"refresh",1),f([(0,h.cM)()],A.prototype,"star",1),f([(0,h.cM)()],A.prototype,"unstar",1),f([(0,h.fF)()],A.prototype,"subscribe",1),f([(0,h.fF)({args:{0:e=>e.toString()}})],A.prototype,"onRepositoryChanged",1);class RepositoriesSubscribeableNode extends SubscribeableViewNode{constructor(e){super(n.Wj,e),this.splatted=!0}async getSplattedChild(){return null==this.children&&await this.getChildren(),1===this.children?.length?this.children[0]:void 0}refresh(e=!1){if(e&&null!=this.children){for(const e of this.children)e.dispose();this.children=void 0}}etag(){return(0,u.NX)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return s.Disposable.from(this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.view.container.subscription.onDidChange(this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}}function P(e){return(0,u.is)(e,"onDidChangeAutoRefresh")}function D(e){return"function"==typeof e.clear}function S(e){return"function"==typeof e.edit}function k(e){return"function"==typeof e.dismissNode}function R(e){return function(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath}(e)?e.repoPath:void 0}f([(0,c.H)(),(0,h.fF)()],RepositoriesSubscribeableNode.prototype,"refresh",1),f([(0,h.fF)()],RepositoriesSubscribeableNode.prototype,"subscribe",1)},9146:function(e,t,i){var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(r,n){function o(e){try{l(s.next(e))}catch(e){n(e)}}function a(e){try{l(s.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,a)}l((s=s.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i(1808)),o=r(i(4404)),a=r(i(7310)),l=r(i(9491)),c=r(i(1957)),h=i(8054),u=r(i(9829)),d=c.default("https-proxy-agent:agent");class HttpsProxyAgent extends h.Agent{constructor(e){let t;if(t="string"==typeof e?a.default.parse(e):e,!t)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");d("creating new HttpsProxyAgent instance: %o",t),super(t);const i=Object.assign({},t);var s;this.secureProxy=t.secureProxy||"string"==typeof(s=i.protocol)&&/^https:?$/i.test(s),i.host=i.hostname||i.host,"string"==typeof i.port&&(i.port=parseInt(i.port,10)),!i.port&&i.host&&(i.port=this.secureProxy?443:80),this.secureProxy&&!("ALPNProtocols"in i)&&(i.ALPNProtocols=["http 1.1"]),i.host&&i.path&&(delete i.path,delete i.pathname),this.proxy=i}callback(e,t){return s(this,void 0,void 0,(function*(){const{proxy:i,secureProxy:s}=this;let r;s?(d("Creating `tls.Socket`: %o",i),r=o.default.connect(i)):(d("Creating `net.Socket`: %o",i),r=n.default.connect(i));const a=Object.assign({},i.headers);let c=`CONNECT ${`${t.host}:${t.port}`} HTTP/1.1\r\n`;i.auth&&(a["Proxy-Authorization"]=`Basic ${Buffer.from(i.auth).toString("base64")}`);let{host:h,port:m,secureEndpoint:g}=t;(function(e,t){return Boolean(!t&&80===e||t&&443===e)})(m,g)||(h+=`:${m}`),a.Host=h,a.Connection="close";for(const e of Object.keys(a))c+=`${e}: ${a[e]}\r\n`;const f=u.default(r);r.write(`${c}\r\n`);const{statusCode:w,buffered:v}=yield f;if(200===w){if(e.once("socket",p),t.secureEndpoint){d("Upgrading socket connection to TLS");const e=t.servername||t.host;return o.default.connect(Object.assign(Object.assign({},function(e,...t){const i={};let s;for(s in e)t.includes(s)||(i[s]=e[s]);return i}(t,"host","hostname","path","port")),{socket:r,servername:e}))}return r}r.destroy();const y=new n.default.Socket({writable:!1});return y.readable=!0,e.once("socket",(e=>{d("replaying proxy buffer for failed request"),l.default(e.listenerCount("data")>0),e.push(v),e.push(null)})),y}))}}function p(e){e.resume()}t.default=HttpsProxyAgent},6018:function(e,t,i){const s=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(i(9146));function r(e){return new s.default(e)}!function(e){e.HttpsProxyAgent=s.default,e.prototype=s.default.prototype}(r||(r={})),e.exports=r},9829:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(i(1957)).default("https-proxy-agent:parse-proxy-response");t.default=function(e){return new Promise(((t,i)=>{let s=0;const n=[];function o(){const i=e.read();i?function(e){n.push(e),s+=e.length;const i=Buffer.concat(n,s);if(-1===i.indexOf("\r\n\r\n"))return r("have not received end of HTTP headers yet..."),void o();const a=i.toString("ascii",0,i.indexOf("\r\n")),l=+a.split(" ")[1];r("got proxy server response: %o",a),t({statusCode:l,buffered:i})}(i):e.once("readable",o)}function a(e){r("onclose had error %o",e)}function l(){r("onend")}function c(t){e.removeListener("end",l),e.removeListener("error",c),e.removeListener("close",a),e.removeListener("readable",o),r("onerror %o",t),i(t)}e.on("error",c),e.on("close",a),e.on("end",l),o()}))}},1957:(e,t,i)=>{function s(){return function(){}}i.r(t),i.d(t,{default:()=>s})},8897:(e,t,i)=>{t.URL=i(7310).URL},9496:e=>{e.exports=require("vscode")},9491:e=>{e.exports=require("assert")},4300:e=>{e.exports=require("buffer")},2361:e=>{e.exports=require("events")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},1808:e=>{e.exports=require("net")},2037:e=>{e.exports=require("os")},1017:e=>{e.exports=require("path")},4074:e=>{e.exports=require("perf_hooks")},7282:e=>{e.exports=require("process")},2781:e=>{e.exports=require("stream")},1576:e=>{e.exports=require("string_decoder")},4404:e=>{e.exports=require("tls")},7310:e=>{e.exports=require("url")},9796:e=>{e.exports=require("zlib")},6292:(e,t,i)=>{i.d(t,{ZP:()=>K});var s=i(2781),r=i(3685),n=i(7310),o=i(8897),a=i(5687),l=i(9796);const c=s.Readable,h=Symbol("buffer"),u=Symbol("type");class Blob{constructor(){this[u]="";const e=arguments[0],t=arguments[1],i=[];let s=0;if(e){const t=e,r=Number(t.length);for(let e=0;e<r;e++){const r=t[e];let n;n=r instanceof Buffer?r:ArrayBuffer.isView(r)?Buffer.from(r.buffer,r.byteOffset,r.byteLength):r instanceof ArrayBuffer?Buffer.from(r):r instanceof Blob?r[h]:Buffer.from("string"==typeof r?r:String(r)),s+=n.length,i.push(n)}}this[h]=Buffer.concat(i);let r=t&&void 0!==t.type&&String(t.type).toLowerCase();r&&!/[^\u0020-\u007E]/.test(r)&&(this[u]=r)}get size(){return this[h].length}get type(){return this[u]}text(){return Promise.resolve(this[h].toString())}arrayBuffer(){const e=this[h],t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(t)}stream(){const e=new c;return e._read=function(){},e.push(this[h]),e.push(null),e}toString(){return"[object Blob]"}slice(){const e=this.size,t=arguments[0],i=arguments[1];let s,r;s=void 0===t?0:t<0?Math.max(e+t,0):Math.min(t,e),r=void 0===i?e:i<0?Math.max(e+i,0):Math.min(i,e);const n=Math.max(r-s,0),o=this[h].slice(s,s+n),a=new Blob([],{type:arguments[2]});return a[h]=o,a}}function d(e,t,i){Error.call(this,e),this.message=e,this.type=t,i&&(this.code=this.errno=i.code),Error.captureStackTrace(this,this.constructor)}let p;Object.defineProperties(Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(Blob.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),d.prototype=Object.create(Error.prototype),d.prototype.constructor=d,d.prototype.name="FetchError";try{p=require("encoding").convert}catch(e){}const m=Symbol("Body internals"),g=s.PassThrough;function f(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=i.size;let n=void 0===r?0:r;var o=i.timeout;let a=void 0===o?0:o;null==e?e=null:v(e)?e=Buffer.from(e.toString()):y(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof s||(e=Buffer.from(String(e)))),this[m]={body:e,disturbed:!1,error:null},this.size=n,this.timeout=a,e instanceof s&&e.on("error",(function(e){const i="AbortError"===e.name?e:new d(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[m].error=i}))}function w(){var e=this;if(this[m].disturbed)return f.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[m].disturbed=!0,this[m].error)return f.Promise.reject(this[m].error);let t=this.body;if(null===t)return f.Promise.resolve(Buffer.alloc(0));if(y(t)&&(t=t.stream()),Buffer.isBuffer(t))return f.Promise.resolve(t);if(!(t instanceof s))return f.Promise.resolve(Buffer.alloc(0));let i=[],r=0,n=!1;return new f.Promise((function(s,o){let a;e.timeout&&(a=setTimeout((function(){n=!0,o(new d(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))}),e.timeout)),t.on("error",(function(t){"AbortError"===t.name?(n=!0,o(t)):o(new d(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))})),t.on("data",(function(t){if(!n&&null!==t){if(e.size&&r+t.length>e.size)return n=!0,void o(new d(`content size at ${e.url} over limit: ${e.size}`,"max-size"));r+=t.length,i.push(t)}})),t.on("end",(function(){if(!n){clearTimeout(a);try{s(Buffer.concat(i,r))}catch(t){o(new d(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}}))}))}function v(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function y(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function b(e){let t,i,r=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return r instanceof s&&"function"!=typeof r.getBoundary&&(t=new g,i=new g,r.pipe(t),r.pipe(i),e[m].body=t,r=i),r}function C(e){return null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":v(e)?"application/x-www-form-urlencoded;charset=UTF-8":y(e)?e.type||null:Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||ArrayBuffer.isView(e)?null:"function"==typeof e.getBoundary?`multipart/form-data;boundary=${e.getBoundary()}`:e instanceof s?null:"text/plain;charset=UTF-8"}function A(e){const t=e.body;return null===t?0:y(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}f.prototype={get body(){return this[m].body},get bodyUsed(){return this[m].disturbed},arrayBuffer(){return w.call(this).then((function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}))},blob(){let e=this.headers&&this.headers.get("content-type")||"";return w.call(this).then((function(t){return Object.assign(new Blob([],{type:e.toLowerCase()}),{[h]:t})}))},json(){var e=this;return w.call(this).then((function(t){try{return JSON.parse(t.toString())}catch(t){return f.Promise.reject(new d(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}}))},text(){return w.call(this).then((function(e){return e.toString()}))},buffer(){return w.call(this)},textConverted(){var e=this;return w.call(this).then((function(t){return function(e,t){if("function"!=typeof p)throw new Error("The package `encoding` must be installed to use the textConverted() function");const i=t.get("content-type");let s,r,n="utf-8";i&&(s=/charset=([^;]*)/i.exec(i));r=e.slice(0,1024).toString(),!s&&r&&(s=/<meta.+?charset=(['"])(.+?)\1/i.exec(r));!s&&r&&(s=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(r),s||(s=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(r),s&&s.pop()),s&&(s=/charset=(.*)/i.exec(s.pop())));!s&&r&&(s=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(r));s&&(n=s.pop(),"gb2312"!==n&&"gbk"!==n||(n="gb18030"));return p(e,"UTF-8",n).toString()}(t,e.headers)}))}},Object.defineProperties(f.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),f.mixIn=function(e){for(const t of Object.getOwnPropertyNames(f.prototype))if(!(t in e)){const i=Object.getOwnPropertyDescriptor(f.prototype,t);Object.defineProperty(e,t,i)}},f.Promise=global.Promise;const P=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,D=/[^\t\x20-\x7e\x80-\xff]/;function S(e){if(e=`${e}`,P.test(e)||""===e)throw new TypeError(`${e} is not a legal HTTP header name`)}function k(e){if(e=`${e}`,D.test(e))throw new TypeError(`${e} is not a legal HTTP header value`)}function R(e,t){t=t.toLowerCase();for(const i in e)if(i.toLowerCase()===t)return i}const F=Symbol("map");class Headers{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[F]=Object.create(null),e instanceof Headers){const t=e.raw(),i=Object.keys(t);for(const e of i)for(const i of t[e])this.append(e,i)}else if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw new TypeError("Header pairs must be iterable");const i=[];for(const t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw new TypeError("Each header pair must be iterable");i.push(Array.from(t))}for(const e of i){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const t of Object.keys(e)){const i=e[t];this.append(t,i)}}}}get(e){S(e=`${e}`);const t=R(this[F],e);return void 0===t?null:this[F][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=$(this),s=0;for(;s<i.length;){var r=i[s];const n=r[0],o=r[1];e.call(t,o,n,this),i=$(this),s++}}set(e,t){t=`${t}`,S(e=`${e}`),k(t);const i=R(this[F],e);this[F][void 0!==i?i:e]=[t]}append(e,t){t=`${t}`,S(e=`${e}`),k(t);const i=R(this[F],e);void 0!==i?this[F][i].push(t):this[F][e]=[t]}has(e){return S(e=`${e}`),void 0!==R(this[F],e)}delete(e){S(e=`${e}`);const t=R(this[F],e);void 0!==t&&delete this[F][t]}raw(){return this[F]}keys(){return x(this,"key")}values(){return x(this,"value")}[Symbol.iterator](){return x(this,"key+value")}}function $(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";return Object.keys(e[F]).sort().map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[F][t].join(", ")}:function(t){return[t.toLowerCase(),e[F][t].join(", ")]})}Headers.prototype.entries=Headers.prototype[Symbol.iterator],Object.defineProperty(Headers.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Headers.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const T=Symbol("internal");function x(e,t){const i=Object.create(I);return i[T]={target:e,kind:t,index:0},i}const I=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==I)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[T];const t=e.target,i=e.kind,s=e.index,r=$(t,i);return s>=r.length?{value:void 0,done:!0}:(this[T].index=s+1,{value:r[s],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function _(e){const t=Object.assign({__proto__:null},e[F]),i=R(e[F],"Host");return void 0!==i&&(t[i]=t[i][0]),t}Object.defineProperty(I,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const O=Symbol("Response internals"),B=r.STATUS_CODES;class Response{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};f.call(this,e,t);const i=t.status||200,s=new Headers(t.headers);if(null!=e&&!s.has("Content-Type")){const t=C(e);t&&s.append("Content-Type",t)}this[O]={url:t.url,status:i,statusText:t.statusText||B[i],headers:s,counter:t.counter}}get url(){return this[O].url||""}get status(){return this[O].status}get ok(){return this[O].status>=200&&this[O].status<300}get redirected(){return this[O].counter>0}get statusText(){return this[O].statusText}get headers(){return this[O].headers}clone(){return new Response(b(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}}f.mixIn(Response.prototype),Object.defineProperties(Response.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(Response.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});const E=Symbol("Request internals"),M=n.URL||o.URL,W=n.parse,L=n.format;function U(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new M(e).toString()),W(e)}const N="destroy"in s.Readable.prototype;function G(e){return"object"==typeof e&&"object"==typeof e[E]}class Request{constructor(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G(e)?t=U(e.url):(t=e&&e.href?U(e.href):U(`${e}`),e={});let s=i.method||e.method||"GET";if(s=s.toUpperCase(),(null!=i.body||G(e)&&null!==e.body)&&("GET"===s||"HEAD"===s))throw new TypeError("Request with GET/HEAD method cannot have body");let r=null!=i.body?i.body:G(e)&&null!==e.body?b(e):null;f.call(this,r,{timeout:i.timeout||e.timeout||0,size:i.size||e.size||0});const n=new Headers(i.headers||e.headers||{});if(null!=r&&!n.has("Content-Type")){const e=C(r);e&&n.append("Content-Type",e)}let o=G(e)?e.signal:null;if("signal"in i&&(o=i.signal),null!=o&&!function(e){const t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!(!t||"AbortSignal"!==t.constructor.name)}(o))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[E]={method:s,redirect:i.redirect||e.redirect||"follow",headers:n,parsedURL:t,signal:o},this.follow=void 0!==i.follow?i.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==i.compress?i.compress:void 0===e.compress||e.compress,this.counter=i.counter||e.counter||0,this.agent=i.agent||e.agent}get method(){return this[E].method}get url(){return L(this[E].parsedURL)}get headers(){return this[E].headers}get redirect(){return this[E].redirect}get signal(){return this[E].signal}clone(){return new Request(this)}}function H(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}f.mixIn(Request.prototype),Object.defineProperty(Request.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),H.prototype=Object.create(Error.prototype),H.prototype.constructor=H,H.prototype.name="AbortError";const V=n.URL||o.URL,Q=s.PassThrough,q=function(e,t){const i=new V(t).hostname,s=new V(e).hostname;return i===s||"."===i[i.length-s.length-1]&&i.endsWith(s)},Y=function(e,t){return new V(t).protocol===new V(e).protocol};function j(e,t){if(!j.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return f.Promise=j.Promise,new j.Promise((function(i,n){const o=new Request(e,t),c=function(e){const t=e[E].parsedURL,i=new Headers(e[E].headers);if(i.has("Accept")||i.set("Accept","*/*"),!t.protocol||!t.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof s.Readable&&!N)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let r=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(r="0"),null!=e.body){const t=A(e);"number"==typeof t&&(r=String(t))}r&&i.set("Content-Length",r),i.has("User-Agent")||i.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!i.has("Accept-Encoding")&&i.set("Accept-Encoding","gzip,deflate");let n=e.agent;return"function"==typeof n&&(n=n(t)),i.has("Connection")||n||i.set("Connection","close"),Object.assign({},t,{method:e.method,headers:_(i),agent:n})}(o),h=("https:"===c.protocol?a:r).request,u=o.signal;let p=null;const m=function(){let e=new H("The user aborted a request.");n(e),o.body&&o.body instanceof s.Readable&&z(o.body,e),p&&p.body&&p.body.emit("error",e)};if(u&&u.aborted)return void m();const g=function(){m(),v()},f=h(c);let w;function v(){f.abort(),u&&u.removeEventListener("abort",g),clearTimeout(w)}u&&u.addEventListener("abort",g),o.timeout&&f.once("socket",(function(e){w=setTimeout((function(){n(new d(`network timeout at: ${o.url}`,"request-timeout")),v()}),o.timeout)})),f.on("error",(function(e){n(new d(`request to ${o.url} failed, reason: ${e.message}`,"system",e)),p&&p.body&&z(p.body,e),v()})),function(e,t){let i;e.on("socket",(function(e){i=e})),e.on("response",(function(e){const s=e.headers;"chunked"!==s["transfer-encoding"]||s["content-length"]||e.once("close",(function(e){if(i.listenerCount("data")>0&&!e){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",t(e)}}))}))}(f,(function(e){u&&u.aborted||p&&p.body&&z(p.body,e)})),parseInt(process.version.substring(1))<14&&f.on("socket",(function(e){e.addListener("close",(function(t){const i=e.listenerCount("data")>0;if(p&&i&&!t&&(!u||!u.aborted)){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",p.body.emit("error",e)}}))})),f.on("response",(function(e){clearTimeout(w);const t=function(e){const t=new Headers;for(const i of Object.keys(e))if(!P.test(i))if(Array.isArray(e[i]))for(const s of e[i])D.test(s)||(void 0===t[F][i]?t[F][i]=[s]:t[F][i].push(s));else D.test(e[i])||(t[F][i]=[e[i]]);return t}(e.headers);if(j.isRedirect(e.statusCode)){const s=t.get("Location");let r=null;try{r=null===s?null:new V(s,o.url).toString()}catch(e){if("manual"!==o.redirect)return n(new d(`uri requested responds with an invalid redirect URL: ${s}`,"invalid-redirect")),void v()}switch(o.redirect){case"error":return n(new d(`uri requested responds with a redirect, redirect mode is set to error: ${o.url}`,"no-redirect")),void v();case"manual":if(null!==r)try{t.set("Location",r)}catch(e){n(e)}break;case"follow":if(null===r)break;if(o.counter>=o.follow)return n(new d(`maximum redirect reached at: ${o.url}`,"max-redirect")),void v();const s={headers:new Headers(o.headers),follow:o.follow,counter:o.counter+1,agent:o.agent,compress:o.compress,method:o.method,body:o.body,signal:o.signal,timeout:o.timeout,size:o.size};if(!q(o.url,r)||!Y(o.url,r))for(const e of["authorization","www-authenticate","cookie","cookie2"])s.headers.delete(e);return 303!==e.statusCode&&o.body&&null===A(o)?(n(new d("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void v()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==o.method)||(s.method="GET",s.body=void 0,s.headers.delete("content-length")),i(j(new Request(r,s))),void v())}}e.once("end",(function(){u&&u.removeEventListener("abort",g)}));let s=e.pipe(new Q);const r={url:o.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:o.size,timeout:o.timeout,counter:o.counter},a=t.get("Content-Encoding");if(!o.compress||"HEAD"===o.method||null===a||204===e.statusCode||304===e.statusCode)return p=new Response(s,r),void i(p);const c={flush:l.Z_SYNC_FLUSH,finishFlush:l.Z_SYNC_FLUSH};if("gzip"==a||"x-gzip"==a)return s=s.pipe(l.createGunzip(c)),p=new Response(s,r),void i(p);if("deflate"==a||"x-deflate"==a){const t=e.pipe(new Q);return t.once("data",(function(e){s=8==(15&e[0])?s.pipe(l.createInflate()):s.pipe(l.createInflateRaw()),p=new Response(s,r),i(p)})),void t.on("end",(function(){p||(p=new Response(s,r),i(p))}))}if("br"==a&&"function"==typeof l.createBrotliDecompress)return s=s.pipe(l.createBrotliDecompress()),p=new Response(s,r),void i(p);p=new Response(s,r),i(p)})),function(e,t){const i=t.body;null===i?e.end():y(i)?i.stream().pipe(e):Buffer.isBuffer(i)?(e.write(i),e.end()):i.pipe(e)}(f,o)}))}function z(e,t){e.destroy?e.destroy(t):(e.emit("error",t),e.end())}j.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},j.Promise=global.Promise;const K=j}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={exports:{}};return s[e].call(i.exports,i,i.exports,n),i.exports}n.m=s,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,n.t=function(i,s){if(1&s&&(i=this(i)),8&s)return i;if("object"==typeof i&&i){if(4&s&&i.__esModule)return i;if(16&s&&"function"==typeof i.then)return i}var r=Object.create(null);n.r(r);var o={};e=e||[null,t({}),t([]),t(t)];for(var a=2&s&&i;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>o[e]=()=>i[e]));return o.default=()=>i,n.d(r,o),r},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,i)=>(n.f[i](e,t),t)),[])),n.u=e=>"feature-"+{429:"encoding",449:"gitlab",457:"github",913:"telemetry"}[e]+".js",n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i={898:1},n.f.require=(e,t)=>{i[e]||(e=>{var t=e.modules,s=e.ids,r=e.runtime;for(var o in t)n.o(t,o)&&(n.m[o]=t[o]);r&&r(n);for(var a=0;a<s.length;a++)i[s[a]]=1})(require("./"+n.u(e)))};var o={};(()=>{n.r(o),n.d(o,{activate:()=>I,deactivate:()=>_});var e=n(9496),t=n(4372),i=n(7338),s=n(9996),r=n(8294);Object.freeze({dispose:()=>{}});class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===r.vj)throw new Error(`Cannot use the reserved name '${r.vj}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}}var a=n(2540),l=n(5255),c=n(6631),h=n(7462),u=n(5367),d=n(6450),p=n(1529),m=n(9502),g=n(7925),f=n(9529);function w(e){!function(e){e.subscriptions.push(s.W.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{"hover.commands"===e.type&&"You"!==e.commit.author.name?await(0,f.P0)(l.Gh.InviteToLiveShare,{email:e.commit.author.email}):await(0,f.P0)(l.Gh.InviteToLiveShare,{})}}))}(e)}var v=n(4241),y=Object.defineProperty,b=Object.getOwnPropertyDescriptor,C=(e,t,i,s)=>{for(var r,n=s>1?void 0:s?b(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(n=(s?r(t,i,n):r(n))||n);return s&&n&&y(t,i,n),n};class Storage{constructor(t){this.context=t,this._onDidChange=new e.EventEmitter,this._onDidChangeSecrets=new e.EventEmitter,this._disposable=this.context.secrets.onDidChange((e=>this._onDidChangeSecrets.fire(e)))}get onDidChange(){return this._onDidChange.event}get onDidChangeSecrets(){return this._onDidChangeSecrets.event}dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`gitlens:${e}`,t)}async delete(e){await this.context.globalState.update(`gitlens:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!1})}async store(e,t){await this.context.globalState.update(`gitlens:${e}`,t),this._onDidChange.fire({key:e,workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`gitlens:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`gitlens:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!0})}async storeWorkspace(e,t){await this.context.workspaceState.update(`gitlens:${e}`,t),this._onDidChange.fire({key:e,workspace:!0})}}C([(0,v.fF)({logThreshold:50})],Storage.prototype,"get",1),C([(0,v.fF)({logThreshold:250})],Storage.prototype,"delete",1),C([(0,v.fF)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),C([(0,v.fF)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),C([(0,v.fF)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),C([(0,v.fF)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),C([(0,v.fF)({logThreshold:25})],Storage.prototype,"getWorkspace",1),C([(0,v.fF)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),C([(0,v.fF)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var A=(e=>(e.Version="gitlens:synced:version",e.PreReleaseVersion="gitlens:synced:preVersion",e.HomeViewWelcomeVisible="gitlens:views:welcome:visible",e))(A||{}),P=n(5148),D=n(7512),S=n(2185),k=n(4336),R=n(8227),F=n(9967),$=n(6398),T=n(4550),x=n(6922);async function I(r){const n=r.extension.packageJSON.version,o=(0,T.L5)(n,"> 2020.0.0"),v=P.D.get("outputLevel");k.Yd.configure({name:"GitLens",createChannel:function(t){return e.window.createOutputChannel(t)},toLoggable:function(t){return(0,h.uy)(t)?`GitUri(${t.toString(!0)}${t.repoPath?` repoPath=${t.repoPath}`:""}${t.sha?` sha=${t.sha}`:""})`:t instanceof e.Uri?`Uri(${t.toString(!0)})`:(0,p.uC)(t)||(0,u.BF)(t)||(0,d.f_)(t)||(0,m.YR)(t)||(0,x.Jc)(t)?t.toString():void 0}},(0,a.oE)(v),r.extensionMode===e.ExtensionMode.Development);const y=new $.u(`GitLens${o?" (pre-release)":""} v${n}`,{log:{message:` activating in ${e.env.appName}(${e.version}) on the ${i.$L?"web":"desktop"} (${e.env.machineId}|${e.env.sessionId})`}});if(o){const e=(0,T.mL)(n);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5)return y.stop({message:` was NOT activated because this pre-release version (${n}) has expired`}),void setTimeout(g.Nl,0,n)}e.workspace.isTrusted||(0,c.v)(l.zf.Untrusted,!0),function(e,...t){e.globalState?.setKeysForSync([...t,A.Version,A.HomeViewWelcomeVisible])}(r);const b=new Storage(r),C=b.get(o?"synced:preVersion":"synced:version"),I=b.get(o?"preVersion":"version");let _,B;_=null==I||null==C?C??I:1===(0,T.qu)(C,I)?C:I,k.Yd.enabled(R.i.Debug)&&(B=`syncedVersion=${C}, localVersion=${I}, previousVersion=${_}, welcome=${b.get("views:welcome:visible")}`),null==_&&b.store("views:welcome:visible",!0),P.V.configure(r),(0,D.Cz)(P.D.get("defaultDateLocale")??e.env.language),r.subscriptions.push(P.D.onDidChange((t=>{P.D.changed(t,"defaultDateLocale")&&(0,D.Cz)(P.D.get("defaultDateLocale",void 0,e.env.language))})));const E=s.W.create(r,b,o,n,_);(0,S.IH)(E.onReady)((()=>{r.subscriptions.push(...(0,f.$$)(E)),function(e){e.context.subscriptions.push(e.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await(0,f.P0)(l.Gh.CreatePullRequestOnRemote,{base:void 0,compare:e.branch.isRemote?(0,u.S3)(e.branch.name):e.branch.upstream?(0,u.S3)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath})}}),e.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await(0,f.P0)(l.Gh.OpenPullRequestOnRemote,{pr:{url:e.pullRequest.url}})}}))}(E),w(r),e.workspace.isTrusted||r.subscriptions.push(e.workspace.onDidGrantWorkspaceTrust((()=>{(0,c.v)(l.zf.Untrusted,void 0),E.telemetry.setGlobalAttribute("workspace.isTrusted",e.workspace.isTrusted)}))),async function(t,i,s){if(null==s){if(k.Yd.log(`GitLens first-time install; window.focused=${e.window.state.focused}`),!1===P.D.get("showWelcomeOnInstall"))return;if(e.window.state.focused)await t.storage.delete("pendingWelcomeOnFocus"),await(0,f.P0)(l.Gh.ShowWelcomePage);else{await t.storage.store("pendingWelcomeOnFocus",!0);const i=e.window.onDidChangeWindowState((e=>{e.focused&&(i.dispose(),!0===t.storage.get("pendingWelcomeOnFocus")&&(t.storage.delete("pendingWelcomeOnFocus"),P.D.get("showWelcomeOnInstall")&&(0,f.P0)(l.Gh.ShowWelcomePage)))}));t.context.subscriptions.push(i)}return}s!==i&&k.Yd.log(`GitLens upgraded from v${s} to v${i}; window.focused=${e.window.state.focused}`);const[r,n]=i.split(".").map((e=>parseInt(e,10))),[o,a]=s.split(".").map((e=>parseInt(e,10)));if(r===o||r<o||r===o&&n<a)return;r!==o&&(i=String(r));if((0,f.P0)(l.Gh.ShowHomeView),P.D.get("showWhatsNewAfterUpgrades"))if(e.window.state.focused)await t.storage.delete("pendingWhatsNewOnFocus"),await(0,g.xs)(i);else{await t.storage.store("pendingWhatsNewOnFocus",!0);const s=e.window.onDidChangeWindowState((e=>{e.focused&&(s.dispose(),!0===t.storage.get("pendingWhatsNewOnFocus")&&(t.storage.delete("pendingWhatsNewOnFocus"),P.D.get("showWhatsNewAfterUpgrades")&&(0,g.xs)(i)))}));t.context.subscriptions.push(s)}}(E,n,_),b.store(o?"preVersion":"version",n),null!=C&&1!==(0,T.qu)(n,C)||b.store(o?"synced:preVersion":"synced:version",n),v===a.M7.Debug&&setTimeout((async()=>{P.D.get("outputLevel")===a.M7.Debug&&(E.prereleaseOrDebugging||await(0,g.EB)()&&(0,f.P0)(l.Gh.DisableDebugLogging))}),6e4)})),E.debugging?((0,c.v)(l.zf.Debugging,!0),(0,c.v)(l.zf.PreRelease,!0)):E.prerelease&&(0,c.v)(l.zf.PreRelease,!0),await E.ready();const M=(0,F.xH)(P.D.getAll(!0),{prefix:"config",stringify:"all"});E.telemetry.setGlobalAttributes({debugging:E.debugging,prerelease:o,install:null==_,upgrade:null!=_&&n!==_,upgradedFrom:null!=_&&n!==_?_:void 0});const W=new Api(E),L=E.mode,U=y.startTime,N=(0,t.a)(),G=y.elapsed();return y.stop({message:` activated${null!=B?`, ${B}`:""}${null!=L?`, mode: ${L.name}`:""}`}),E.telemetry.sendEvent("activate",{"activation.elapsed":G,"activation.mode":L?.name,...M},U,N),setTimeout(O,25e3),Promise.resolve(W)}function _(){k.Yd.log("GitLens deactivating..."),s.W.instance.deactivate()}function O(){null!=e.extensions.getExtension("gitkraken.gitkraken-authentication")&&(0,f.dO)(l.nA.UninstallExtension,"gitkraken.gitkraken-authentication")}})(),module.exports=o})();